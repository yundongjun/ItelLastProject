
servo_two.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007658  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08007768  08007768  00008768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bc8  08007bc8  000091e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007bc8  08007bc8  00008bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bd0  08007bd0  000091e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd0  08007bd0  00008bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bd4  08007bd4  00008bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08007bd8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001e4  08007dbc  000091e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08007dbc  00009474  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c675  00000000  00000000  0000920d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e40  00000000  00000000  00015882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  000176c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1f  00000000  00000000  000183b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018949  00000000  00000000  00018dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e094  00000000  00000000  00031720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cdb8  00000000  00000000  0003f7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc56c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a70  00000000  00000000  000cc5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d1020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007750 	.word	0x08007750

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007750 	.word	0x08007750

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_fmul>:
 8000d48:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d50:	bf1e      	ittt	ne
 8000d52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d56:	ea92 0f0c 	teqne	r2, ip
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d06f      	beq.n	8000e40 <__aeabi_fmul+0xf8>
 8000d60:	441a      	add	r2, r3
 8000d62:	ea80 0c01 	eor.w	ip, r0, r1
 8000d66:	0240      	lsls	r0, r0, #9
 8000d68:	bf18      	it	ne
 8000d6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6e:	d01e      	beq.n	8000dae <__aeabi_fmul+0x66>
 8000d70:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d84:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d88:	bf3e      	ittt	cc
 8000d8a:	0049      	lslcc	r1, r1, #1
 8000d8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d90:	005b      	lslcc	r3, r3, #1
 8000d92:	ea40 0001 	orr.w	r0, r0, r1
 8000d96:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d9a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d9c:	d81d      	bhi.n	8000dda <__aeabi_fmul+0x92>
 8000d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000da2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da6:	bf08      	it	eq
 8000da8:	f020 0001 	biceq.w	r0, r0, #1
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db6:	bf08      	it	eq
 8000db8:	0249      	lsleq	r1, r1, #9
 8000dba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc4:	bfc2      	ittt	gt
 8000dc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dce:	4770      	bxgt	lr
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	dc5d      	bgt.n	8000e98 <__aeabi_fmul+0x150>
 8000ddc:	f112 0f19 	cmn.w	r2, #25
 8000de0:	bfdc      	itt	le
 8000de2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de6:	4770      	bxle	lr
 8000de8:	f1c2 0200 	rsb	r2, r2, #0
 8000dec:	0041      	lsls	r1, r0, #1
 8000dee:	fa21 f102 	lsr.w	r1, r1, r2
 8000df2:	f1c2 0220 	rsb	r2, r2, #32
 8000df6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfe:	f140 0000 	adc.w	r0, r0, #0
 8000e02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e06:	bf08      	it	eq
 8000e08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0c:	4770      	bx	lr
 8000e0e:	f092 0f00 	teq	r2, #0
 8000e12:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0040      	lsleq	r0, r0, #1
 8000e1a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1e:	3a01      	subeq	r2, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xce>
 8000e22:	ea40 000c 	orr.w	r0, r0, ip
 8000e26:	f093 0f00 	teq	r3, #0
 8000e2a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2e:	bf02      	ittt	eq
 8000e30:	0049      	lsleq	r1, r1, #1
 8000e32:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e36:	3b01      	subeq	r3, #1
 8000e38:	d0f9      	beq.n	8000e2e <__aeabi_fmul+0xe6>
 8000e3a:	ea41 010c 	orr.w	r1, r1, ip
 8000e3e:	e78f      	b.n	8000d60 <__aeabi_fmul+0x18>
 8000e40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e44:	ea92 0f0c 	teq	r2, ip
 8000e48:	bf18      	it	ne
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d00a      	beq.n	8000e66 <__aeabi_fmul+0x11e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	d1d8      	bne.n	8000e0e <__aeabi_fmul+0xc6>
 8000e5c:	ea80 0001 	eor.w	r0, r0, r1
 8000e60:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e64:	4770      	bx	lr
 8000e66:	f090 0f00 	teq	r0, #0
 8000e6a:	bf17      	itett	ne
 8000e6c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e70:	4608      	moveq	r0, r1
 8000e72:	f091 0f00 	teqne	r1, #0
 8000e76:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e7a:	d014      	beq.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	d101      	bne.n	8000e86 <__aeabi_fmul+0x13e>
 8000e82:	0242      	lsls	r2, r0, #9
 8000e84:	d10f      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e86:	ea93 0f0c 	teq	r3, ip
 8000e8a:	d103      	bne.n	8000e94 <__aeabi_fmul+0x14c>
 8000e8c:	024b      	lsls	r3, r1, #9
 8000e8e:	bf18      	it	ne
 8000e90:	4608      	movne	r0, r1
 8000e92:	d108      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea4:	4770      	bx	lr
 8000ea6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eaa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eae:	4770      	bx	lr

08000eb0 <__aeabi_fdiv>:
 8000eb0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb8:	bf1e      	ittt	ne
 8000eba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ebe:	ea92 0f0c 	teqne	r2, ip
 8000ec2:	ea93 0f0c 	teqne	r3, ip
 8000ec6:	d069      	beq.n	8000f9c <__aeabi_fdiv+0xec>
 8000ec8:	eba2 0203 	sub.w	r2, r2, r3
 8000ecc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed0:	0249      	lsls	r1, r1, #9
 8000ed2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed6:	d037      	beq.n	8000f48 <__aeabi_fdiv+0x98>
 8000ed8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000edc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	bf38      	it	cc
 8000eec:	005b      	lslcc	r3, r3, #1
 8000eee:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ef2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	bf24      	itt	cs
 8000efa:	1a5b      	subcs	r3, r3, r1
 8000efc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f12:	bf24      	itt	cs
 8000f14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	bf18      	it	ne
 8000f2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f32:	d1e0      	bne.n	8000ef6 <__aeabi_fdiv+0x46>
 8000f34:	2afd      	cmp	r2, #253	@ 0xfd
 8000f36:	f63f af50 	bhi.w	8000dda <__aeabi_fmul+0x92>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f40:	bf08      	it	eq
 8000f42:	f020 0001 	biceq.w	r0, r0, #1
 8000f46:	4770      	bx	lr
 8000f48:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f50:	327f      	adds	r2, #127	@ 0x7f
 8000f52:	bfc2      	ittt	gt
 8000f54:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f5c:	4770      	bxgt	lr
 8000f5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	3a01      	subs	r2, #1
 8000f68:	e737      	b.n	8000dda <__aeabi_fmul+0x92>
 8000f6a:	f092 0f00 	teq	r2, #0
 8000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0040      	lsleq	r0, r0, #1
 8000f76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f7a:	3a01      	subeq	r2, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xc2>
 8000f7e:	ea40 000c 	orr.w	r0, r0, ip
 8000f82:	f093 0f00 	teq	r3, #0
 8000f86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0049      	lsleq	r1, r1, #1
 8000f8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f92:	3b01      	subeq	r3, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fdiv+0xda>
 8000f96:	ea41 010c 	orr.w	r1, r1, ip
 8000f9a:	e795      	b.n	8000ec8 <__aeabi_fdiv+0x18>
 8000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	d108      	bne.n	8000fb8 <__aeabi_fdiv+0x108>
 8000fa6:	0242      	lsls	r2, r0, #9
 8000fa8:	f47f af7d 	bne.w	8000ea6 <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	f47f af70 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e776      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	d104      	bne.n	8000fc8 <__aeabi_fdiv+0x118>
 8000fbe:	024b      	lsls	r3, r1, #9
 8000fc0:	f43f af4c 	beq.w	8000e5c <__aeabi_fmul+0x114>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e76e      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fc8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fcc:	bf18      	it	ne
 8000fce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fd2:	d1ca      	bne.n	8000f6a <__aeabi_fdiv+0xba>
 8000fd4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd8:	f47f af5c 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fdc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fe0:	f47f af3c 	bne.w	8000e5c <__aeabi_fmul+0x114>
 8000fe4:	e75f      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fe6:	bf00      	nop

08000fe8 <__gesf2>:
 8000fe8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fec:	e006      	b.n	8000ffc <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__lesf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	e002      	b.n	8000ffc <__cmpsf2+0x4>
 8000ff6:	bf00      	nop

08000ff8 <__cmpsf2>:
 8000ff8:	f04f 0c01 	mov.w	ip, #1
 8000ffc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001000:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001004:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800100c:	bf18      	it	ne
 800100e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001012:	d011      	beq.n	8001038 <__cmpsf2+0x40>
 8001014:	b001      	add	sp, #4
 8001016:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800101a:	bf18      	it	ne
 800101c:	ea90 0f01 	teqne	r0, r1
 8001020:	bf58      	it	pl
 8001022:	ebb2 0003 	subspl.w	r0, r2, r3
 8001026:	bf88      	it	hi
 8001028:	17c8      	asrhi	r0, r1, #31
 800102a:	bf38      	it	cc
 800102c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001030:	bf18      	it	ne
 8001032:	f040 0001 	orrne.w	r0, r0, #1
 8001036:	4770      	bx	lr
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__cmpsf2+0x4c>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d105      	bne.n	8001050 <__cmpsf2+0x58>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d1e4      	bne.n	8001014 <__cmpsf2+0x1c>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d0e1      	beq.n	8001014 <__cmpsf2+0x1c>
 8001050:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <__aeabi_cfrcmple>:
 8001058:	4684      	mov	ip, r0
 800105a:	4608      	mov	r0, r1
 800105c:	4661      	mov	r1, ip
 800105e:	e7ff      	b.n	8001060 <__aeabi_cfcmpeq>

08001060 <__aeabi_cfcmpeq>:
 8001060:	b50f      	push	{r0, r1, r2, r3, lr}
 8001062:	f7ff ffc9 	bl	8000ff8 <__cmpsf2>
 8001066:	2800      	cmp	r0, #0
 8001068:	bf48      	it	mi
 800106a:	f110 0f00 	cmnmi.w	r0, #0
 800106e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001070 <__aeabi_fcmpeq>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff fff4 	bl	8001060 <__aeabi_cfcmpeq>
 8001078:	bf0c      	ite	eq
 800107a:	2001      	moveq	r0, #1
 800107c:	2000      	movne	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmplt>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffea 	bl	8001060 <__aeabi_cfcmpeq>
 800108c:	bf34      	ite	cc
 800108e:	2001      	movcc	r0, #1
 8001090:	2000      	movcs	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmple>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffe0 	bl	8001060 <__aeabi_cfcmpeq>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpge>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffd2 	bl	8001058 <__aeabi_cfrcmple>
 80010b4:	bf94      	ite	ls
 80010b6:	2001      	movls	r0, #1
 80010b8:	2000      	movhi	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpgt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffc8 	bl	8001058 <__aeabi_cfrcmple>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmpun>:
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e0:	d102      	bne.n	80010e8 <__aeabi_fcmpun+0x14>
 80010e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e6:	d108      	bne.n	80010fa <__aeabi_fcmpun+0x26>
 80010e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010ec:	d102      	bne.n	80010f4 <__aeabi_fcmpun+0x20>
 80010ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010f2:	d102      	bne.n	80010fa <__aeabi_fcmpun+0x26>
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0001 	mov.w	r0, #1
 80010fe:	4770      	bx	lr

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <__aeabi_d2lz>:
 800114c:	b538      	push	{r3, r4, r5, lr}
 800114e:	2200      	movs	r2, #0
 8001150:	2300      	movs	r3, #0
 8001152:	4604      	mov	r4, r0
 8001154:	460d      	mov	r5, r1
 8001156:	f7ff fc3b 	bl	80009d0 <__aeabi_dcmplt>
 800115a:	b928      	cbnz	r0, 8001168 <__aeabi_d2lz+0x1c>
 800115c:	4620      	mov	r0, r4
 800115e:	4629      	mov	r1, r5
 8001160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001164:	f000 b80a 	b.w	800117c <__aeabi_d2ulz>
 8001168:	4620      	mov	r0, r4
 800116a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800116e:	f000 f805 	bl	800117c <__aeabi_d2ulz>
 8001172:	4240      	negs	r0, r0
 8001174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001178:	bd38      	pop	{r3, r4, r5, pc}
 800117a:	bf00      	nop

0800117c <__aeabi_d2ulz>:
 800117c:	b5d0      	push	{r4, r6, r7, lr}
 800117e:	2200      	movs	r2, #0
 8001180:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <__aeabi_d2ulz+0x34>)
 8001182:	4606      	mov	r6, r0
 8001184:	460f      	mov	r7, r1
 8001186:	f7ff f9b1 	bl	80004ec <__aeabi_dmul>
 800118a:	f7ff fc5f 	bl	8000a4c <__aeabi_d2uiz>
 800118e:	4604      	mov	r4, r0
 8001190:	f7ff f932 	bl	80003f8 <__aeabi_ui2d>
 8001194:	2200      	movs	r2, #0
 8001196:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <__aeabi_d2ulz+0x38>)
 8001198:	f7ff f9a8 	bl	80004ec <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4630      	mov	r0, r6
 80011a2:	4639      	mov	r1, r7
 80011a4:	f7fe ffea 	bl	800017c <__aeabi_dsub>
 80011a8:	f7ff fc50 	bl	8000a4c <__aeabi_d2uiz>
 80011ac:	4621      	mov	r1, r4
 80011ae:	bdd0      	pop	{r4, r6, r7, pc}
 80011b0:	3df00000 	.word	0x3df00000
 80011b4:	41f00000 	.word	0x41f00000

080011b8 <clamp_deg_int>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define CLAMP_U16(v,lo,hi) ((uint16_t)((v) < (lo) ? (lo) : ((v) > (hi) ? (hi) : (v))))
static inline uint8_t clamp_deg_int(int v){ return (uint8_t)(v<0?0:(v>180?180:v)); }
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db07      	blt.n	80011d6 <clamp_deg_int+0x1e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2bb4      	cmp	r3, #180	@ 0xb4
 80011ca:	dc02      	bgt.n	80011d2 <clamp_deg_int+0x1a>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	e002      	b.n	80011d8 <clamp_deg_int+0x20>
 80011d2:	23b4      	movs	r3, #180	@ 0xb4
 80011d4:	e000      	b.n	80011d8 <clamp_deg_int+0x20>
 80011d6:	2300      	movs	r3, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
	...

080011e4 <angle_to_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint16_t angle_to_us(uint8_t deg, uint16_t us_min, uint16_t us_max, uint8_t invert)
{
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4604      	mov	r4, r0
 80011ec:	4608      	mov	r0, r1
 80011ee:	4611      	mov	r1, r2
 80011f0:	461a      	mov	r2, r3
 80011f2:	4623      	mov	r3, r4
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	4603      	mov	r3, r0
 80011f8:	80bb      	strh	r3, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	807b      	strh	r3, [r7, #2]
 80011fe:	4613      	mov	r3, r2
 8001200:	71bb      	strb	r3, [r7, #6]
  if (deg > 180) deg = 180;
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2bb4      	cmp	r3, #180	@ 0xb4
 8001206:	d901      	bls.n	800120c <angle_to_us+0x28>
 8001208:	23b4      	movs	r3, #180	@ 0xb4
 800120a:	71fb      	strb	r3, [r7, #7]
  uint8_t d = invert ? (uint8_t)(180 - deg) : deg;
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d007      	beq.n	8001222 <angle_to_us+0x3e>
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8001218:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800121c:	33b4      	adds	r3, #180	@ 0xb4
 800121e:	b2db      	uxtb	r3, r3
 8001220:	e000      	b.n	8001224 <angle_to_us+0x40>
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	73fb      	strb	r3, [r7, #15]
  int us = us_min + (int)((us_max - us_min) * (float)d / 180.0f + 0.5f);
 8001226:	88bc      	ldrh	r4, [r7, #4]
 8001228:	887a      	ldrh	r2, [r7, #2]
 800122a:	88bb      	ldrh	r3, [r7, #4]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fd36 	bl	8000ca0 <__aeabi_i2f>
 8001234:	4605      	mov	r5, r0
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fd2d 	bl	8000c98 <__aeabi_ui2f>
 800123e:	4603      	mov	r3, r0
 8001240:	4619      	mov	r1, r3
 8001242:	4628      	mov	r0, r5
 8001244:	f7ff fd80 	bl	8000d48 <__aeabi_fmul>
 8001248:	4603      	mov	r3, r0
 800124a:	4911      	ldr	r1, [pc, #68]	@ (8001290 <angle_to_us+0xac>)
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fe2f 	bl	8000eb0 <__aeabi_fdiv>
 8001252:	4603      	mov	r3, r0
 8001254:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fc6d 	bl	8000b38 <__addsf3>
 800125e:	4603      	mov	r3, r0
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff4d 	bl	8001100 <__aeabi_f2iz>
 8001266:	4603      	mov	r3, r0
 8001268:	4423      	add	r3, r4
 800126a:	60bb      	str	r3, [r7, #8]
  return CLAMP_U16(us, us_min, us_max);
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	429a      	cmp	r2, r3
 8001272:	db08      	blt.n	8001286 <angle_to_us+0xa2>
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	429a      	cmp	r2, r3
 800127a:	dc02      	bgt.n	8001282 <angle_to_us+0x9e>
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	b29b      	uxth	r3, r3
 8001280:	e002      	b.n	8001288 <angle_to_us+0xa4>
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	e000      	b.n	8001288 <angle_to_us+0xa4>
 8001286:	88bb      	ldrh	r3, [r7, #4]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bdb0      	pop	{r4, r5, r7, pc}
 8001290:	43340000 	.word	0x43340000

08001294 <servo1_set_deg>:

static void servo1_set_deg(uint8_t deg)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,
 800129e:	79f8      	ldrb	r0, [r7, #7]
 80012a0:	2301      	movs	r3, #1
 80012a2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80012a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012aa:	f7ff ff9b 	bl	80011e4 <angle_to_us>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <servo1_set_deg+0x2c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	635a      	str	r2, [r3, #52]	@ 0x34
    angle_to_us(deg, SERVO1_MIN_US, SERVO1_MAX_US, SERVO1_INVERT));
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000200 	.word	0x20000200

080012c4 <servo2_set_deg>:

static void servo2_set_deg(uint8_t deg)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,
 80012ce:	79f8      	ldrb	r0, [r7, #7]
 80012d0:	2301      	movs	r3, #1
 80012d2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80012d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012da:	f7ff ff83 	bl	80011e4 <angle_to_us>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <servo2_set_deg+0x2c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	639a      	str	r2, [r3, #56]	@ 0x38
    angle_to_us(deg, SERVO2_MIN_US, SERVO2_MAX_US, SERVO2_INVERT));
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000200 	.word	0x20000200

080012f4 <move_toward>:

static void move_toward(float *cur, float tgt, float step_deg)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  if (*cur < tgt) { *cur += step_deg; if (*cur > tgt) *cur = tgt; }
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	68b8      	ldr	r0, [r7, #8]
 8001308:	f7ff feda 	bl	80010c0 <__aeabi_fcmpgt>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d017      	beq.n	8001342 <move_toward+0x4e>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fc0d 	bl	8000b38 <__addsf3>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4619      	mov	r1, r3
 800132c:	68b8      	ldr	r0, [r7, #8]
 800132e:	f7ff fea9 	bl	8001084 <__aeabi_fcmplt>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d100      	bne.n	800133a <move_toward+0x46>
  else if (*cur > tgt) { *cur -= step_deg; if (*cur < tgt) *cur = tgt; }
}
 8001338:	e024      	b.n	8001384 <move_toward+0x90>
  if (*cur < tgt) { *cur += step_deg; if (*cur > tgt) *cur = tgt; }
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	601a      	str	r2, [r3, #0]
}
 8001340:	e020      	b.n	8001384 <move_toward+0x90>
  else if (*cur > tgt) { *cur -= step_deg; if (*cur < tgt) *cur = tgt; }
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	68b8      	ldr	r0, [r7, #8]
 800134a:	f7ff fe9b 	bl	8001084 <__aeabi_fcmplt>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d100      	bne.n	8001356 <move_toward+0x62>
}
 8001354:	e016      	b.n	8001384 <move_toward+0x90>
  else if (*cur > tgt) { *cur -= step_deg; if (*cur < tgt) *cur = tgt; }
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fbe9 	bl	8000b34 <__aeabi_fsub>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	68b8      	ldr	r0, [r7, #8]
 8001372:	f7ff fea5 	bl	80010c0 <__aeabi_fcmpgt>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d100      	bne.n	800137e <move_toward+0x8a>
}
 800137c:	e002      	b.n	8001384 <move_toward+0x90>
  else if (*cur > tgt) { *cur -= step_deg; if (*cur < tgt) *cur = tgt; }
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <apply_default_pose>:

static void apply_default_pose(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  mode = MODE_IDLE;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <apply_default_pose+0x20>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
  pan_tgt  = PAN_DEFAULT_DEG;
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <apply_default_pose+0x24>)
 8001398:	4a06      	ldr	r2, [pc, #24]	@ (80013b4 <apply_default_pose+0x28>)
 800139a:	601a      	str	r2, [r3, #0]
  tilt_tgt = TILT_DEFAULT_DEG;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <apply_default_pose+0x2c>)
 800139e:	4a05      	ldr	r2, [pc, #20]	@ (80013b4 <apply_default_pose+0x28>)
 80013a0:	601a      	str	r2, [r3, #0]
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200002d5 	.word	0x200002d5
 80013b0:	20000004 	.word	0x20000004
 80013b4:	42b40000 	.word	0x42b40000
 80013b8:	2000000c 	.word	0x2000000c

080013bc <set_grid_cell>:

/* 1..9: 좌상(1) ~ 우하(9) */
static void set_grid_cell(uint8_t cell_1to9)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  if (cell_1to9 < 1 || cell_1to9 > 9) return;
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d02b      	beq.n	8001424 <set_grid_cell+0x68>
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b09      	cmp	r3, #9
 80013d0:	d828      	bhi.n	8001424 <set_grid_cell+0x68>
  mode = MODE_GRID;
 80013d2:	4b16      	ldr	r3, [pc, #88]	@ (800142c <set_grid_cell+0x70>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
  uint8_t idx = (uint8_t)(cell_1to9 - 1);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	3b01      	subs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
  uint8_t row = idx / 3;   /* 0=상,1=중,2=하 */
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	4a13      	ldr	r2, [pc, #76]	@ (8001430 <set_grid_cell+0x74>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	085b      	lsrs	r3, r3, #1
 80013e8:	73bb      	strb	r3, [r7, #14]
  uint8_t col = idx % 3;   /* 0=좌,1=중,2=우 */
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <set_grid_cell+0x74>)
 80013ee:	fba3 1302 	umull	r1, r3, r3, r2
 80013f2:	0859      	lsrs	r1, r3, #1
 80013f4:	460b      	mov	r3, r1
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	440b      	add	r3, r1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	737b      	strb	r3, [r7, #13]
  pan_tgt  = GRID_PAN[col];
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	4a0c      	ldr	r2, [pc, #48]	@ (8001434 <set_grid_cell+0x78>)
 8001402:	5cd3      	ldrb	r3, [r2, r3]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fc47 	bl	8000c98 <__aeabi_ui2f>
 800140a:	4603      	mov	r3, r0
 800140c:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <set_grid_cell+0x7c>)
 800140e:	6013      	str	r3, [r2, #0]
  tilt_tgt = GRID_TILT[row];
 8001410:	7bbb      	ldrb	r3, [r7, #14]
 8001412:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <set_grid_cell+0x80>)
 8001414:	5cd3      	ldrb	r3, [r2, r3]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fc3e 	bl	8000c98 <__aeabi_ui2f>
 800141c:	4603      	mov	r3, r0
 800141e:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <set_grid_cell+0x84>)
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e000      	b.n	8001426 <set_grid_cell+0x6a>
  if (cell_1to9 < 1 || cell_1to9 > 9) return;
 8001424:	bf00      	nop
//  pan_tgt  = clampf(pan_tgt,  PAN_MIN_DEG,  PAN_MAX_DEG);
//  tilt_tgt = clampf(tilt_tgt, TILT_MIN_DEG, TILT_MAX_DEG);
//  boost_ticks = 15; // 15*20ms = 300ms 동안 가속
}
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200002d5 	.word	0x200002d5
 8001430:	aaaaaaab 	.word	0xaaaaaaab
 8001434:	08007784 	.word	0x08007784
 8001438:	20000004 	.word	0x20000004
 800143c:	08007788 	.word	0x08007788
 8001440:	2000000c 	.word	0x2000000c

08001444 <set_track_xy>:

/* 정규화 좌표 기반 추적 (x:0~1 좌→우, y:0~1 상→하) */
static void set_track_xy(float x, float y)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  if (x < 0) x = 0; if (x > 1) x = 1;
 800144e:	f04f 0100 	mov.w	r1, #0
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fe16 	bl	8001084 <__aeabi_fcmplt>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <set_track_xy+0x20>
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fe29 	bl	80010c0 <__aeabi_fcmpgt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <set_track_xy+0x36>
 8001474:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001478:	607b      	str	r3, [r7, #4]
  if (y < 0) y = 0; if (y > 1) y = 1;
 800147a:	f04f 0100 	mov.w	r1, #0
 800147e:	6838      	ldr	r0, [r7, #0]
 8001480:	f7ff fe00 	bl	8001084 <__aeabi_fcmplt>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <set_track_xy+0x4c>
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001494:	6838      	ldr	r0, [r7, #0]
 8001496:	f7ff fe13 	bl	80010c0 <__aeabi_fcmpgt>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <set_track_xy+0x62>
 80014a0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80014a4:	603b      	str	r3, [r7, #0]
  mode = MODE_TRACK;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <set_track_xy+0x9c>)
 80014a8:	2202      	movs	r2, #2
 80014aa:	701a      	strb	r2, [r3, #0]
  pan_tgt  = 180.0f * x;
 80014ac:	490d      	ldr	r1, [pc, #52]	@ (80014e4 <set_track_xy+0xa0>)
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fc4a 	bl	8000d48 <__aeabi_fmul>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <set_track_xy+0xa4>)
 80014ba:	601a      	str	r2, [r3, #0]
  tilt_tgt = 180.0f * y;
 80014bc:	4909      	ldr	r1, [pc, #36]	@ (80014e4 <set_track_xy+0xa0>)
 80014be:	6838      	ldr	r0, [r7, #0]
 80014c0:	f7ff fc42 	bl	8000d48 <__aeabi_fmul>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <set_track_xy+0xa8>)
 80014ca:	601a      	str	r2, [r3, #0]
  //pan_tgt  = clampf(pan_tgt,  PAN_MIN_DEG,  PAN_MAX_DEG);
  //tilt_tgt = clampf(tilt_tgt, TILT_MIN_DEG, TILT_MAX_DEG);
  last_detect_ms = HAL_GetTick();
 80014cc:	f000 fd5e 	bl	8001f8c <HAL_GetTick>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <set_track_xy+0xac>)
 80014d4:	6013      	str	r3, [r2, #0]
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200002d5 	.word	0x200002d5
 80014e4:	43340000 	.word	0x43340000
 80014e8:	20000004 	.word	0x20000004
 80014ec:	2000000c 	.word	0x2000000c
 80014f0:	200002d8 	.word	0x200002d8

080014f4 <handle_line>:

/* 한 줄 명령: "N" / "C 5" / "T 0.45 0.62" */
static void handle_line(char *line)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  char *cmd = strtok(line, " \t\r\n");
 80014fc:	4929      	ldr	r1, [pc, #164]	@ (80015a4 <handle_line+0xb0>)
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f004 f9de 	bl	80058c0 <strtok>
 8001504:	6178      	str	r0, [r7, #20]
  if (!cmd) return;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d047      	beq.n	800159c <handle_line+0xa8>

  if (strcmp(cmd, "N") == 0) {
 800150c:	4926      	ldr	r1, [pc, #152]	@ (80015a8 <handle_line+0xb4>)
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7fe fe1e 	bl	8000150 <strcmp>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <handle_line+0x2c>
    apply_default_pose();
 800151a:	f7ff ff37 	bl	800138c <apply_default_pose>
 800151e:	e03e      	b.n	800159e <handle_line+0xaa>
  } else if (strcmp(cmd, "C") == 0) {
 8001520:	4922      	ldr	r1, [pc, #136]	@ (80015ac <handle_line+0xb8>)
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7fe fe14 	bl	8000150 <strcmp>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d110      	bne.n	8001550 <handle_line+0x5c>
    char *sidx = strtok(NULL, " \t\r\n");
 800152e:	491d      	ldr	r1, [pc, #116]	@ (80015a4 <handle_line+0xb0>)
 8001530:	2000      	movs	r0, #0
 8001532:	f004 f9c5 	bl	80058c0 <strtok>
 8001536:	60b8      	str	r0, [r7, #8]
    if (sidx) set_grid_cell((uint8_t)atoi(sidx));
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d02f      	beq.n	800159e <handle_line+0xaa>
 800153e:	68b8      	ldr	r0, [r7, #8]
 8001540:	f003 f9c4 	bl	80048cc <atoi>
 8001544:	4603      	mov	r3, r0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff37 	bl	80013bc <set_grid_cell>
 800154e:	e026      	b.n	800159e <handle_line+0xaa>
  } else if (strcmp(cmd, "T") == 0) {
 8001550:	4917      	ldr	r1, [pc, #92]	@ (80015b0 <handle_line+0xbc>)
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7fe fdfc 	bl	8000150 <strcmp>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d11f      	bne.n	800159e <handle_line+0xaa>
    char *sx = strtok(NULL, " \t\r\n");
 800155e:	4911      	ldr	r1, [pc, #68]	@ (80015a4 <handle_line+0xb0>)
 8001560:	2000      	movs	r0, #0
 8001562:	f004 f9ad 	bl	80058c0 <strtok>
 8001566:	6138      	str	r0, [r7, #16]
    char *sy = strtok(NULL, " \t\r\n");
 8001568:	490e      	ldr	r1, [pc, #56]	@ (80015a4 <handle_line+0xb0>)
 800156a:	2000      	movs	r0, #0
 800156c:	f004 f9a8 	bl	80058c0 <strtok>
 8001570:	60f8      	str	r0, [r7, #12]
    if (sx && sy) set_track_xy(strtof(sx, NULL), strtof(sy, NULL));
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d012      	beq.n	800159e <handle_line+0xaa>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00f      	beq.n	800159e <handle_line+0xaa>
 800157e:	2100      	movs	r1, #0
 8001580:	6938      	ldr	r0, [r7, #16]
 8001582:	f003 ffa1 	bl	80054c8 <strtof>
 8001586:	4604      	mov	r4, r0
 8001588:	2100      	movs	r1, #0
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f003 ff9c 	bl	80054c8 <strtof>
 8001590:	4603      	mov	r3, r0
 8001592:	4619      	mov	r1, r3
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff ff55 	bl	8001444 <set_track_xy>
 800159a:	e000      	b.n	800159e <handle_line+0xaa>
  if (!cmd) return;
 800159c:	bf00      	nop
  }
}
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}
 80015a4:	08007768 	.word	0x08007768
 80015a8:	08007770 	.word	0x08007770
 80015ac:	08007774 	.word	0x08007774
 80015b0:	08007778 	.word	0x08007778

080015b4 <HAL_UART_RxCpltCallback>:

/* UART 인터럽트: '\n' 기준으로 라인 수신 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <HAL_UART_RxCpltCallback+0x84>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d133      	bne.n	800162e <HAL_UART_RxCpltCallback+0x7a>
    uint8_t c = rx_byte;
 80015c6:	4b1d      	ldr	r3, [pc, #116]	@ (800163c <HAL_UART_RxCpltCallback+0x88>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	73fb      	strb	r3, [r7, #15]

    if (c == '\n' || rx_idx >= sizeof(rx_line) - 1) {
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	2b0a      	cmp	r3, #10
 80015d0:	d003      	beq.n	80015da <HAL_UART_RxCpltCallback+0x26>
 80015d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <HAL_UART_RxCpltCallback+0x8c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80015d8:	d917      	bls.n	800160a <HAL_UART_RxCpltCallback+0x56>
      rx_line[rx_idx] = '\0';
 80015da:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <HAL_UART_RxCpltCallback+0x8c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <HAL_UART_RxCpltCallback+0x90>)
 80015e2:	2100      	movs	r1, #0
 80015e4:	5499      	strb	r1, [r3, r2]
      handle_line(rx_line);            // ← 여기서 N/C/T 명령 처리
 80015e6:	4817      	ldr	r0, [pc, #92]	@ (8001644 <HAL_UART_RxCpltCallback+0x90>)
 80015e8:	f7ff ff84 	bl	80014f4 <handle_line>
      rx_idx = 0;
 80015ec:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <HAL_UART_RxCpltCallback+0x8c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]

      // 개행(한 줄 완성) 시에만 OK 에코
      const char ok[] = "OK\r\n";
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <HAL_UART_RxCpltCallback+0x94>)
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	2300      	movs	r3, #0
 80015f8:	733b      	strb	r3, [r7, #12]
      HAL_UART_Transmit(&huart2, (uint8_t*)ok, sizeof(ok)-1, 10);
 80015fa:	f107 0108 	add.w	r1, r7, #8
 80015fe:	230a      	movs	r3, #10
 8001600:	2204      	movs	r2, #4
 8001602:	4812      	ldr	r0, [pc, #72]	@ (800164c <HAL_UART_RxCpltCallback+0x98>)
 8001604:	f002 fab0 	bl	8003b68 <HAL_UART_Transmit>
    if (c == '\n' || rx_idx >= sizeof(rx_line) - 1) {
 8001608:	e00c      	b.n	8001624 <HAL_UART_RxCpltCallback+0x70>
    } else if (c != '\r') {
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	2b0d      	cmp	r3, #13
 800160e:	d009      	beq.n	8001624 <HAL_UART_RxCpltCallback+0x70>
      rx_line[rx_idx++] = (char)c;
 8001610:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <HAL_UART_RxCpltCallback+0x8c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	b2d1      	uxtb	r1, r2
 8001618:	4a09      	ldr	r2, [pc, #36]	@ (8001640 <HAL_UART_RxCpltCallback+0x8c>)
 800161a:	7011      	strb	r1, [r2, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	4a09      	ldr	r2, [pc, #36]	@ (8001644 <HAL_UART_RxCpltCallback+0x90>)
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	5453      	strb	r3, [r2, r1]
    }

    HAL_UART_Receive_IT(&huart2, &rx_byte, 1); // 다음 글자 수신 재개
 8001624:	2201      	movs	r2, #1
 8001626:	4905      	ldr	r1, [pc, #20]	@ (800163c <HAL_UART_RxCpltCallback+0x88>)
 8001628:	4808      	ldr	r0, [pc, #32]	@ (800164c <HAL_UART_RxCpltCallback+0x98>)
 800162a:	f002 fbbf 	bl	8003dac <HAL_UART_Receive_IT>
  }
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40004400 	.word	0x40004400
 800163c:	20000290 	.word	0x20000290
 8001640:	200002d4 	.word	0x200002d4
 8001644:	20000294 	.word	0x20000294
 8001648:	0a0d4b4f 	.word	0x0a0d4b4f
 800164c:	20000248 	.word	0x20000248

08001650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001656:	f000 fc41 	bl	8001edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165a:	f000 f8f7 	bl	800184c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165e:	f000 f9e5 	bl	8001a2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001662:	f000 f9b9 	bl	80019d8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001666:	f000 f933 	bl	80018d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* PWM 시작 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); /* servo1: Pan */
 800166a:	2100      	movs	r1, #0
 800166c:	4869      	ldr	r0, [pc, #420]	@ (8001814 <main+0x1c4>)
 800166e:	f001 fcf1 	bl	8003054 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); /* servo2: Tilt */
 8001672:	2104      	movs	r1, #4
 8001674:	4867      	ldr	r0, [pc, #412]	@ (8001814 <main+0x1c4>)
 8001676:	f001 fced 	bl	8003054 <HAL_TIM_PWM_Start>
  // ===== Servo self-test (임시) =====
  servo1_set_deg(90);  servo2_set_deg(90);  HAL_Delay(800);
 800167a:	205a      	movs	r0, #90	@ 0x5a
 800167c:	f7ff fe0a 	bl	8001294 <servo1_set_deg>
 8001680:	205a      	movs	r0, #90	@ 0x5a
 8001682:	f7ff fe1f 	bl	80012c4 <servo2_set_deg>
 8001686:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800168a:	f000 fc89 	bl	8001fa0 <HAL_Delay>
  servo1_set_deg(60);  servo2_set_deg(60);  HAL_Delay(800);
 800168e:	203c      	movs	r0, #60	@ 0x3c
 8001690:	f7ff fe00 	bl	8001294 <servo1_set_deg>
 8001694:	203c      	movs	r0, #60	@ 0x3c
 8001696:	f7ff fe15 	bl	80012c4 <servo2_set_deg>
 800169a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800169e:	f000 fc7f 	bl	8001fa0 <HAL_Delay>
  servo1_set_deg(120); servo2_set_deg(120); HAL_Delay(800);
 80016a2:	2078      	movs	r0, #120	@ 0x78
 80016a4:	f7ff fdf6 	bl	8001294 <servo1_set_deg>
 80016a8:	2078      	movs	r0, #120	@ 0x78
 80016aa:	f7ff fe0b 	bl	80012c4 <servo2_set_deg>
 80016ae:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80016b2:	f000 fc75 	bl	8001fa0 <HAL_Delay>
  // ===== end self-test =====

  /* 기본 자세 적용 */
  servo1_set_deg(PAN_DEFAULT_DEG);
 80016b6:	205a      	movs	r0, #90	@ 0x5a
 80016b8:	f7ff fdec 	bl	8001294 <servo1_set_deg>
  servo2_set_deg(TILT_DEFAULT_DEG);
 80016bc:	205a      	movs	r0, #90	@ 0x5a
 80016be:	f7ff fe01 	bl	80012c4 <servo2_set_deg>

  /* UART 라인 수신 시작 */
  const char *hello = "READY\r\n";
 80016c2:	4b55      	ldr	r3, [pc, #340]	@ (8001818 <main+0x1c8>)
 80016c4:	613b      	str	r3, [r7, #16]
  HAL_UART_Transmit(&huart2, (uint8_t*)hello, strlen(hello), 100);
 80016c6:	6938      	ldr	r0, [r7, #16]
 80016c8:	f7fe fd4c 	bl	8000164 <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	2364      	movs	r3, #100	@ 0x64
 80016d2:	6939      	ldr	r1, [r7, #16]
 80016d4:	4851      	ldr	r0, [pc, #324]	@ (800181c <main+0x1cc>)
 80016d6:	f002 fa47 	bl	8003b68 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80016da:	2201      	movs	r2, #1
 80016dc:	4950      	ldr	r1, [pc, #320]	@ (8001820 <main+0x1d0>)
 80016de:	484f      	ldr	r0, [pc, #316]	@ (800181c <main+0x1cc>)
 80016e0:	f002 fb64 	bl	8003dac <HAL_UART_Receive_IT>

  uint32_t t_prev = HAL_GetTick();
 80016e4:	f000 fc52 	bl	8001f8c <HAL_GetTick>
 80016e8:	6178      	str	r0, [r7, #20]
  last_detect_ms = HAL_GetTick();
 80016ea:	f000 fc4f 	bl	8001f8c <HAL_GetTick>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001824 <main+0x1d4>)
 80016f2:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* 20 ms 주기로 스무딩 적용 */
    uint32_t now = HAL_GetTick();
 80016f4:	f000 fc4a 	bl	8001f8c <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]
    if (now - t_prev >= CONTROL_PERIOD_MS) {
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b13      	cmp	r3, #19
 8001702:	d97c      	bls.n	80017fe <main+0x1ae>
      t_prev = now;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	617b      	str	r3, [r7, #20]

      /* 추적 신호 타임아웃 → 기본 자세 */
      if (mode == MODE_TRACK && (now - last_detect_ms) > DETECT_TIMEOUT_MS) {
 8001708:	4b47      	ldr	r3, [pc, #284]	@ (8001828 <main+0x1d8>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d108      	bne.n	8001722 <main+0xd2>
 8001710:	4b44      	ldr	r3, [pc, #272]	@ (8001824 <main+0x1d4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800171c:	d901      	bls.n	8001722 <main+0xd2>
        apply_default_pose();
 800171e:	f7ff fe35 	bl	800138c <apply_default_pose>
      }

      /* 각도 범위 제한 & 스무딩 이동 */
      pan_tgt  = clamp_deg_int((int)lroundf(pan_tgt));
 8001722:	4b42      	ldr	r3, [pc, #264]	@ (800182c <main+0x1dc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f005 ffe6 	bl	80076f8 <lroundf>
 800172c:	4603      	mov	r3, r0
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fd42 	bl	80011b8 <clamp_deg_int>
 8001734:	4603      	mov	r3, r0
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff faae 	bl	8000c98 <__aeabi_ui2f>
 800173c:	4603      	mov	r3, r0
 800173e:	4a3b      	ldr	r2, [pc, #236]	@ (800182c <main+0x1dc>)
 8001740:	6013      	str	r3, [r2, #0]
      tilt_tgt = clamp_deg_int((int)lroundf(tilt_tgt));
 8001742:	4b3b      	ldr	r3, [pc, #236]	@ (8001830 <main+0x1e0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f005 ffd6 	bl	80076f8 <lroundf>
 800174c:	4603      	mov	r3, r0
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fd32 	bl	80011b8 <clamp_deg_int>
 8001754:	4603      	mov	r3, r0
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fa9e 	bl	8000c98 <__aeabi_ui2f>
 800175c:	4603      	mov	r3, r0
 800175e:	4a34      	ldr	r2, [pc, #208]	@ (8001830 <main+0x1e0>)
 8001760:	6013      	str	r3, [r2, #0]
      move_toward(&pan_cur,  pan_tgt,  STEP_DEG);
 8001762:	4b32      	ldr	r3, [pc, #200]	@ (800182c <main+0x1dc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a33      	ldr	r2, [pc, #204]	@ (8001834 <main+0x1e4>)
 8001768:	4619      	mov	r1, r3
 800176a:	4833      	ldr	r0, [pc, #204]	@ (8001838 <main+0x1e8>)
 800176c:	f7ff fdc2 	bl	80012f4 <move_toward>
      move_toward(&tilt_cur, tilt_tgt, STEP_DEG);
 8001770:	4b2f      	ldr	r3, [pc, #188]	@ (8001830 <main+0x1e0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2f      	ldr	r2, [pc, #188]	@ (8001834 <main+0x1e4>)
 8001776:	4619      	mov	r1, r3
 8001778:	4830      	ldr	r0, [pc, #192]	@ (800183c <main+0x1ec>)
 800177a:	f7ff fdbb 	bl	80012f4 <move_toward>
      //float step_now = (boost_ticks > 0) ? 6.0f : STEP_DEG;
      //move_toward(&pan_cur,  pan_tgt,  step_now);
      //move_toward(&tilt_cur, tilt_tgt, step_now);
      //if (boost_ticks > 0) boost_ticks--;

      servo1_set_deg((uint8_t)lroundf(pan_cur));
 800177e:	4b2e      	ldr	r3, [pc, #184]	@ (8001838 <main+0x1e8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f005 ffb8 	bl	80076f8 <lroundf>
 8001788:	4603      	mov	r3, r0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fd81 	bl	8001294 <servo1_set_deg>
      servo2_set_deg((uint8_t)lroundf(tilt_cur));
 8001792:	4b2a      	ldr	r3, [pc, #168]	@ (800183c <main+0x1ec>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f005 ffae 	bl	80076f8 <lroundf>
 800179c:	4603      	mov	r3, r0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fd8f 	bl	80012c4 <servo2_set_deg>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // UART polling fallback (non-blocking)
    static char pline[64]; static uint8_t pidx=0; uint8_t ch;
    while (HAL_UART_Receive(&huart2, &ch, 1, 0) == HAL_OK) {
 80017a6:	e02a      	b.n	80017fe <main+0x1ae>
      if (ch == '\n' || pidx >= sizeof(pline)-1) {
 80017a8:	7afb      	ldrb	r3, [r7, #11]
 80017aa:	2b0a      	cmp	r3, #10
 80017ac:	d003      	beq.n	80017b6 <main+0x166>
 80017ae:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <main+0x1f0>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80017b4:	d916      	bls.n	80017e4 <main+0x194>
        pline[pidx] = '\0'; handle_line(pline); pidx = 0;
 80017b6:	4b22      	ldr	r3, [pc, #136]	@ (8001840 <main+0x1f0>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <main+0x1f4>)
 80017be:	2100      	movs	r1, #0
 80017c0:	5499      	strb	r1, [r3, r2]
 80017c2:	4820      	ldr	r0, [pc, #128]	@ (8001844 <main+0x1f4>)
 80017c4:	f7ff fe96 	bl	80014f4 <handle_line>
 80017c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <main+0x1f0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
        const char ok[]="OK\r\n"; HAL_UART_Transmit(&huart2,(uint8_t*)ok,sizeof(ok)-1,10);
 80017ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <main+0x1f8>)
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	2300      	movs	r3, #0
 80017d4:	723b      	strb	r3, [r7, #8]
 80017d6:	1d39      	adds	r1, r7, #4
 80017d8:	230a      	movs	r3, #10
 80017da:	2204      	movs	r2, #4
 80017dc:	480f      	ldr	r0, [pc, #60]	@ (800181c <main+0x1cc>)
 80017de:	f002 f9c3 	bl	8003b68 <HAL_UART_Transmit>
      if (ch == '\n' || pidx >= sizeof(pline)-1) {
 80017e2:	e00c      	b.n	80017fe <main+0x1ae>
      } else if (ch != '\r') pline[pidx++] = (char)ch;
 80017e4:	7afb      	ldrb	r3, [r7, #11]
 80017e6:	2b0d      	cmp	r3, #13
 80017e8:	d009      	beq.n	80017fe <main+0x1ae>
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <main+0x1f0>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	b2d1      	uxtb	r1, r2
 80017f2:	4a13      	ldr	r2, [pc, #76]	@ (8001840 <main+0x1f0>)
 80017f4:	7011      	strb	r1, [r2, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	7af9      	ldrb	r1, [r7, #11]
 80017fa:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <main+0x1f4>)
 80017fc:	5499      	strb	r1, [r3, r2]
    while (HAL_UART_Receive(&huart2, &ch, 1, 0) == HAL_OK) {
 80017fe:	f107 010b 	add.w	r1, r7, #11
 8001802:	2300      	movs	r3, #0
 8001804:	2201      	movs	r2, #1
 8001806:	4805      	ldr	r0, [pc, #20]	@ (800181c <main+0x1cc>)
 8001808:	f002 fa39 	bl	8003c7e <HAL_UART_Receive>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0ca      	beq.n	80017a8 <main+0x158>
  {
 8001812:	e76f      	b.n	80016f4 <main+0xa4>
 8001814:	20000200 	.word	0x20000200
 8001818:	0800777c 	.word	0x0800777c
 800181c:	20000248 	.word	0x20000248
 8001820:	20000290 	.word	0x20000290
 8001824:	200002d8 	.word	0x200002d8
 8001828:	200002d5 	.word	0x200002d5
 800182c:	20000004 	.word	0x20000004
 8001830:	2000000c 	.word	0x2000000c
 8001834:	40400000 	.word	0x40400000
 8001838:	20000000 	.word	0x20000000
 800183c:	20000008 	.word	0x20000008
 8001840:	200002dc 	.word	0x200002dc
 8001844:	200002e0 	.word	0x200002e0
 8001848:	0a0d4b4f 	.word	0x0a0d4b4f

0800184c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b090      	sub	sp, #64	@ 0x40
 8001850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	2228      	movs	r2, #40	@ 0x28
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f004 f815 	bl	800588a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001872:	2301      	movs	r3, #1
 8001874:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001876:	2310      	movs	r3, #16
 8001878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187a:	2302      	movs	r3, #2
 800187c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800187e:	2300      	movs	r3, #0
 8001880:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001882:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001888:	f107 0318 	add.w	r3, r7, #24
 800188c:	4618      	mov	r0, r3
 800188e:	f000 ff29 	bl	80026e4 <HAL_RCC_OscConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001898:	f000 f92a 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189c:	230f      	movs	r3, #15
 800189e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a0:	2302      	movs	r3, #2
 80018a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2102      	movs	r1, #2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 f996 	bl	8002be8 <HAL_RCC_ClockConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80018c2:	f000 f915 	bl	8001af0 <Error_Handler>
  }
}
 80018c6:	bf00      	nop
 80018c8:	3740      	adds	r7, #64	@ 0x40
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	@ 0x38
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001900:	4b34      	ldr	r3, [pc, #208]	@ (80019d4 <MX_TIM2_Init+0x104>)
 8001902:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001906:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001908:	4b32      	ldr	r3, [pc, #200]	@ (80019d4 <MX_TIM2_Init+0x104>)
 800190a:	223f      	movs	r2, #63	@ 0x3f
 800190c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b31      	ldr	r3, [pc, #196]	@ (80019d4 <MX_TIM2_Init+0x104>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001914:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <MX_TIM2_Init+0x104>)
 8001916:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800191a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191c:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <MX_TIM2_Init+0x104>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001922:	4b2c      	ldr	r3, [pc, #176]	@ (80019d4 <MX_TIM2_Init+0x104>)
 8001924:	2280      	movs	r2, #128	@ 0x80
 8001926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001928:	482a      	ldr	r0, [pc, #168]	@ (80019d4 <MX_TIM2_Init+0x104>)
 800192a:	f001 faeb 	bl	8002f04 <HAL_TIM_Base_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001934:	f000 f8dc 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800193e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001942:	4619      	mov	r1, r3
 8001944:	4823      	ldr	r0, [pc, #140]	@ (80019d4 <MX_TIM2_Init+0x104>)
 8001946:	f001 fce9 	bl	800331c <HAL_TIM_ConfigClockSource>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001950:	f000 f8ce 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001954:	481f      	ldr	r0, [pc, #124]	@ (80019d4 <MX_TIM2_Init+0x104>)
 8001956:	f001 fb24 	bl	8002fa2 <HAL_TIM_PWM_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001960:	f000 f8c6 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	4619      	mov	r1, r3
 8001972:	4818      	ldr	r0, [pc, #96]	@ (80019d4 <MX_TIM2_Init+0x104>)
 8001974:	f002 f84a 	bl	8003a0c <HAL_TIMEx_MasterConfigSynchronization>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800197e:	f000 f8b7 	bl	8001af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001982:	2360      	movs	r3, #96	@ 0x60
 8001984:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001986:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800198a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	4619      	mov	r1, r3
 800199a:	480e      	ldr	r0, [pc, #56]	@ (80019d4 <MX_TIM2_Init+0x104>)
 800199c:	f001 fbfc 	bl	8003198 <HAL_TIM_PWM_ConfigChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019a6:	f000 f8a3 	bl	8001af0 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 80019aa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80019ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2204      	movs	r2, #4
 80019b4:	4619      	mov	r1, r3
 80019b6:	4807      	ldr	r0, [pc, #28]	@ (80019d4 <MX_TIM2_Init+0x104>)
 80019b8:	f001 fbee 	bl	8003198 <HAL_TIM_PWM_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 80019c2:	f000 f895 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019c6:	4803      	ldr	r0, [pc, #12]	@ (80019d4 <MX_TIM2_Init+0x104>)
 80019c8:	f000 f8e6 	bl	8001b98 <HAL_TIM_MspPostInit>

}
 80019cc:	bf00      	nop
 80019ce:	3738      	adds	r7, #56	@ 0x38
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000200 	.word	0x20000200

080019d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019dc:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019de:	4a12      	ldr	r2, [pc, #72]	@ (8001a28 <MX_USART2_UART_Init+0x50>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019e2:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	@ (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a10:	f002 f85a 	bl	8003ac8 <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a1a:	f000 f869 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000248 	.word	0x20000248
 8001a28:	40004400 	.word	0x40004400

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 0310 	add.w	r3, r7, #16
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a40:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a26      	ldr	r2, [pc, #152]	@ (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a46:	f043 0310 	orr.w	r3, r3, #16
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a58:	4b21      	ldr	r3, [pc, #132]	@ (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a20      	ldr	r2, [pc, #128]	@ (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <MX_GPIO_Init+0xb4>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2120      	movs	r1, #32
 8001a8c:	4815      	ldr	r0, [pc, #84]	@ (8001ae4 <MX_GPIO_Init+0xb8>)
 8001a8e:	f000 fdef 	bl	8002670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <MX_GPIO_Init+0xbc>)
 8001a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4811      	ldr	r0, [pc, #68]	@ (8001aec <MX_GPIO_Init+0xc0>)
 8001aa8:	f000 fc5e 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001aac:	2320      	movs	r3, #32
 8001aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4808      	ldr	r0, [pc, #32]	@ (8001ae4 <MX_GPIO_Init+0xb8>)
 8001ac4:	f000 fc50 	bl	8002368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	2028      	movs	r0, #40	@ 0x28
 8001ace:	f000 fb62 	bl	8002196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ad2:	2028      	movs	r0, #40	@ 0x28
 8001ad4:	f000 fb7b 	bl	80021ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ad8:	bf00      	nop
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010800 	.word	0x40010800
 8001ae8:	10110000 	.word	0x10110000
 8001aec:	40011000 	.word	0x40011000

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <Error_Handler+0x8>

08001afc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HAL_MspInit+0x5c>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	4a14      	ldr	r2, [pc, #80]	@ (8001b58 <HAL_MspInit+0x5c>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6193      	str	r3, [r2, #24]
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_MspInit+0x5c>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <HAL_MspInit+0x5c>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b58 <HAL_MspInit+0x5c>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	61d3      	str	r3, [r2, #28]
 8001b26:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <HAL_MspInit+0x5c>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b32:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <HAL_MspInit+0x60>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	4a04      	ldr	r2, [pc, #16]	@ (8001b5c <HAL_MspInit+0x60>)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40010000 	.word	0x40010000

08001b60 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b70:	d10b      	bne.n	8001b8a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b72:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <HAL_TIM_Base_MspInit+0x34>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a07      	ldr	r2, [pc, #28]	@ (8001b94 <HAL_TIM_Base_MspInit+0x34>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	61d3      	str	r3, [r2, #28]
 8001b7e:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <HAL_TIM_Base_MspInit+0x34>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	40021000 	.word	0x40021000

08001b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb6:	d117      	bne.n	8001be8 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <HAL_TIM_MspPostInit+0x58>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf0 <HAL_TIM_MspPostInit+0x58>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <HAL_TIM_MspPostInit+0x58>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = servo1_Pin|servo2_Pin;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	4619      	mov	r1, r3
 8001be2:	4804      	ldr	r0, [pc, #16]	@ (8001bf4 <HAL_TIM_MspPostInit+0x5c>)
 8001be4:	f000 fbc0 	bl	8002368 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001be8:	bf00      	nop
 8001bea:	3720      	adds	r7, #32
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010800 	.word	0x40010800

08001bf8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a19      	ldr	r2, [pc, #100]	@ (8001c78 <HAL_UART_MspInit+0x80>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d12b      	bne.n	8001c70 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c18:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <HAL_UART_MspInit+0x84>)
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <HAL_UART_MspInit+0x84>)
 8001c1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c22:	61d3      	str	r3, [r2, #28]
 8001c24:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <HAL_UART_MspInit+0x84>)
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_UART_MspInit+0x84>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a11      	ldr	r2, [pc, #68]	@ (8001c7c <HAL_UART_MspInit+0x84>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <HAL_UART_MspInit+0x84>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c48:	230c      	movs	r3, #12
 8001c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4809      	ldr	r0, [pc, #36]	@ (8001c80 <HAL_UART_MspInit+0x88>)
 8001c5c:	f000 fb84 	bl	8002368 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	2026      	movs	r0, #38	@ 0x26
 8001c66:	f000 fa96 	bl	8002196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c6a:	2026      	movs	r0, #38	@ 0x26
 8001c6c:	f000 faaf 	bl	80021ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c70:	bf00      	nop
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40004400 	.word	0x40004400
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40010800 	.word	0x40010800

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <NMI_Handler+0x4>

08001c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <HardFault_Handler+0x4>

08001c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <MemManage_Handler+0x4>

08001c9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd4:	f000 f948 	bl	8001f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ce0:	4802      	ldr	r0, [pc, #8]	@ (8001cec <USART2_IRQHandler+0x10>)
 8001ce2:	f002 f889 	bl	8003df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000248 	.word	0x20000248

08001cf0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001cf4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001cf8:	f000 fcd2 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return 1;
 8001d04:	2301      	movs	r3, #1
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr

08001d0e <_kill>:

int _kill(int pid, int sig)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d18:	f003 fe74 	bl	8005a04 <__errno>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2216      	movs	r2, #22
 8001d20:	601a      	str	r2, [r3, #0]
  return -1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_exit>:

void _exit (int status)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d36:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffe7 	bl	8001d0e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <_exit+0x12>

08001d44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	e00a      	b.n	8001d6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d56:	f3af 8000 	nop.w
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	60ba      	str	r2, [r7, #8]
 8001d62:	b2ca      	uxtb	r2, r1
 8001d64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dbf0      	blt.n	8001d56 <_read+0x12>
  }

  return len;
 8001d74:	687b      	ldr	r3, [r7, #4]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	e009      	b.n	8001da4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	60ba      	str	r2, [r7, #8]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	dbf1      	blt.n	8001d90 <_write+0x12>
  }
  return len;
 8001dac:	687b      	ldr	r3, [r7, #4]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <_close>:

int _close(int file)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ddc:	605a      	str	r2, [r3, #4]
  return 0;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <_isatty>:

int _isatty(int file)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
	...

08001e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e20:	4a14      	ldr	r2, [pc, #80]	@ (8001e74 <_sbrk+0x5c>)
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <_sbrk+0x60>)
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <_sbrk+0x64>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	@ (8001e80 <_sbrk+0x68>)
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d207      	bcs.n	8001e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e48:	f003 fddc 	bl	8005a04 <__errno>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	220c      	movs	r2, #12
 8001e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e009      	b.n	8001e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e58:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a05      	ldr	r2, [pc, #20]	@ (8001e7c <_sbrk+0x64>)
 8001e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20005000 	.word	0x20005000
 8001e78:	00000400 	.word	0x00000400
 8001e7c:	20000320 	.word	0x20000320
 8001e80:	20000478 	.word	0x20000478

08001e84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e90:	f7ff fff8 	bl	8001e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e94:	480b      	ldr	r0, [pc, #44]	@ (8001ec4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e96:	490c      	ldr	r1, [pc, #48]	@ (8001ec8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e98:	4a0c      	ldr	r2, [pc, #48]	@ (8001ecc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ed0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001eac:	4c09      	ldr	r4, [pc, #36]	@ (8001ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eba:	f003 fda9 	bl	8005a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ebe:	f7ff fbc7 	bl	8001650 <main>
  bx lr
 8001ec2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ecc:	08007bd8 	.word	0x08007bd8
  ldr r2, =_sbss
 8001ed0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001ed4:	20000474 	.word	0x20000474

08001ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC1_2_IRQHandler>
	...

08001edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee0:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_Init+0x28>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <HAL_Init+0x28>)
 8001ee6:	f043 0310 	orr.w	r3, r3, #16
 8001eea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f000 f947 	bl	8002180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f000 f808 	bl	8001f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef8:	f7ff fe00 	bl	8001afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40022000 	.word	0x40022000

08001f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f10:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <HAL_InitTick+0x54>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <HAL_InitTick+0x58>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f95f 	bl	80021ea <HAL_SYSTICK_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00e      	b.n	8001f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b0f      	cmp	r3, #15
 8001f3a:	d80a      	bhi.n	8001f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f000 f927 	bl	8002196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f48:	4a06      	ldr	r2, [pc, #24]	@ (8001f64 <HAL_InitTick+0x5c>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000010 	.word	0x20000010
 8001f60:	20000018 	.word	0x20000018
 8001f64:	20000014 	.word	0x20000014

08001f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_IncTick+0x1c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <HAL_IncTick+0x20>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a03      	ldr	r2, [pc, #12]	@ (8001f88 <HAL_IncTick+0x20>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	20000018 	.word	0x20000018
 8001f88:	20000324 	.word	0x20000324

08001f8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b02      	ldr	r3, [pc, #8]	@ (8001f9c <HAL_GetTick+0x10>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	20000324 	.word	0x20000324

08001fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff fff0 	bl	8001f8c <HAL_GetTick>
 8001fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d005      	beq.n	8001fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_Delay+0x44>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc6:	bf00      	nop
 8001fc8:	f7ff ffe0 	bl	8001f8c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f7      	bhi.n	8001fc8 <HAL_Delay+0x28>
  {
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000018 	.word	0x20000018

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	@ (800202c <__NVIC_SetPriorityGrouping+0x44>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db0b      	blt.n	8002076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4906      	ldr	r1, [pc, #24]	@ (8002080 <__NVIC_EnableIRQ+0x34>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	@ (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	@ (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	@ 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	@ 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800214c:	d301      	bcc.n	8002152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800214e:	2301      	movs	r3, #1
 8002150:	e00f      	b.n	8002172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002152:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <SysTick_Config+0x40>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215a:	210f      	movs	r1, #15
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	f7ff ff90 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002164:	4b05      	ldr	r3, [pc, #20]	@ (800217c <SysTick_Config+0x40>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216a:	4b04      	ldr	r3, [pc, #16]	@ (800217c <SysTick_Config+0x40>)
 800216c:	2207      	movs	r2, #7
 800216e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	e000e010 	.word	0xe000e010

08002180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ff2d 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a8:	f7ff ff42 	bl	8002030 <__NVIC_GetPriorityGrouping>
 80021ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	6978      	ldr	r0, [r7, #20]
 80021b4:	f7ff ff90 	bl	80020d8 <NVIC_EncodePriority>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff5f 	bl	8002084 <__NVIC_SetPriority>
}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff35 	bl	800204c <__NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffa2 	bl	800213c <SysTick_Config>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002202:	b480      	push	{r7}
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d008      	beq.n	800222c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2204      	movs	r2, #4
 800221e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e020      	b.n	800226e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 020e 	bic.w	r2, r2, #14
 800223a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f202 	lsl.w	r2, r1, r2
 800225a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800226c:	7bfb      	ldrb	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d005      	beq.n	800229c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2204      	movs	r2, #4
 8002294:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	e051      	b.n	8002340 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 020e 	bic.w	r2, r2, #14
 80022aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a22      	ldr	r2, [pc, #136]	@ (800234c <HAL_DMA_Abort_IT+0xd4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d029      	beq.n	800231a <HAL_DMA_Abort_IT+0xa2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a21      	ldr	r2, [pc, #132]	@ (8002350 <HAL_DMA_Abort_IT+0xd8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <HAL_DMA_Abort_IT+0x9e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002354 <HAL_DMA_Abort_IT+0xdc>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01a      	beq.n	8002310 <HAL_DMA_Abort_IT+0x98>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1e      	ldr	r2, [pc, #120]	@ (8002358 <HAL_DMA_Abort_IT+0xe0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d012      	beq.n	800230a <HAL_DMA_Abort_IT+0x92>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1c      	ldr	r2, [pc, #112]	@ (800235c <HAL_DMA_Abort_IT+0xe4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00a      	beq.n	8002304 <HAL_DMA_Abort_IT+0x8c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002360 <HAL_DMA_Abort_IT+0xe8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d102      	bne.n	80022fe <HAL_DMA_Abort_IT+0x86>
 80022f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80022fc:	e00e      	b.n	800231c <HAL_DMA_Abort_IT+0xa4>
 80022fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002302:	e00b      	b.n	800231c <HAL_DMA_Abort_IT+0xa4>
 8002304:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002308:	e008      	b.n	800231c <HAL_DMA_Abort_IT+0xa4>
 800230a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800230e:	e005      	b.n	800231c <HAL_DMA_Abort_IT+0xa4>
 8002310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002314:	e002      	b.n	800231c <HAL_DMA_Abort_IT+0xa4>
 8002316:	2310      	movs	r3, #16
 8002318:	e000      	b.n	800231c <HAL_DMA_Abort_IT+0xa4>
 800231a:	2301      	movs	r3, #1
 800231c:	4a11      	ldr	r2, [pc, #68]	@ (8002364 <HAL_DMA_Abort_IT+0xec>)
 800231e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
    } 
  }
  return status;
 8002340:	7bfb      	ldrb	r3, [r7, #15]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40020008 	.word	0x40020008
 8002350:	4002001c 	.word	0x4002001c
 8002354:	40020030 	.word	0x40020030
 8002358:	40020044 	.word	0x40020044
 800235c:	40020058 	.word	0x40020058
 8002360:	4002006c 	.word	0x4002006c
 8002364:	40020000 	.word	0x40020000

08002368 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002368:	b480      	push	{r7}
 800236a:	b08b      	sub	sp, #44	@ 0x2c
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237a:	e169      	b.n	8002650 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800237c:	2201      	movs	r2, #1
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69fa      	ldr	r2, [r7, #28]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	429a      	cmp	r2, r3
 8002396:	f040 8158 	bne.w	800264a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4a9a      	ldr	r2, [pc, #616]	@ (8002608 <HAL_GPIO_Init+0x2a0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d05e      	beq.n	8002462 <HAL_GPIO_Init+0xfa>
 80023a4:	4a98      	ldr	r2, [pc, #608]	@ (8002608 <HAL_GPIO_Init+0x2a0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d875      	bhi.n	8002496 <HAL_GPIO_Init+0x12e>
 80023aa:	4a98      	ldr	r2, [pc, #608]	@ (800260c <HAL_GPIO_Init+0x2a4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d058      	beq.n	8002462 <HAL_GPIO_Init+0xfa>
 80023b0:	4a96      	ldr	r2, [pc, #600]	@ (800260c <HAL_GPIO_Init+0x2a4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d86f      	bhi.n	8002496 <HAL_GPIO_Init+0x12e>
 80023b6:	4a96      	ldr	r2, [pc, #600]	@ (8002610 <HAL_GPIO_Init+0x2a8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d052      	beq.n	8002462 <HAL_GPIO_Init+0xfa>
 80023bc:	4a94      	ldr	r2, [pc, #592]	@ (8002610 <HAL_GPIO_Init+0x2a8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d869      	bhi.n	8002496 <HAL_GPIO_Init+0x12e>
 80023c2:	4a94      	ldr	r2, [pc, #592]	@ (8002614 <HAL_GPIO_Init+0x2ac>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d04c      	beq.n	8002462 <HAL_GPIO_Init+0xfa>
 80023c8:	4a92      	ldr	r2, [pc, #584]	@ (8002614 <HAL_GPIO_Init+0x2ac>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d863      	bhi.n	8002496 <HAL_GPIO_Init+0x12e>
 80023ce:	4a92      	ldr	r2, [pc, #584]	@ (8002618 <HAL_GPIO_Init+0x2b0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d046      	beq.n	8002462 <HAL_GPIO_Init+0xfa>
 80023d4:	4a90      	ldr	r2, [pc, #576]	@ (8002618 <HAL_GPIO_Init+0x2b0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d85d      	bhi.n	8002496 <HAL_GPIO_Init+0x12e>
 80023da:	2b12      	cmp	r3, #18
 80023dc:	d82a      	bhi.n	8002434 <HAL_GPIO_Init+0xcc>
 80023de:	2b12      	cmp	r3, #18
 80023e0:	d859      	bhi.n	8002496 <HAL_GPIO_Init+0x12e>
 80023e2:	a201      	add	r2, pc, #4	@ (adr r2, 80023e8 <HAL_GPIO_Init+0x80>)
 80023e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e8:	08002463 	.word	0x08002463
 80023ec:	0800243d 	.word	0x0800243d
 80023f0:	0800244f 	.word	0x0800244f
 80023f4:	08002491 	.word	0x08002491
 80023f8:	08002497 	.word	0x08002497
 80023fc:	08002497 	.word	0x08002497
 8002400:	08002497 	.word	0x08002497
 8002404:	08002497 	.word	0x08002497
 8002408:	08002497 	.word	0x08002497
 800240c:	08002497 	.word	0x08002497
 8002410:	08002497 	.word	0x08002497
 8002414:	08002497 	.word	0x08002497
 8002418:	08002497 	.word	0x08002497
 800241c:	08002497 	.word	0x08002497
 8002420:	08002497 	.word	0x08002497
 8002424:	08002497 	.word	0x08002497
 8002428:	08002497 	.word	0x08002497
 800242c:	08002445 	.word	0x08002445
 8002430:	08002459 	.word	0x08002459
 8002434:	4a79      	ldr	r2, [pc, #484]	@ (800261c <HAL_GPIO_Init+0x2b4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800243a:	e02c      	b.n	8002496 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	623b      	str	r3, [r7, #32]
          break;
 8002442:	e029      	b.n	8002498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	3304      	adds	r3, #4
 800244a:	623b      	str	r3, [r7, #32]
          break;
 800244c:	e024      	b.n	8002498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	3308      	adds	r3, #8
 8002454:	623b      	str	r3, [r7, #32]
          break;
 8002456:	e01f      	b.n	8002498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	330c      	adds	r3, #12
 800245e:	623b      	str	r3, [r7, #32]
          break;
 8002460:	e01a      	b.n	8002498 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d102      	bne.n	8002470 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800246a:	2304      	movs	r3, #4
 800246c:	623b      	str	r3, [r7, #32]
          break;
 800246e:	e013      	b.n	8002498 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d105      	bne.n	8002484 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002478:	2308      	movs	r3, #8
 800247a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	611a      	str	r2, [r3, #16]
          break;
 8002482:	e009      	b.n	8002498 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002484:	2308      	movs	r3, #8
 8002486:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	615a      	str	r2, [r3, #20]
          break;
 800248e:	e003      	b.n	8002498 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
          break;
 8002494:	e000      	b.n	8002498 <HAL_GPIO_Init+0x130>
          break;
 8002496:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2bff      	cmp	r3, #255	@ 0xff
 800249c:	d801      	bhi.n	80024a2 <HAL_GPIO_Init+0x13a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	e001      	b.n	80024a6 <HAL_GPIO_Init+0x13e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3304      	adds	r3, #4
 80024a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2bff      	cmp	r3, #255	@ 0xff
 80024ac:	d802      	bhi.n	80024b4 <HAL_GPIO_Init+0x14c>
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	e002      	b.n	80024ba <HAL_GPIO_Init+0x152>
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	3b08      	subs	r3, #8
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	210f      	movs	r1, #15
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	fa01 f303 	lsl.w	r3, r1, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	401a      	ands	r2, r3
 80024cc:	6a39      	ldr	r1, [r7, #32]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	431a      	orrs	r2, r3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80b1 	beq.w	800264a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002620 <HAL_GPIO_Init+0x2b8>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002620 <HAL_GPIO_Init+0x2b8>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6193      	str	r3, [r2, #24]
 80024f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002620 <HAL_GPIO_Init+0x2b8>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002500:	4a48      	ldr	r2, [pc, #288]	@ (8002624 <HAL_GPIO_Init+0x2bc>)
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3302      	adds	r3, #2
 8002508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a40      	ldr	r2, [pc, #256]	@ (8002628 <HAL_GPIO_Init+0x2c0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d013      	beq.n	8002554 <HAL_GPIO_Init+0x1ec>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a3f      	ldr	r2, [pc, #252]	@ (800262c <HAL_GPIO_Init+0x2c4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00d      	beq.n	8002550 <HAL_GPIO_Init+0x1e8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a3e      	ldr	r2, [pc, #248]	@ (8002630 <HAL_GPIO_Init+0x2c8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d007      	beq.n	800254c <HAL_GPIO_Init+0x1e4>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a3d      	ldr	r2, [pc, #244]	@ (8002634 <HAL_GPIO_Init+0x2cc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d101      	bne.n	8002548 <HAL_GPIO_Init+0x1e0>
 8002544:	2303      	movs	r3, #3
 8002546:	e006      	b.n	8002556 <HAL_GPIO_Init+0x1ee>
 8002548:	2304      	movs	r3, #4
 800254a:	e004      	b.n	8002556 <HAL_GPIO_Init+0x1ee>
 800254c:	2302      	movs	r3, #2
 800254e:	e002      	b.n	8002556 <HAL_GPIO_Init+0x1ee>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <HAL_GPIO_Init+0x1ee>
 8002554:	2300      	movs	r3, #0
 8002556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002558:	f002 0203 	and.w	r2, r2, #3
 800255c:	0092      	lsls	r2, r2, #2
 800255e:	4093      	lsls	r3, r2
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002566:	492f      	ldr	r1, [pc, #188]	@ (8002624 <HAL_GPIO_Init+0x2bc>)
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002580:	4b2d      	ldr	r3, [pc, #180]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	492c      	ldr	r1, [pc, #176]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]
 800258c:	e006      	b.n	800259c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800258e:	4b2a      	ldr	r3, [pc, #168]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	43db      	mvns	r3, r3
 8002596:	4928      	ldr	r1, [pc, #160]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 8002598:	4013      	ands	r3, r2
 800259a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025a8:	4b23      	ldr	r3, [pc, #140]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	4922      	ldr	r1, [pc, #136]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60cb      	str	r3, [r1, #12]
 80025b4:	e006      	b.n	80025c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025b6:	4b20      	ldr	r3, [pc, #128]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	43db      	mvns	r3, r3
 80025be:	491e      	ldr	r1, [pc, #120]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d006      	beq.n	80025de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025d0:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	4918      	ldr	r1, [pc, #96]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025de:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	4914      	ldr	r1, [pc, #80]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d021      	beq.n	800263c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	490e      	ldr	r1, [pc, #56]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
 8002604:	e021      	b.n	800264a <HAL_GPIO_Init+0x2e2>
 8002606:	bf00      	nop
 8002608:	10320000 	.word	0x10320000
 800260c:	10310000 	.word	0x10310000
 8002610:	10220000 	.word	0x10220000
 8002614:	10210000 	.word	0x10210000
 8002618:	10120000 	.word	0x10120000
 800261c:	10110000 	.word	0x10110000
 8002620:	40021000 	.word	0x40021000
 8002624:	40010000 	.word	0x40010000
 8002628:	40010800 	.word	0x40010800
 800262c:	40010c00 	.word	0x40010c00
 8002630:	40011000 	.word	0x40011000
 8002634:	40011400 	.word	0x40011400
 8002638:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800263c:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <HAL_GPIO_Init+0x304>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	43db      	mvns	r3, r3
 8002644:	4909      	ldr	r1, [pc, #36]	@ (800266c <HAL_GPIO_Init+0x304>)
 8002646:	4013      	ands	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	3301      	adds	r3, #1
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	f47f ae8e 	bne.w	800237c <HAL_GPIO_Init+0x14>
  }
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	372c      	adds	r7, #44	@ 0x2c
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	40010400 	.word	0x40010400

08002670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]
 800267c:	4613      	mov	r3, r2
 800267e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002680:	787b      	ldrb	r3, [r7, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800268c:	e003      	b.n	8002696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	041a      	lsls	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	611a      	str	r2, [r3, #16]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026aa:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026b6:	4a05      	ldr	r2, [pc, #20]	@ (80026cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f806 	bl	80026d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40010400 	.word	0x40010400

080026d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e272      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8087 	beq.w	8002812 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b04      	cmp	r3, #4
 800270e:	d00c      	beq.n	800272a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002710:	4b8f      	ldr	r3, [pc, #572]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d112      	bne.n	8002742 <HAL_RCC_OscConfig+0x5e>
 800271c:	4b8c      	ldr	r3, [pc, #560]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002728:	d10b      	bne.n	8002742 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272a:	4b89      	ldr	r3, [pc, #548]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d06c      	beq.n	8002810 <HAL_RCC_OscConfig+0x12c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d168      	bne.n	8002810 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e24c      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x76>
 800274c:	4b80      	ldr	r3, [pc, #512]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a7f      	ldr	r2, [pc, #508]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	e02e      	b.n	80027b8 <HAL_RCC_OscConfig+0xd4>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x98>
 8002762:	4b7b      	ldr	r3, [pc, #492]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a7a      	ldr	r2, [pc, #488]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002768:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b78      	ldr	r3, [pc, #480]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a77      	ldr	r2, [pc, #476]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002774:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e01d      	b.n	80027b8 <HAL_RCC_OscConfig+0xd4>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0xbc>
 8002786:	4b72      	ldr	r3, [pc, #456]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a71      	ldr	r2, [pc, #452]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b6f      	ldr	r3, [pc, #444]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6e      	ldr	r2, [pc, #440]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0xd4>
 80027a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b68      	ldr	r3, [pc, #416]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a67      	ldr	r2, [pc, #412]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7ff fbe4 	bl	8001f8c <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c8:	f7ff fbe0 	bl	8001f8c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	@ 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e200      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	4b5d      	ldr	r3, [pc, #372]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0xe4>
 80027e6:	e014      	b.n	8002812 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7ff fbd0 	bl	8001f8c <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7ff fbcc 	bl	8001f8c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e1ec      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002802:	4b53      	ldr	r3, [pc, #332]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x10c>
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d063      	beq.n	80028e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800281e:	4b4c      	ldr	r3, [pc, #304]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800282a:	4b49      	ldr	r3, [pc, #292]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b08      	cmp	r3, #8
 8002834:	d11c      	bne.n	8002870 <HAL_RCC_OscConfig+0x18c>
 8002836:	4b46      	ldr	r3, [pc, #280]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d116      	bne.n	8002870 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	4b43      	ldr	r3, [pc, #268]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <HAL_RCC_OscConfig+0x176>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d001      	beq.n	800285a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e1c0      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285a:	4b3d      	ldr	r3, [pc, #244]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4939      	ldr	r1, [pc, #228]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	e03a      	b.n	80028e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d020      	beq.n	80028ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002878:	4b36      	ldr	r3, [pc, #216]	@ (8002954 <HAL_RCC_OscConfig+0x270>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7ff fb85 	bl	8001f8c <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002886:	f7ff fb81 	bl	8001f8c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e1a1      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002898:	4b2d      	ldr	r3, [pc, #180]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4927      	ldr	r1, [pc, #156]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]
 80028b8:	e015      	b.n	80028e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ba:	4b26      	ldr	r3, [pc, #152]	@ (8002954 <HAL_RCC_OscConfig+0x270>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7ff fb64 	bl	8001f8c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c8:	f7ff fb60 	bl	8001f8c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e180      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028da:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d03a      	beq.n	8002968 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d019      	beq.n	800292e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fa:	4b17      	ldr	r3, [pc, #92]	@ (8002958 <HAL_RCC_OscConfig+0x274>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002900:	f7ff fb44 	bl	8001f8c <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002908:	f7ff fb40 	bl	8001f8c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e160      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291a:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002926:	2001      	movs	r0, #1
 8002928:	f000 face 	bl	8002ec8 <RCC_Delay>
 800292c:	e01c      	b.n	8002968 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292e:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <HAL_RCC_OscConfig+0x274>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002934:	f7ff fb2a 	bl	8001f8c <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293a:	e00f      	b.n	800295c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293c:	f7ff fb26 	bl	8001f8c <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d908      	bls.n	800295c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e146      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	42420000 	.word	0x42420000
 8002958:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295c:	4b92      	ldr	r3, [pc, #584]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e9      	bne.n	800293c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80a6 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297a:	4b8b      	ldr	r3, [pc, #556]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10d      	bne.n	80029a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	4b88      	ldr	r3, [pc, #544]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	4a87      	ldr	r2, [pc, #540]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002990:	61d3      	str	r3, [r2, #28]
 8002992:	4b85      	ldr	r3, [pc, #532]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a2:	4b82      	ldr	r3, [pc, #520]	@ (8002bac <HAL_RCC_OscConfig+0x4c8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d118      	bne.n	80029e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ae:	4b7f      	ldr	r3, [pc, #508]	@ (8002bac <HAL_RCC_OscConfig+0x4c8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a7e      	ldr	r2, [pc, #504]	@ (8002bac <HAL_RCC_OscConfig+0x4c8>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ba:	f7ff fae7 	bl	8001f8c <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c2:	f7ff fae3 	bl	8001f8c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b64      	cmp	r3, #100	@ 0x64
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e103      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	4b75      	ldr	r3, [pc, #468]	@ (8002bac <HAL_RCC_OscConfig+0x4c8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_OscConfig+0x312>
 80029e8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	4a6e      	ldr	r2, [pc, #440]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6213      	str	r3, [r2, #32]
 80029f4:	e02d      	b.n	8002a52 <HAL_RCC_OscConfig+0x36e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x334>
 80029fe:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	4a69      	ldr	r2, [pc, #420]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6213      	str	r3, [r2, #32]
 8002a0a:	4b67      	ldr	r3, [pc, #412]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4a66      	ldr	r2, [pc, #408]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	f023 0304 	bic.w	r3, r3, #4
 8002a14:	6213      	str	r3, [r2, #32]
 8002a16:	e01c      	b.n	8002a52 <HAL_RCC_OscConfig+0x36e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCC_OscConfig+0x356>
 8002a20:	4b61      	ldr	r3, [pc, #388]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4a60      	ldr	r2, [pc, #384]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	6213      	str	r3, [r2, #32]
 8002a2c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	4a5d      	ldr	r2, [pc, #372]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6213      	str	r3, [r2, #32]
 8002a38:	e00b      	b.n	8002a52 <HAL_RCC_OscConfig+0x36e>
 8002a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	f023 0301 	bic.w	r3, r3, #1
 8002a44:	6213      	str	r3, [r2, #32]
 8002a46:	4b58      	ldr	r3, [pc, #352]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	4a57      	ldr	r2, [pc, #348]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	f023 0304 	bic.w	r3, r3, #4
 8002a50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d015      	beq.n	8002a86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5a:	f7ff fa97 	bl	8001f8c <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7ff fa93 	bl	8001f8c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e0b1      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ee      	beq.n	8002a62 <HAL_RCC_OscConfig+0x37e>
 8002a84:	e014      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a86:	f7ff fa81 	bl	8001f8c <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7ff fa7d 	bl	8001f8c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e09b      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa4:	4b40      	ldr	r3, [pc, #256]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ee      	bne.n	8002a8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d105      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4a3b      	ldr	r2, [pc, #236]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8087 	beq.w	8002bda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002acc:	4b36      	ldr	r3, [pc, #216]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d061      	beq.n	8002b9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d146      	bne.n	8002b6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae0:	4b33      	ldr	r3, [pc, #204]	@ (8002bb0 <HAL_RCC_OscConfig+0x4cc>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7ff fa51 	bl	8001f8c <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aee:	f7ff fa4d 	bl	8001f8c <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e06d      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b00:	4b29      	ldr	r3, [pc, #164]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f0      	bne.n	8002aee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b14:	d108      	bne.n	8002b28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b16:	4b24      	ldr	r3, [pc, #144]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	4921      	ldr	r1, [pc, #132]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a19      	ldr	r1, [r3, #32]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	491b      	ldr	r1, [pc, #108]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b40:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <HAL_RCC_OscConfig+0x4cc>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7ff fa21 	bl	8001f8c <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4e:	f7ff fa1d 	bl	8001f8c <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e03d      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b60:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x46a>
 8002b6c:	e035      	b.n	8002bda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6e:	4b10      	ldr	r3, [pc, #64]	@ (8002bb0 <HAL_RCC_OscConfig+0x4cc>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7ff fa0a 	bl	8001f8c <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7ff fa06 	bl	8001f8c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e026      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x498>
 8002b9a:	e01e      	b.n	8002bda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d107      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e019      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <HAL_RCC_OscConfig+0x500>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d106      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d001      	beq.n	8002bda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000

08002be8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0d0      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b6a      	ldr	r3, [pc, #424]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d910      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b67      	ldr	r3, [pc, #412]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 0207 	bic.w	r2, r3, #7
 8002c12:	4965      	ldr	r1, [pc, #404]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b63      	ldr	r3, [pc, #396]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0b8      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d020      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c44:	4b59      	ldr	r3, [pc, #356]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a58      	ldr	r2, [pc, #352]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c5c:	4b53      	ldr	r3, [pc, #332]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4a52      	ldr	r2, [pc, #328]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c68:	4b50      	ldr	r3, [pc, #320]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	494d      	ldr	r1, [pc, #308]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d040      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b47      	ldr	r3, [pc, #284]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d115      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e07f      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca6:	4b41      	ldr	r3, [pc, #260]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e073      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb6:	4b3d      	ldr	r3, [pc, #244]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e06b      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc6:	4b39      	ldr	r3, [pc, #228]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4936      	ldr	r1, [pc, #216]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd8:	f7ff f958 	bl	8001f8c <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7ff f954 	bl	8001f8c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e053      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 020c 	and.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1eb      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d08:	4b27      	ldr	r3, [pc, #156]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d210      	bcs.n	8002d38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b24      	ldr	r3, [pc, #144]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 0207 	bic.w	r2, r3, #7
 8002d1e:	4922      	ldr	r1, [pc, #136]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e032      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d44:	4b19      	ldr	r3, [pc, #100]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4916      	ldr	r1, [pc, #88]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d62:	4b12      	ldr	r3, [pc, #72]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	490e      	ldr	r1, [pc, #56]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d76:	f000 f821 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	490a      	ldr	r1, [pc, #40]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d88:	5ccb      	ldrb	r3, [r1, r3]
 8002d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8e:	4a09      	ldr	r2, [pc, #36]	@ (8002db4 <HAL_RCC_ClockConfig+0x1cc>)
 8002d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d92:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <HAL_RCC_ClockConfig+0x1d0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff f8b6 	bl	8001f08 <HAL_InitTick>

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40022000 	.word	0x40022000
 8002dac:	40021000 	.word	0x40021000
 8002db0:	0800778c 	.word	0x0800778c
 8002db4:	20000010 	.word	0x20000010
 8002db8:	20000014 	.word	0x20000014

08002dbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d002      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0x30>
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d003      	beq.n	8002df2 <HAL_RCC_GetSysClockFreq+0x36>
 8002dea:	e027      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dec:	4b19      	ldr	r3, [pc, #100]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dee:	613b      	str	r3, [r7, #16]
      break;
 8002df0:	e027      	b.n	8002e42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	0c9b      	lsrs	r3, r3, #18
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	4a17      	ldr	r2, [pc, #92]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002dfc:	5cd3      	ldrb	r3, [r2, r3]
 8002dfe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d010      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e0a:	4b11      	ldr	r3, [pc, #68]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	0c5b      	lsrs	r3, r3, #17
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	4a11      	ldr	r2, [pc, #68]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e16:	5cd3      	ldrb	r3, [r2, r3]
 8002e18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e1e:	fb03 f202 	mul.w	r2, r3, r2
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	e004      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e30:	fb02 f303 	mul.w	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	613b      	str	r3, [r7, #16]
      break;
 8002e3a:	e002      	b.n	8002e42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e3c:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e3e:	613b      	str	r3, [r7, #16]
      break;
 8002e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e42:	693b      	ldr	r3, [r7, #16]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	007a1200 	.word	0x007a1200
 8002e58:	080077a4 	.word	0x080077a4
 8002e5c:	080077b4 	.word	0x080077b4
 8002e60:	003d0900 	.word	0x003d0900

08002e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e68:	4b02      	ldr	r3, [pc, #8]	@ (8002e74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	20000010 	.word	0x20000010

08002e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e7c:	f7ff fff2 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4903      	ldr	r1, [pc, #12]	@ (8002e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	0800779c 	.word	0x0800779c

08002ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ea4:	f7ff ffde 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	0adb      	lsrs	r3, r3, #11
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4903      	ldr	r1, [pc, #12]	@ (8002ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	0800779c 	.word	0x0800779c

08002ec8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <RCC_Delay+0x34>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8002f00 <RCC_Delay+0x38>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	0a5b      	lsrs	r3, r3, #9
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ee4:	bf00      	nop
  }
  while (Delay --);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1e5a      	subs	r2, r3, #1
 8002eea:	60fa      	str	r2, [r7, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f9      	bne.n	8002ee4 <RCC_Delay+0x1c>
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	20000010 	.word	0x20000010
 8002f00:	10624dd3 	.word	0x10624dd3

08002f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e041      	b.n	8002f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe fe18 	bl	8001b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f000 fab2 	bl	80034ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e041      	b.n	8003038 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d106      	bne.n	8002fce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f839 	bl	8003040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	f000 fa63 	bl	80034ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
	...

08003054 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <HAL_TIM_PWM_Start+0x24>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e022      	b.n	80030be <HAL_TIM_PWM_Start+0x6a>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b04      	cmp	r3, #4
 800307c:	d109      	bne.n	8003092 <HAL_TIM_PWM_Start+0x3e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b01      	cmp	r3, #1
 8003088:	bf14      	ite	ne
 800308a:	2301      	movne	r3, #1
 800308c:	2300      	moveq	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	e015      	b.n	80030be <HAL_TIM_PWM_Start+0x6a>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d109      	bne.n	80030ac <HAL_TIM_PWM_Start+0x58>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e008      	b.n	80030be <HAL_TIM_PWM_Start+0x6a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e05e      	b.n	8003184 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d104      	bne.n	80030d6 <HAL_TIM_PWM_Start+0x82>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030d4:	e013      	b.n	80030fe <HAL_TIM_PWM_Start+0xaa>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d104      	bne.n	80030e6 <HAL_TIM_PWM_Start+0x92>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030e4:	e00b      	b.n	80030fe <HAL_TIM_PWM_Start+0xaa>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d104      	bne.n	80030f6 <HAL_TIM_PWM_Start+0xa2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030f4:	e003      	b.n	80030fe <HAL_TIM_PWM_Start+0xaa>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2202      	movs	r2, #2
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2201      	movs	r2, #1
 8003104:	6839      	ldr	r1, [r7, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fc5c 	bl	80039c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1e      	ldr	r2, [pc, #120]	@ (800318c <HAL_TIM_PWM_Start+0x138>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d107      	bne.n	8003126 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003124:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a18      	ldr	r2, [pc, #96]	@ (800318c <HAL_TIM_PWM_Start+0x138>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00e      	beq.n	800314e <HAL_TIM_PWM_Start+0xfa>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003138:	d009      	beq.n	800314e <HAL_TIM_PWM_Start+0xfa>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a14      	ldr	r2, [pc, #80]	@ (8003190 <HAL_TIM_PWM_Start+0x13c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_TIM_PWM_Start+0xfa>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a12      	ldr	r2, [pc, #72]	@ (8003194 <HAL_TIM_PWM_Start+0x140>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d111      	bne.n	8003172 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b06      	cmp	r3, #6
 800315e:	d010      	beq.n	8003182 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	e007      	b.n	8003182 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800

08003198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0ae      	b.n	8003314 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	f200 809f 	bhi.w	8003304 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031c6:	a201      	add	r2, pc, #4	@ (adr r2, 80031cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	08003201 	.word	0x08003201
 80031d0:	08003305 	.word	0x08003305
 80031d4:	08003305 	.word	0x08003305
 80031d8:	08003305 	.word	0x08003305
 80031dc:	08003241 	.word	0x08003241
 80031e0:	08003305 	.word	0x08003305
 80031e4:	08003305 	.word	0x08003305
 80031e8:	08003305 	.word	0x08003305
 80031ec:	08003283 	.word	0x08003283
 80031f0:	08003305 	.word	0x08003305
 80031f4:	08003305 	.word	0x08003305
 80031f8:	08003305 	.word	0x08003305
 80031fc:	080032c3 	.word	0x080032c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f9be 	bl	8003588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0208 	orr.w	r2, r2, #8
 800321a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0204 	bic.w	r2, r2, #4
 800322a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6999      	ldr	r1, [r3, #24]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	619a      	str	r2, [r3, #24]
      break;
 800323e:	e064      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fa04 	bl	8003654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800325a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800326a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6999      	ldr	r1, [r3, #24]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	619a      	str	r2, [r3, #24]
      break;
 8003280:	e043      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fa4d 	bl	8003728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0208 	orr.w	r2, r2, #8
 800329c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0204 	bic.w	r2, r2, #4
 80032ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69d9      	ldr	r1, [r3, #28]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	61da      	str	r2, [r3, #28]
      break;
 80032c0:	e023      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fa97 	bl	80037fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69d9      	ldr	r1, [r3, #28]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	021a      	lsls	r2, r3, #8
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	61da      	str	r2, [r3, #28]
      break;
 8003302:	e002      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	75fb      	strb	r3, [r7, #23]
      break;
 8003308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003312:	7dfb      	ldrb	r3, [r7, #23]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_TIM_ConfigClockSource+0x1c>
 8003334:	2302      	movs	r3, #2
 8003336:	e0b4      	b.n	80034a2 <HAL_TIM_ConfigClockSource+0x186>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800335e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003370:	d03e      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0xd4>
 8003372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003376:	f200 8087 	bhi.w	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 800337a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800337e:	f000 8086 	beq.w	800348e <HAL_TIM_ConfigClockSource+0x172>
 8003382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003386:	d87f      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 8003388:	2b70      	cmp	r3, #112	@ 0x70
 800338a:	d01a      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0xa6>
 800338c:	2b70      	cmp	r3, #112	@ 0x70
 800338e:	d87b      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 8003390:	2b60      	cmp	r3, #96	@ 0x60
 8003392:	d050      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x11a>
 8003394:	2b60      	cmp	r3, #96	@ 0x60
 8003396:	d877      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b50      	cmp	r3, #80	@ 0x50
 800339a:	d03c      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0xfa>
 800339c:	2b50      	cmp	r3, #80	@ 0x50
 800339e:	d873      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b40      	cmp	r3, #64	@ 0x40
 80033a2:	d058      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x13a>
 80033a4:	2b40      	cmp	r3, #64	@ 0x40
 80033a6:	d86f      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 80033a8:	2b30      	cmp	r3, #48	@ 0x30
 80033aa:	d064      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x15a>
 80033ac:	2b30      	cmp	r3, #48	@ 0x30
 80033ae:	d86b      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d060      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x15a>
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d867      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d05c      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x15a>
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d05a      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x15a>
 80033c0:	e062      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033d2:	f000 fad8 	bl	8003986 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	609a      	str	r2, [r3, #8]
      break;
 80033ee:	e04f      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003400:	f000 fac1 	bl	8003986 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003412:	609a      	str	r2, [r3, #8]
      break;
 8003414:	e03c      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003422:	461a      	mov	r2, r3
 8003424:	f000 fa38 	bl	8003898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2150      	movs	r1, #80	@ 0x50
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fa8f 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 8003434:	e02c      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003442:	461a      	mov	r2, r3
 8003444:	f000 fa56 	bl	80038f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2160      	movs	r1, #96	@ 0x60
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fa7f 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 8003454:	e01c      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003462:	461a      	mov	r2, r3
 8003464:	f000 fa18 	bl	8003898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2140      	movs	r1, #64	@ 0x40
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fa6f 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 8003474:	e00c      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4619      	mov	r1, r3
 8003480:	4610      	mov	r0, r2
 8003482:	f000 fa66 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 8003486:	e003      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
      break;
 800348c:	e000      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800348e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a2f      	ldr	r2, [pc, #188]	@ (800357c <TIM_Base_SetConfig+0xd0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00b      	beq.n	80034dc <TIM_Base_SetConfig+0x30>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ca:	d007      	beq.n	80034dc <TIM_Base_SetConfig+0x30>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003580 <TIM_Base_SetConfig+0xd4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_Base_SetConfig+0x30>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003584 <TIM_Base_SetConfig+0xd8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d108      	bne.n	80034ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a22      	ldr	r2, [pc, #136]	@ (800357c <TIM_Base_SetConfig+0xd0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00b      	beq.n	800350e <TIM_Base_SetConfig+0x62>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034fc:	d007      	beq.n	800350e <TIM_Base_SetConfig+0x62>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a1f      	ldr	r2, [pc, #124]	@ (8003580 <TIM_Base_SetConfig+0xd4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d003      	beq.n	800350e <TIM_Base_SetConfig+0x62>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a1e      	ldr	r2, [pc, #120]	@ (8003584 <TIM_Base_SetConfig+0xd8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d108      	bne.n	8003520 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a0d      	ldr	r2, [pc, #52]	@ (800357c <TIM_Base_SetConfig+0xd0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d103      	bne.n	8003554 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f023 0201 	bic.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	611a      	str	r2, [r3, #16]
  }
}
 8003572:	bf00      	nop
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40000400 	.word	0x40000400
 8003584:	40000800 	.word	0x40000800

08003588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f023 0201 	bic.w	r2, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f023 0302 	bic.w	r3, r3, #2
 80035d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a1c      	ldr	r2, [pc, #112]	@ (8003650 <TIM_OC1_SetConfig+0xc8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d10c      	bne.n	80035fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0308 	bic.w	r3, r3, #8
 80035ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f023 0304 	bic.w	r3, r3, #4
 80035fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a13      	ldr	r2, [pc, #76]	@ (8003650 <TIM_OC1_SetConfig+0xc8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d111      	bne.n	800362a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800360c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	621a      	str	r2, [r3, #32]
}
 8003644:	bf00      	nop
 8003646:	371c      	adds	r7, #28
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40012c00 	.word	0x40012c00

08003654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f023 0210 	bic.w	r2, r3, #16
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800368a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	021b      	lsls	r3, r3, #8
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f023 0320 	bic.w	r3, r3, #32
 800369e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003724 <TIM_OC2_SetConfig+0xd0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d10d      	bne.n	80036d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a14      	ldr	r2, [pc, #80]	@ (8003724 <TIM_OC2_SetConfig+0xd0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d113      	bne.n	8003700 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40012c00 	.word	0x40012c00

08003728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0303 	bic.w	r3, r3, #3
 800375e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a1d      	ldr	r2, [pc, #116]	@ (80037f8 <TIM_OC3_SetConfig+0xd0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d10d      	bne.n	80037a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800378c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a14      	ldr	r2, [pc, #80]	@ (80037f8 <TIM_OC3_SetConfig+0xd0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d113      	bne.n	80037d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	621a      	str	r2, [r3, #32]
}
 80037ec:	bf00      	nop
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40012c00 	.word	0x40012c00

080037fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800382a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	021b      	lsls	r3, r3, #8
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	031b      	lsls	r3, r3, #12
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a0f      	ldr	r2, [pc, #60]	@ (8003894 <TIM_OC4_SetConfig+0x98>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d109      	bne.n	8003870 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	019b      	lsls	r3, r3, #6
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	40012c00 	.word	0x40012c00

08003898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f023 0201 	bic.w	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f023 030a 	bic.w	r3, r3, #10
 80038d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	f023 0210 	bic.w	r2, r3, #16
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800391e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	031b      	lsls	r3, r3, #12
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003930:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	621a      	str	r2, [r3, #32]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr

08003952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	f043 0307 	orr.w	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	609a      	str	r2, [r3, #8]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003986:	b480      	push	{r7}
 8003988:	b087      	sub	sp, #28
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	021a      	lsls	r2, r3, #8
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	431a      	orrs	r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	609a      	str	r2, [r3, #8]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	2201      	movs	r2, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a1a      	ldr	r2, [r3, #32]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	43db      	mvns	r3, r3
 80039e6:	401a      	ands	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1a      	ldr	r2, [r3, #32]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	fa01 f303 	lsl.w	r3, r1, r3
 80039fc:	431a      	orrs	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	621a      	str	r2, [r3, #32]
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e046      	b.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a16      	ldr	r2, [pc, #88]	@ (8003abc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00e      	beq.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a70:	d009      	beq.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a12      	ldr	r2, [pc, #72]	@ (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d004      	beq.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a10      	ldr	r2, [pc, #64]	@ (8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d10c      	bne.n	8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800

08003ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e042      	b.n	8003b60 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fe f882 	bl	8001bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	@ 0x24
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fe4f 	bl	80047b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	@ 0x28
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d175      	bne.n	8003c74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_UART_Transmit+0x2c>
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e06e      	b.n	8003c76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2221      	movs	r2, #33	@ 0x21
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ba6:	f7fe f9f1 	bl	8001f8c <HAL_GetTick>
 8003baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	88fa      	ldrh	r2, [r7, #6]
 8003bb0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	88fa      	ldrh	r2, [r7, #6]
 8003bb6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc0:	d108      	bne.n	8003bd4 <HAL_UART_Transmit+0x6c>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d104      	bne.n	8003bd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	e003      	b.n	8003bdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bdc:	e02e      	b.n	8003c3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2200      	movs	r2, #0
 8003be6:	2180      	movs	r1, #128	@ 0x80
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 fbb4 	bl	8004356 <UART_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e03a      	b.n	8003c76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10b      	bne.n	8003c1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	3302      	adds	r3, #2
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	e007      	b.n	8003c2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	781a      	ldrb	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1cb      	bne.n	8003bde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2140      	movs	r1, #64	@ 0x40
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 fb80 	bl	8004356 <UART_WaitOnFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e006      	b.n	8003c76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e000      	b.n	8003c76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b08a      	sub	sp, #40	@ 0x28
 8003c82:	af02      	add	r7, sp, #8
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	f040 8081 	bne.w	8003da2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_UART_Receive+0x2e>
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e079      	b.n	8003da4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2222      	movs	r2, #34	@ 0x22
 8003cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cc4:	f7fe f962 	bl	8001f8c <HAL_GetTick>
 8003cc8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	88fa      	ldrh	r2, [r7, #6]
 8003cce:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	88fa      	ldrh	r2, [r7, #6]
 8003cd4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cde:	d108      	bne.n	8003cf2 <HAL_UART_Receive+0x74>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d104      	bne.n	8003cf2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	e003      	b.n	8003cfa <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003cfa:	e047      	b.n	8003d8c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2200      	movs	r2, #0
 8003d04:	2120      	movs	r1, #32
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 fb25 	bl	8004356 <UART_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e042      	b.n	8003da4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10c      	bne.n	8003d3e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	3302      	adds	r3, #2
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e01f      	b.n	8003d7e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d46:	d007      	beq.n	8003d58 <HAL_UART_Receive+0xda>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <HAL_UART_Receive+0xe8>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d106      	bne.n	8003d66 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e008      	b.n	8003d78 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1b2      	bne.n	8003cfc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e000      	b.n	8003da4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003da2:	2302      	movs	r3, #2
  }
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3720      	adds	r7, #32
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	4613      	mov	r3, r2
 8003db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d112      	bne.n	8003dec <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_UART_Receive_IT+0x26>
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e00b      	b.n	8003dee <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	461a      	mov	r2, r3
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fb10 	bl	8004408 <UART_Start_Receive_IT>
 8003de8:	4603      	mov	r3, r0
 8003dea:	e000      	b.n	8003dee <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b0ba      	sub	sp, #232	@ 0xe8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10f      	bne.n	8003e5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <HAL_UART_IRQHandler+0x66>
 8003e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fbec 	bl	8004634 <UART_Receive_IT>
      return;
 8003e5c:	e25b      	b.n	8004316 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80de 	beq.w	8004024 <HAL_UART_IRQHandler+0x22c>
 8003e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80d1 	beq.w	8004024 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_UART_IRQHandler+0xae>
 8003e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	f043 0201 	orr.w	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <HAL_UART_IRQHandler+0xd2>
 8003eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	f043 0202 	orr.w	r2, r3, #2
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_UART_IRQHandler+0xf6>
 8003ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	f043 0204 	orr.w	r2, r3, #4
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d011      	beq.n	8003f1e <HAL_UART_IRQHandler+0x126>
 8003efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d105      	bne.n	8003f12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d005      	beq.n	8003f1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	f043 0208 	orr.w	r2, r3, #8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 81f2 	beq.w	800430c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_UART_IRQHandler+0x14e>
 8003f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fb77 	bl	8004634 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf14      	ite	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	2300      	moveq	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d103      	bne.n	8003f72 <HAL_UART_IRQHandler+0x17a>
 8003f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d04f      	beq.n	8004012 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fa81 	bl	800447a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d041      	beq.n	800400a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3314      	adds	r3, #20
 8003f8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3314      	adds	r3, #20
 8003fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1d9      	bne.n	8003f86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d013      	beq.n	8004002 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fde:	4a7e      	ldr	r2, [pc, #504]	@ (80041d8 <HAL_UART_IRQHandler+0x3e0>)
 8003fe0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe f946 	bl	8002278 <HAL_DMA_Abort_IT>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d016      	beq.n	8004020 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	e00e      	b.n	8004020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f993 	bl	800432e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004008:	e00a      	b.n	8004020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f98f 	bl	800432e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004010:	e006      	b.n	8004020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f98b 	bl	800432e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800401e:	e175      	b.n	800430c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004020:	bf00      	nop
    return;
 8004022:	e173      	b.n	800430c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004028:	2b01      	cmp	r3, #1
 800402a:	f040 814f 	bne.w	80042cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8148 	beq.w	80042cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800403c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8141 	beq.w	80042cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 80b6 	beq.w	80041dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800407c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8145 	beq.w	8004310 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800408a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800408e:	429a      	cmp	r2, r3
 8004090:	f080 813e 	bcs.w	8004310 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800409a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	f000 8088 	beq.w	80041b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80040be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	330c      	adds	r3, #12
 80040d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80040d4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80040e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80040ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1d9      	bne.n	80040a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3314      	adds	r3, #20
 80040fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004104:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3314      	adds	r3, #20
 8004114:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004118:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800411c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004120:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800412a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e1      	bne.n	80040f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004146:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3314      	adds	r3, #20
 8004150:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004154:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004156:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800415a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004162:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e3      	bne.n	8004130 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004188:	f023 0310 	bic.w	r3, r3, #16
 800418c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800419a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800419c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1e3      	bne.n	8004176 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe f825 	bl	8002202 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	4619      	mov	r1, r3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f8b6 	bl	8004340 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041d4:	e09c      	b.n	8004310 <HAL_UART_IRQHandler+0x518>
 80041d6:	bf00      	nop
 80041d8:	0800453f 	.word	0x0800453f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 808e 	beq.w	8004314 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80041f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8089 	beq.w	8004314 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004218:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004226:	647a      	str	r2, [r7, #68]	@ 0x44
 8004228:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800422c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e3      	bne.n	8004202 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3314      	adds	r3, #20
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	623b      	str	r3, [r7, #32]
   return(result);
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3314      	adds	r3, #20
 800425a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800425e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004260:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800426c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e3      	bne.n	800423a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0310 	bic.w	r3, r3, #16
 8004296:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	330c      	adds	r3, #12
 80042a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80042a4:	61fa      	str	r2, [r7, #28]
 80042a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	69b9      	ldr	r1, [r7, #24]
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	617b      	str	r3, [r7, #20]
   return(result);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e3      	bne.n	8004280 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042c2:	4619      	mov	r1, r3
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f83b 	bl	8004340 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042ca:	e023      	b.n	8004314 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d009      	beq.n	80042ec <HAL_UART_IRQHandler+0x4f4>
 80042d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f93e 	bl	8004566 <UART_Transmit_IT>
    return;
 80042ea:	e014      	b.n	8004316 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00e      	beq.n	8004316 <HAL_UART_IRQHandler+0x51e>
 80042f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f97d 	bl	8004604 <UART_EndTransmit_IT>
    return;
 800430a:	e004      	b.n	8004316 <HAL_UART_IRQHandler+0x51e>
    return;
 800430c:	bf00      	nop
 800430e:	e002      	b.n	8004316 <HAL_UART_IRQHandler+0x51e>
      return;
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <HAL_UART_IRQHandler+0x51e>
      return;
 8004314:	bf00      	nop
  }
}
 8004316:	37e8      	adds	r7, #232	@ 0xe8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr

08004356 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b086      	sub	sp, #24
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	603b      	str	r3, [r7, #0]
 8004362:	4613      	mov	r3, r2
 8004364:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004366:	e03b      	b.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436e:	d037      	beq.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004370:	f7fd fe0c 	bl	8001f8c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	6a3a      	ldr	r2, [r7, #32]
 800437c:	429a      	cmp	r2, r3
 800437e:	d302      	bcc.n	8004386 <UART_WaitOnFlagUntilTimeout+0x30>
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e03a      	b.n	8004400 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d023      	beq.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b80      	cmp	r3, #128	@ 0x80
 800439c:	d020      	beq.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b40      	cmp	r3, #64	@ 0x40
 80043a2:	d01d      	beq.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d116      	bne.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f856 	bl	800447a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2208      	movs	r2, #8
 80043d2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e00f      	b.n	8004400 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4013      	ands	r3, r2
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	461a      	mov	r2, r3
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d0b4      	beq.n	8004368 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	4613      	mov	r3, r2
 8004414:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	88fa      	ldrh	r2, [r7, #6]
 8004426:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2222      	movs	r2, #34	@ 0x22
 8004432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800444c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0201 	orr.w	r2, r2, #1
 800445c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0220 	orr.w	r2, r2, #32
 800446c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800447a:	b480      	push	{r7}
 800447c:	b095      	sub	sp, #84	@ 0x54
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	330c      	adds	r3, #12
 8004488:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004498:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80044a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e5      	bne.n	8004482 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3314      	adds	r3, #20
 80044bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3314      	adds	r3, #20
 80044d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e5      	bne.n	80044b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d119      	bne.n	8004526 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	60bb      	str	r3, [r7, #8]
   return(result);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f023 0310 	bic.w	r3, r3, #16
 8004508:	647b      	str	r3, [r7, #68]	@ 0x44
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	330c      	adds	r3, #12
 8004510:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004512:	61ba      	str	r2, [r7, #24]
 8004514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6979      	ldr	r1, [r7, #20]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	613b      	str	r3, [r7, #16]
   return(result);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e5      	bne.n	80044f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004534:	bf00      	nop
 8004536:	3754      	adds	r7, #84	@ 0x54
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr

0800453e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7ff fee8 	bl	800432e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004566:	b480      	push	{r7}
 8004568:	b085      	sub	sp, #20
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b21      	cmp	r3, #33	@ 0x21
 8004578:	d13e      	bne.n	80045f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004582:	d114      	bne.n	80045ae <UART_Transmit_IT+0x48>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d110      	bne.n	80045ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	1c9a      	adds	r2, r3, #2
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	621a      	str	r2, [r3, #32]
 80045ac:	e008      	b.n	80045c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	1c59      	adds	r1, r3, #1
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6211      	str	r1, [r2, #32]
 80045b8:	781a      	ldrb	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4619      	mov	r1, r3
 80045ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10f      	bne.n	80045f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	e000      	b.n	80045fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045f8:	2302      	movs	r3, #2
  }
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr

08004604 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800461a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff fe79 	bl	800431c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08c      	sub	sp, #48	@ 0x30
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b22      	cmp	r3, #34	@ 0x22
 8004646:	f040 80ae 	bne.w	80047a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004652:	d117      	bne.n	8004684 <UART_Receive_IT+0x50>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d113      	bne.n	8004684 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800465c:	2300      	movs	r3, #0
 800465e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004664:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	b29b      	uxth	r3, r3
 800466e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004672:	b29a      	uxth	r2, r3
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467c:	1c9a      	adds	r2, r3, #2
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	629a      	str	r2, [r3, #40]	@ 0x28
 8004682:	e026      	b.n	80046d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004696:	d007      	beq.n	80046a8 <UART_Receive_IT+0x74>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <UART_Receive_IT+0x82>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	e008      	b.n	80046c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29b      	uxth	r3, r3
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	4619      	mov	r1, r3
 80046e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d15d      	bne.n	80047a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0220 	bic.w	r2, r2, #32
 80046f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004704:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0201 	bic.w	r2, r2, #1
 8004714:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004728:	2b01      	cmp	r3, #1
 800472a:	d135      	bne.n	8004798 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	330c      	adds	r3, #12
 8004738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	613b      	str	r3, [r7, #16]
   return(result);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f023 0310 	bic.w	r3, r3, #16
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	330c      	adds	r3, #12
 8004750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004752:	623a      	str	r2, [r7, #32]
 8004754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	69f9      	ldr	r1, [r7, #28]
 8004758:	6a3a      	ldr	r2, [r7, #32]
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e5      	bne.n	8004732 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b10      	cmp	r3, #16
 8004772:	d10a      	bne.n	800478a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff fdd5 	bl	8004340 <HAL_UARTEx_RxEventCallback>
 8004796:	e002      	b.n	800479e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7fc ff0b 	bl	80015b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	e002      	b.n	80047a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e000      	b.n	80047a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
  }
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3730      	adds	r7, #48	@ 0x30
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80047ea:	f023 030c 	bic.w	r3, r3, #12
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	430b      	orrs	r3, r1
 80047f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a2c      	ldr	r2, [pc, #176]	@ (80048c4 <UART_SetConfig+0x114>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d103      	bne.n	8004820 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004818:	f7fe fb42 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	e002      	b.n	8004826 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004820:	f7fe fb2a 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8004824:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009a      	lsls	r2, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	4a22      	ldr	r2, [pc, #136]	@ (80048c8 <UART_SetConfig+0x118>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	0119      	lsls	r1, r3, #4
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009a      	lsls	r2, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	fbb2 f2f3 	udiv	r2, r2, r3
 800485c:	4b1a      	ldr	r3, [pc, #104]	@ (80048c8 <UART_SetConfig+0x118>)
 800485e:	fba3 0302 	umull	r0, r3, r3, r2
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	2064      	movs	r0, #100	@ 0x64
 8004866:	fb00 f303 	mul.w	r3, r0, r3
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	3332      	adds	r3, #50	@ 0x32
 8004870:	4a15      	ldr	r2, [pc, #84]	@ (80048c8 <UART_SetConfig+0x118>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800487c:	4419      	add	r1, r3
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	009a      	lsls	r2, r3, #2
 8004888:	441a      	add	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	fbb2 f2f3 	udiv	r2, r2, r3
 8004894:	4b0c      	ldr	r3, [pc, #48]	@ (80048c8 <UART_SetConfig+0x118>)
 8004896:	fba3 0302 	umull	r0, r3, r3, r2
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	2064      	movs	r0, #100	@ 0x64
 800489e:	fb00 f303 	mul.w	r3, r0, r3
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	3332      	adds	r3, #50	@ 0x32
 80048a8:	4a07      	ldr	r2, [pc, #28]	@ (80048c8 <UART_SetConfig+0x118>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	f003 020f 	and.w	r2, r3, #15
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	440a      	add	r2, r1
 80048ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40013800 	.word	0x40013800
 80048c8:	51eb851f 	.word	0x51eb851f

080048cc <atoi>:
 80048cc:	220a      	movs	r2, #10
 80048ce:	2100      	movs	r1, #0
 80048d0:	f000 becc 	b.w	800566c <strtol>

080048d4 <sulp>:
 80048d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d8:	460f      	mov	r7, r1
 80048da:	4690      	mov	r8, r2
 80048dc:	f002 f8ac 	bl	8006a38 <__ulp>
 80048e0:	4604      	mov	r4, r0
 80048e2:	460d      	mov	r5, r1
 80048e4:	f1b8 0f00 	cmp.w	r8, #0
 80048e8:	d011      	beq.n	800490e <sulp+0x3a>
 80048ea:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80048ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	dd0b      	ble.n	800490e <sulp+0x3a>
 80048f6:	2400      	movs	r4, #0
 80048f8:	051b      	lsls	r3, r3, #20
 80048fa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80048fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004902:	4622      	mov	r2, r4
 8004904:	462b      	mov	r3, r5
 8004906:	f7fb fdf1 	bl	80004ec <__aeabi_dmul>
 800490a:	4604      	mov	r4, r0
 800490c:	460d      	mov	r5, r1
 800490e:	4620      	mov	r0, r4
 8004910:	4629      	mov	r1, r5
 8004912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004918 <_strtod_l>:
 8004918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491c:	b09f      	sub	sp, #124	@ 0x7c
 800491e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004920:	2200      	movs	r2, #0
 8004922:	460c      	mov	r4, r1
 8004924:	921a      	str	r2, [sp, #104]	@ 0x68
 8004926:	f04f 0a00 	mov.w	sl, #0
 800492a:	f04f 0b00 	mov.w	fp, #0
 800492e:	460a      	mov	r2, r1
 8004930:	9005      	str	r0, [sp, #20]
 8004932:	9219      	str	r2, [sp, #100]	@ 0x64
 8004934:	7811      	ldrb	r1, [r2, #0]
 8004936:	292b      	cmp	r1, #43	@ 0x2b
 8004938:	d048      	beq.n	80049cc <_strtod_l+0xb4>
 800493a:	d836      	bhi.n	80049aa <_strtod_l+0x92>
 800493c:	290d      	cmp	r1, #13
 800493e:	d830      	bhi.n	80049a2 <_strtod_l+0x8a>
 8004940:	2908      	cmp	r1, #8
 8004942:	d830      	bhi.n	80049a6 <_strtod_l+0x8e>
 8004944:	2900      	cmp	r1, #0
 8004946:	d039      	beq.n	80049bc <_strtod_l+0xa4>
 8004948:	2200      	movs	r2, #0
 800494a:	920e      	str	r2, [sp, #56]	@ 0x38
 800494c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800494e:	782a      	ldrb	r2, [r5, #0]
 8004950:	2a30      	cmp	r2, #48	@ 0x30
 8004952:	f040 80b0 	bne.w	8004ab6 <_strtod_l+0x19e>
 8004956:	786a      	ldrb	r2, [r5, #1]
 8004958:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800495c:	2a58      	cmp	r2, #88	@ 0x58
 800495e:	d16c      	bne.n	8004a3a <_strtod_l+0x122>
 8004960:	9302      	str	r3, [sp, #8]
 8004962:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004964:	4a8f      	ldr	r2, [pc, #572]	@ (8004ba4 <_strtod_l+0x28c>)
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	ab1a      	add	r3, sp, #104	@ 0x68
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	9805      	ldr	r0, [sp, #20]
 800496e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004970:	a919      	add	r1, sp, #100	@ 0x64
 8004972:	f001 f95b 	bl	8005c2c <__gethex>
 8004976:	f010 060f 	ands.w	r6, r0, #15
 800497a:	4604      	mov	r4, r0
 800497c:	d005      	beq.n	800498a <_strtod_l+0x72>
 800497e:	2e06      	cmp	r6, #6
 8004980:	d126      	bne.n	80049d0 <_strtod_l+0xb8>
 8004982:	2300      	movs	r3, #0
 8004984:	3501      	adds	r5, #1
 8004986:	9519      	str	r5, [sp, #100]	@ 0x64
 8004988:	930e      	str	r3, [sp, #56]	@ 0x38
 800498a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800498c:	2b00      	cmp	r3, #0
 800498e:	f040 8582 	bne.w	8005496 <_strtod_l+0xb7e>
 8004992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004994:	b1bb      	cbz	r3, 80049c6 <_strtod_l+0xae>
 8004996:	4650      	mov	r0, sl
 8004998:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800499c:	b01f      	add	sp, #124	@ 0x7c
 800499e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a2:	2920      	cmp	r1, #32
 80049a4:	d1d0      	bne.n	8004948 <_strtod_l+0x30>
 80049a6:	3201      	adds	r2, #1
 80049a8:	e7c3      	b.n	8004932 <_strtod_l+0x1a>
 80049aa:	292d      	cmp	r1, #45	@ 0x2d
 80049ac:	d1cc      	bne.n	8004948 <_strtod_l+0x30>
 80049ae:	2101      	movs	r1, #1
 80049b0:	910e      	str	r1, [sp, #56]	@ 0x38
 80049b2:	1c51      	adds	r1, r2, #1
 80049b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80049b6:	7852      	ldrb	r2, [r2, #1]
 80049b8:	2a00      	cmp	r2, #0
 80049ba:	d1c7      	bne.n	800494c <_strtod_l+0x34>
 80049bc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80049be:	9419      	str	r4, [sp, #100]	@ 0x64
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f040 8566 	bne.w	8005492 <_strtod_l+0xb7a>
 80049c6:	4650      	mov	r0, sl
 80049c8:	4659      	mov	r1, fp
 80049ca:	e7e7      	b.n	800499c <_strtod_l+0x84>
 80049cc:	2100      	movs	r1, #0
 80049ce:	e7ef      	b.n	80049b0 <_strtod_l+0x98>
 80049d0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80049d2:	b13a      	cbz	r2, 80049e4 <_strtod_l+0xcc>
 80049d4:	2135      	movs	r1, #53	@ 0x35
 80049d6:	a81c      	add	r0, sp, #112	@ 0x70
 80049d8:	f002 f91e 	bl	8006c18 <__copybits>
 80049dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80049de:	9805      	ldr	r0, [sp, #20]
 80049e0:	f001 fcfe 	bl	80063e0 <_Bfree>
 80049e4:	3e01      	subs	r6, #1
 80049e6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80049e8:	2e04      	cmp	r6, #4
 80049ea:	d806      	bhi.n	80049fa <_strtod_l+0xe2>
 80049ec:	e8df f006 	tbb	[pc, r6]
 80049f0:	201d0314 	.word	0x201d0314
 80049f4:	14          	.byte	0x14
 80049f5:	00          	.byte	0x00
 80049f6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80049fa:	05e1      	lsls	r1, r4, #23
 80049fc:	bf48      	it	mi
 80049fe:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004a02:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004a06:	0d1b      	lsrs	r3, r3, #20
 8004a08:	051b      	lsls	r3, r3, #20
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1bd      	bne.n	800498a <_strtod_l+0x72>
 8004a0e:	f000 fff9 	bl	8005a04 <__errno>
 8004a12:	2322      	movs	r3, #34	@ 0x22
 8004a14:	6003      	str	r3, [r0, #0]
 8004a16:	e7b8      	b.n	800498a <_strtod_l+0x72>
 8004a18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004a1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004a20:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004a24:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004a28:	e7e7      	b.n	80049fa <_strtod_l+0xe2>
 8004a2a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8004ba8 <_strtod_l+0x290>
 8004a2e:	e7e4      	b.n	80049fa <_strtod_l+0xe2>
 8004a30:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004a34:	f04f 3aff 	mov.w	sl, #4294967295
 8004a38:	e7df      	b.n	80049fa <_strtod_l+0xe2>
 8004a3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	9219      	str	r2, [sp, #100]	@ 0x64
 8004a40:	785b      	ldrb	r3, [r3, #1]
 8004a42:	2b30      	cmp	r3, #48	@ 0x30
 8004a44:	d0f9      	beq.n	8004a3a <_strtod_l+0x122>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d09f      	beq.n	800498a <_strtod_l+0x72>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	2700      	movs	r7, #0
 8004a4e:	220a      	movs	r2, #10
 8004a50:	46b9      	mov	r9, r7
 8004a52:	9308      	str	r3, [sp, #32]
 8004a54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004a56:	970b      	str	r7, [sp, #44]	@ 0x2c
 8004a58:	930c      	str	r3, [sp, #48]	@ 0x30
 8004a5a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004a5c:	7805      	ldrb	r5, [r0, #0]
 8004a5e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004a62:	b2d9      	uxtb	r1, r3
 8004a64:	2909      	cmp	r1, #9
 8004a66:	d928      	bls.n	8004aba <_strtod_l+0x1a2>
 8004a68:	2201      	movs	r2, #1
 8004a6a:	4950      	ldr	r1, [pc, #320]	@ (8004bac <_strtod_l+0x294>)
 8004a6c:	f000 ff15 	bl	800589a <strncmp>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d032      	beq.n	8004ada <_strtod_l+0x1c2>
 8004a74:	2000      	movs	r0, #0
 8004a76:	462a      	mov	r2, r5
 8004a78:	4603      	mov	r3, r0
 8004a7a:	464d      	mov	r5, r9
 8004a7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8004a7e:	2a65      	cmp	r2, #101	@ 0x65
 8004a80:	d001      	beq.n	8004a86 <_strtod_l+0x16e>
 8004a82:	2a45      	cmp	r2, #69	@ 0x45
 8004a84:	d114      	bne.n	8004ab0 <_strtod_l+0x198>
 8004a86:	b91d      	cbnz	r5, 8004a90 <_strtod_l+0x178>
 8004a88:	9a08      	ldr	r2, [sp, #32]
 8004a8a:	4302      	orrs	r2, r0
 8004a8c:	d096      	beq.n	80049bc <_strtod_l+0xa4>
 8004a8e:	2500      	movs	r5, #0
 8004a90:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004a92:	1c62      	adds	r2, r4, #1
 8004a94:	9219      	str	r2, [sp, #100]	@ 0x64
 8004a96:	7862      	ldrb	r2, [r4, #1]
 8004a98:	2a2b      	cmp	r2, #43	@ 0x2b
 8004a9a:	d07a      	beq.n	8004b92 <_strtod_l+0x27a>
 8004a9c:	2a2d      	cmp	r2, #45	@ 0x2d
 8004a9e:	d07e      	beq.n	8004b9e <_strtod_l+0x286>
 8004aa0:	f04f 0c00 	mov.w	ip, #0
 8004aa4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004aa8:	2909      	cmp	r1, #9
 8004aaa:	f240 8085 	bls.w	8004bb8 <_strtod_l+0x2a0>
 8004aae:	9419      	str	r4, [sp, #100]	@ 0x64
 8004ab0:	f04f 0800 	mov.w	r8, #0
 8004ab4:	e0a5      	b.n	8004c02 <_strtod_l+0x2ea>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e7c8      	b.n	8004a4c <_strtod_l+0x134>
 8004aba:	f1b9 0f08 	cmp.w	r9, #8
 8004abe:	bfd8      	it	le
 8004ac0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8004ac2:	f100 0001 	add.w	r0, r0, #1
 8004ac6:	bfd6      	itet	le
 8004ac8:	fb02 3301 	mlale	r3, r2, r1, r3
 8004acc:	fb02 3707 	mlagt	r7, r2, r7, r3
 8004ad0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8004ad2:	f109 0901 	add.w	r9, r9, #1
 8004ad6:	9019      	str	r0, [sp, #100]	@ 0x64
 8004ad8:	e7bf      	b.n	8004a5a <_strtod_l+0x142>
 8004ada:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	9219      	str	r2, [sp, #100]	@ 0x64
 8004ae0:	785a      	ldrb	r2, [r3, #1]
 8004ae2:	f1b9 0f00 	cmp.w	r9, #0
 8004ae6:	d03b      	beq.n	8004b60 <_strtod_l+0x248>
 8004ae8:	464d      	mov	r5, r9
 8004aea:	900a      	str	r0, [sp, #40]	@ 0x28
 8004aec:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004af0:	2b09      	cmp	r3, #9
 8004af2:	d912      	bls.n	8004b1a <_strtod_l+0x202>
 8004af4:	2301      	movs	r3, #1
 8004af6:	e7c2      	b.n	8004a7e <_strtod_l+0x166>
 8004af8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004afa:	3001      	adds	r0, #1
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	9219      	str	r2, [sp, #100]	@ 0x64
 8004b00:	785a      	ldrb	r2, [r3, #1]
 8004b02:	2a30      	cmp	r2, #48	@ 0x30
 8004b04:	d0f8      	beq.n	8004af8 <_strtod_l+0x1e0>
 8004b06:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	f200 84c8 	bhi.w	80054a0 <_strtod_l+0xb88>
 8004b10:	900a      	str	r0, [sp, #40]	@ 0x28
 8004b12:	2000      	movs	r0, #0
 8004b14:	4605      	mov	r5, r0
 8004b16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b18:	930c      	str	r3, [sp, #48]	@ 0x30
 8004b1a:	3a30      	subs	r2, #48	@ 0x30
 8004b1c:	f100 0301 	add.w	r3, r0, #1
 8004b20:	d018      	beq.n	8004b54 <_strtod_l+0x23c>
 8004b22:	462e      	mov	r6, r5
 8004b24:	f04f 0e0a 	mov.w	lr, #10
 8004b28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b2a:	4419      	add	r1, r3
 8004b2c:	910a      	str	r1, [sp, #40]	@ 0x28
 8004b2e:	1c71      	adds	r1, r6, #1
 8004b30:	eba1 0c05 	sub.w	ip, r1, r5
 8004b34:	4563      	cmp	r3, ip
 8004b36:	dc15      	bgt.n	8004b64 <_strtod_l+0x24c>
 8004b38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004b3c:	182b      	adds	r3, r5, r0
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	f105 0501 	add.w	r5, r5, #1
 8004b44:	4405      	add	r5, r0
 8004b46:	dc1a      	bgt.n	8004b7e <_strtod_l+0x266>
 8004b48:	230a      	movs	r3, #10
 8004b4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b4c:	fb03 2301 	mla	r3, r3, r1, r2
 8004b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b52:	2300      	movs	r3, #0
 8004b54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004b56:	4618      	mov	r0, r3
 8004b58:	1c51      	adds	r1, r2, #1
 8004b5a:	9119      	str	r1, [sp, #100]	@ 0x64
 8004b5c:	7852      	ldrb	r2, [r2, #1]
 8004b5e:	e7c5      	b.n	8004aec <_strtod_l+0x1d4>
 8004b60:	4648      	mov	r0, r9
 8004b62:	e7ce      	b.n	8004b02 <_strtod_l+0x1ea>
 8004b64:	2e08      	cmp	r6, #8
 8004b66:	dc05      	bgt.n	8004b74 <_strtod_l+0x25c>
 8004b68:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004b6a:	fb0e f606 	mul.w	r6, lr, r6
 8004b6e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8004b70:	460e      	mov	r6, r1
 8004b72:	e7dc      	b.n	8004b2e <_strtod_l+0x216>
 8004b74:	2910      	cmp	r1, #16
 8004b76:	bfd8      	it	le
 8004b78:	fb0e f707 	mulle.w	r7, lr, r7
 8004b7c:	e7f8      	b.n	8004b70 <_strtod_l+0x258>
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	bfdc      	itt	le
 8004b82:	230a      	movle	r3, #10
 8004b84:	fb03 2707 	mlale	r7, r3, r7, r2
 8004b88:	e7e3      	b.n	8004b52 <_strtod_l+0x23a>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e77a      	b.n	8004a88 <_strtod_l+0x170>
 8004b92:	f04f 0c00 	mov.w	ip, #0
 8004b96:	1ca2      	adds	r2, r4, #2
 8004b98:	9219      	str	r2, [sp, #100]	@ 0x64
 8004b9a:	78a2      	ldrb	r2, [r4, #2]
 8004b9c:	e782      	b.n	8004aa4 <_strtod_l+0x18c>
 8004b9e:	f04f 0c01 	mov.w	ip, #1
 8004ba2:	e7f8      	b.n	8004b96 <_strtod_l+0x27e>
 8004ba4:	0800798c 	.word	0x0800798c
 8004ba8:	7ff00000 	.word	0x7ff00000
 8004bac:	080077b6 	.word	0x080077b6
 8004bb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004bb2:	1c51      	adds	r1, r2, #1
 8004bb4:	9119      	str	r1, [sp, #100]	@ 0x64
 8004bb6:	7852      	ldrb	r2, [r2, #1]
 8004bb8:	2a30      	cmp	r2, #48	@ 0x30
 8004bba:	d0f9      	beq.n	8004bb0 <_strtod_l+0x298>
 8004bbc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004bc0:	2908      	cmp	r1, #8
 8004bc2:	f63f af75 	bhi.w	8004ab0 <_strtod_l+0x198>
 8004bc6:	f04f 080a 	mov.w	r8, #10
 8004bca:	3a30      	subs	r2, #48	@ 0x30
 8004bcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004bd0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004bd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004bd4:	1c56      	adds	r6, r2, #1
 8004bd6:	9619      	str	r6, [sp, #100]	@ 0x64
 8004bd8:	7852      	ldrb	r2, [r2, #1]
 8004bda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004bde:	f1be 0f09 	cmp.w	lr, #9
 8004be2:	d939      	bls.n	8004c58 <_strtod_l+0x340>
 8004be4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004be6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004bea:	1a76      	subs	r6, r6, r1
 8004bec:	2e08      	cmp	r6, #8
 8004bee:	dc03      	bgt.n	8004bf8 <_strtod_l+0x2e0>
 8004bf0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004bf2:	4588      	cmp	r8, r1
 8004bf4:	bfa8      	it	ge
 8004bf6:	4688      	movge	r8, r1
 8004bf8:	f1bc 0f00 	cmp.w	ip, #0
 8004bfc:	d001      	beq.n	8004c02 <_strtod_l+0x2ea>
 8004bfe:	f1c8 0800 	rsb	r8, r8, #0
 8004c02:	2d00      	cmp	r5, #0
 8004c04:	d14e      	bne.n	8004ca4 <_strtod_l+0x38c>
 8004c06:	9908      	ldr	r1, [sp, #32]
 8004c08:	4308      	orrs	r0, r1
 8004c0a:	f47f aebe 	bne.w	800498a <_strtod_l+0x72>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f47f aed4 	bne.w	80049bc <_strtod_l+0xa4>
 8004c14:	2a69      	cmp	r2, #105	@ 0x69
 8004c16:	d028      	beq.n	8004c6a <_strtod_l+0x352>
 8004c18:	dc25      	bgt.n	8004c66 <_strtod_l+0x34e>
 8004c1a:	2a49      	cmp	r2, #73	@ 0x49
 8004c1c:	d025      	beq.n	8004c6a <_strtod_l+0x352>
 8004c1e:	2a4e      	cmp	r2, #78	@ 0x4e
 8004c20:	f47f aecc 	bne.w	80049bc <_strtod_l+0xa4>
 8004c24:	4999      	ldr	r1, [pc, #612]	@ (8004e8c <_strtod_l+0x574>)
 8004c26:	a819      	add	r0, sp, #100	@ 0x64
 8004c28:	f001 fa22 	bl	8006070 <__match>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	f43f aec5 	beq.w	80049bc <_strtod_l+0xa4>
 8004c32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b28      	cmp	r3, #40	@ 0x28
 8004c38:	d12e      	bne.n	8004c98 <_strtod_l+0x380>
 8004c3a:	4995      	ldr	r1, [pc, #596]	@ (8004e90 <_strtod_l+0x578>)
 8004c3c:	aa1c      	add	r2, sp, #112	@ 0x70
 8004c3e:	a819      	add	r0, sp, #100	@ 0x64
 8004c40:	f001 fa2a 	bl	8006098 <__hexnan>
 8004c44:	2805      	cmp	r0, #5
 8004c46:	d127      	bne.n	8004c98 <_strtod_l+0x380>
 8004c48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004c4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8004c4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004c52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004c56:	e698      	b.n	800498a <_strtod_l+0x72>
 8004c58:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c5a:	fb08 2101 	mla	r1, r8, r1, r2
 8004c5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004c62:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c64:	e7b5      	b.n	8004bd2 <_strtod_l+0x2ba>
 8004c66:	2a6e      	cmp	r2, #110	@ 0x6e
 8004c68:	e7da      	b.n	8004c20 <_strtod_l+0x308>
 8004c6a:	498a      	ldr	r1, [pc, #552]	@ (8004e94 <_strtod_l+0x57c>)
 8004c6c:	a819      	add	r0, sp, #100	@ 0x64
 8004c6e:	f001 f9ff 	bl	8006070 <__match>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	f43f aea2 	beq.w	80049bc <_strtod_l+0xa4>
 8004c78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004c7a:	4987      	ldr	r1, [pc, #540]	@ (8004e98 <_strtod_l+0x580>)
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	a819      	add	r0, sp, #100	@ 0x64
 8004c80:	9319      	str	r3, [sp, #100]	@ 0x64
 8004c82:	f001 f9f5 	bl	8006070 <__match>
 8004c86:	b910      	cbnz	r0, 8004c8e <_strtod_l+0x376>
 8004c88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8004c8e:	f04f 0a00 	mov.w	sl, #0
 8004c92:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8004e9c <_strtod_l+0x584>
 8004c96:	e678      	b.n	800498a <_strtod_l+0x72>
 8004c98:	4881      	ldr	r0, [pc, #516]	@ (8004ea0 <_strtod_l+0x588>)
 8004c9a:	f000 feef 	bl	8005a7c <nan>
 8004c9e:	4682      	mov	sl, r0
 8004ca0:	468b      	mov	fp, r1
 8004ca2:	e672      	b.n	800498a <_strtod_l+0x72>
 8004ca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ca6:	f1b9 0f00 	cmp.w	r9, #0
 8004caa:	bf08      	it	eq
 8004cac:	46a9      	moveq	r9, r5
 8004cae:	eba8 0303 	sub.w	r3, r8, r3
 8004cb2:	2d10      	cmp	r5, #16
 8004cb4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004cb6:	462c      	mov	r4, r5
 8004cb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cba:	bfa8      	it	ge
 8004cbc:	2410      	movge	r4, #16
 8004cbe:	f7fb fb9b 	bl	80003f8 <__aeabi_ui2d>
 8004cc2:	2d09      	cmp	r5, #9
 8004cc4:	4682      	mov	sl, r0
 8004cc6:	468b      	mov	fp, r1
 8004cc8:	dc11      	bgt.n	8004cee <_strtod_l+0x3d6>
 8004cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f43f ae5c 	beq.w	800498a <_strtod_l+0x72>
 8004cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cd4:	dd76      	ble.n	8004dc4 <_strtod_l+0x4ac>
 8004cd6:	2b16      	cmp	r3, #22
 8004cd8:	dc5d      	bgt.n	8004d96 <_strtod_l+0x47e>
 8004cda:	4972      	ldr	r1, [pc, #456]	@ (8004ea4 <_strtod_l+0x58c>)
 8004cdc:	4652      	mov	r2, sl
 8004cde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004ce2:	465b      	mov	r3, fp
 8004ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ce8:	f7fb fc00 	bl	80004ec <__aeabi_dmul>
 8004cec:	e7d7      	b.n	8004c9e <_strtod_l+0x386>
 8004cee:	4b6d      	ldr	r3, [pc, #436]	@ (8004ea4 <_strtod_l+0x58c>)
 8004cf0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004cf4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004cf8:	f7fb fbf8 	bl	80004ec <__aeabi_dmul>
 8004cfc:	4682      	mov	sl, r0
 8004cfe:	4638      	mov	r0, r7
 8004d00:	468b      	mov	fp, r1
 8004d02:	f7fb fb79 	bl	80003f8 <__aeabi_ui2d>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4650      	mov	r0, sl
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	f7fb fa37 	bl	8000180 <__adddf3>
 8004d12:	2d0f      	cmp	r5, #15
 8004d14:	4682      	mov	sl, r0
 8004d16:	468b      	mov	fp, r1
 8004d18:	ddd7      	ble.n	8004cca <_strtod_l+0x3b2>
 8004d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d1c:	1b2c      	subs	r4, r5, r4
 8004d1e:	441c      	add	r4, r3
 8004d20:	2c00      	cmp	r4, #0
 8004d22:	f340 8093 	ble.w	8004e4c <_strtod_l+0x534>
 8004d26:	f014 030f 	ands.w	r3, r4, #15
 8004d2a:	d00a      	beq.n	8004d42 <_strtod_l+0x42a>
 8004d2c:	495d      	ldr	r1, [pc, #372]	@ (8004ea4 <_strtod_l+0x58c>)
 8004d2e:	4652      	mov	r2, sl
 8004d30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004d34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d38:	465b      	mov	r3, fp
 8004d3a:	f7fb fbd7 	bl	80004ec <__aeabi_dmul>
 8004d3e:	4682      	mov	sl, r0
 8004d40:	468b      	mov	fp, r1
 8004d42:	f034 040f 	bics.w	r4, r4, #15
 8004d46:	d073      	beq.n	8004e30 <_strtod_l+0x518>
 8004d48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8004d4c:	dd49      	ble.n	8004de2 <_strtod_l+0x4ca>
 8004d4e:	2400      	movs	r4, #0
 8004d50:	46a0      	mov	r8, r4
 8004d52:	46a1      	mov	r9, r4
 8004d54:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004d56:	2322      	movs	r3, #34	@ 0x22
 8004d58:	f04f 0a00 	mov.w	sl, #0
 8004d5c:	9a05      	ldr	r2, [sp, #20]
 8004d5e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8004e9c <_strtod_l+0x584>
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f43f ae0f 	beq.w	800498a <_strtod_l+0x72>
 8004d6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004d6e:	9805      	ldr	r0, [sp, #20]
 8004d70:	f001 fb36 	bl	80063e0 <_Bfree>
 8004d74:	4649      	mov	r1, r9
 8004d76:	9805      	ldr	r0, [sp, #20]
 8004d78:	f001 fb32 	bl	80063e0 <_Bfree>
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	9805      	ldr	r0, [sp, #20]
 8004d80:	f001 fb2e 	bl	80063e0 <_Bfree>
 8004d84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d86:	9805      	ldr	r0, [sp, #20]
 8004d88:	f001 fb2a 	bl	80063e0 <_Bfree>
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	9805      	ldr	r0, [sp, #20]
 8004d90:	f001 fb26 	bl	80063e0 <_Bfree>
 8004d94:	e5f9      	b.n	800498a <_strtod_l+0x72>
 8004d96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	dbbc      	blt.n	8004d1a <_strtod_l+0x402>
 8004da0:	4c40      	ldr	r4, [pc, #256]	@ (8004ea4 <_strtod_l+0x58c>)
 8004da2:	f1c5 050f 	rsb	r5, r5, #15
 8004da6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004daa:	4652      	mov	r2, sl
 8004dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004db0:	465b      	mov	r3, fp
 8004db2:	f7fb fb9b 	bl	80004ec <__aeabi_dmul>
 8004db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004db8:	1b5d      	subs	r5, r3, r5
 8004dba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004dbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004dc2:	e791      	b.n	8004ce8 <_strtod_l+0x3d0>
 8004dc4:	3316      	adds	r3, #22
 8004dc6:	dba8      	blt.n	8004d1a <_strtod_l+0x402>
 8004dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dca:	4650      	mov	r0, sl
 8004dcc:	eba3 0808 	sub.w	r8, r3, r8
 8004dd0:	4b34      	ldr	r3, [pc, #208]	@ (8004ea4 <_strtod_l+0x58c>)
 8004dd2:	4659      	mov	r1, fp
 8004dd4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8004dd8:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004ddc:	f7fb fcb0 	bl	8000740 <__aeabi_ddiv>
 8004de0:	e75d      	b.n	8004c9e <_strtod_l+0x386>
 8004de2:	2300      	movs	r3, #0
 8004de4:	4650      	mov	r0, sl
 8004de6:	4659      	mov	r1, fp
 8004de8:	461e      	mov	r6, r3
 8004dea:	4f2f      	ldr	r7, [pc, #188]	@ (8004ea8 <_strtod_l+0x590>)
 8004dec:	1124      	asrs	r4, r4, #4
 8004dee:	2c01      	cmp	r4, #1
 8004df0:	dc21      	bgt.n	8004e36 <_strtod_l+0x51e>
 8004df2:	b10b      	cbz	r3, 8004df8 <_strtod_l+0x4e0>
 8004df4:	4682      	mov	sl, r0
 8004df6:	468b      	mov	fp, r1
 8004df8:	492b      	ldr	r1, [pc, #172]	@ (8004ea8 <_strtod_l+0x590>)
 8004dfa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004dfe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004e02:	4652      	mov	r2, sl
 8004e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e08:	465b      	mov	r3, fp
 8004e0a:	f7fb fb6f 	bl	80004ec <__aeabi_dmul>
 8004e0e:	4b23      	ldr	r3, [pc, #140]	@ (8004e9c <_strtod_l+0x584>)
 8004e10:	460a      	mov	r2, r1
 8004e12:	400b      	ands	r3, r1
 8004e14:	4925      	ldr	r1, [pc, #148]	@ (8004eac <_strtod_l+0x594>)
 8004e16:	4682      	mov	sl, r0
 8004e18:	428b      	cmp	r3, r1
 8004e1a:	d898      	bhi.n	8004d4e <_strtod_l+0x436>
 8004e1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004e20:	428b      	cmp	r3, r1
 8004e22:	bf86      	itte	hi
 8004e24:	f04f 3aff 	movhi.w	sl, #4294967295
 8004e28:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8004eb0 <_strtod_l+0x598>
 8004e2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004e30:	2300      	movs	r3, #0
 8004e32:	9308      	str	r3, [sp, #32]
 8004e34:	e076      	b.n	8004f24 <_strtod_l+0x60c>
 8004e36:	07e2      	lsls	r2, r4, #31
 8004e38:	d504      	bpl.n	8004e44 <_strtod_l+0x52c>
 8004e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e3e:	f7fb fb55 	bl	80004ec <__aeabi_dmul>
 8004e42:	2301      	movs	r3, #1
 8004e44:	3601      	adds	r6, #1
 8004e46:	1064      	asrs	r4, r4, #1
 8004e48:	3708      	adds	r7, #8
 8004e4a:	e7d0      	b.n	8004dee <_strtod_l+0x4d6>
 8004e4c:	d0f0      	beq.n	8004e30 <_strtod_l+0x518>
 8004e4e:	4264      	negs	r4, r4
 8004e50:	f014 020f 	ands.w	r2, r4, #15
 8004e54:	d00a      	beq.n	8004e6c <_strtod_l+0x554>
 8004e56:	4b13      	ldr	r3, [pc, #76]	@ (8004ea4 <_strtod_l+0x58c>)
 8004e58:	4650      	mov	r0, sl
 8004e5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e5e:	4659      	mov	r1, fp
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	f7fb fc6c 	bl	8000740 <__aeabi_ddiv>
 8004e68:	4682      	mov	sl, r0
 8004e6a:	468b      	mov	fp, r1
 8004e6c:	1124      	asrs	r4, r4, #4
 8004e6e:	d0df      	beq.n	8004e30 <_strtod_l+0x518>
 8004e70:	2c1f      	cmp	r4, #31
 8004e72:	dd1f      	ble.n	8004eb4 <_strtod_l+0x59c>
 8004e74:	2400      	movs	r4, #0
 8004e76:	46a0      	mov	r8, r4
 8004e78:	46a1      	mov	r9, r4
 8004e7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004e7c:	2322      	movs	r3, #34	@ 0x22
 8004e7e:	9a05      	ldr	r2, [sp, #20]
 8004e80:	f04f 0a00 	mov.w	sl, #0
 8004e84:	f04f 0b00 	mov.w	fp, #0
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	e76b      	b.n	8004d64 <_strtod_l+0x44c>
 8004e8c:	080077c1 	.word	0x080077c1
 8004e90:	08007978 	.word	0x08007978
 8004e94:	080077b8 	.word	0x080077b8
 8004e98:	080077bb 	.word	0x080077bb
 8004e9c:	7ff00000 	.word	0x7ff00000
 8004ea0:	08007878 	.word	0x08007878
 8004ea4:	08007b00 	.word	0x08007b00
 8004ea8:	08007ad8 	.word	0x08007ad8
 8004eac:	7ca00000 	.word	0x7ca00000
 8004eb0:	7fefffff 	.word	0x7fefffff
 8004eb4:	f014 0310 	ands.w	r3, r4, #16
 8004eb8:	bf18      	it	ne
 8004eba:	236a      	movne	r3, #106	@ 0x6a
 8004ebc:	4650      	mov	r0, sl
 8004ebe:	9308      	str	r3, [sp, #32]
 8004ec0:	4659      	mov	r1, fp
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	4e77      	ldr	r6, [pc, #476]	@ (80050a4 <_strtod_l+0x78c>)
 8004ec6:	07e7      	lsls	r7, r4, #31
 8004ec8:	d504      	bpl.n	8004ed4 <_strtod_l+0x5bc>
 8004eca:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ece:	f7fb fb0d 	bl	80004ec <__aeabi_dmul>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	1064      	asrs	r4, r4, #1
 8004ed6:	f106 0608 	add.w	r6, r6, #8
 8004eda:	d1f4      	bne.n	8004ec6 <_strtod_l+0x5ae>
 8004edc:	b10b      	cbz	r3, 8004ee2 <_strtod_l+0x5ca>
 8004ede:	4682      	mov	sl, r0
 8004ee0:	468b      	mov	fp, r1
 8004ee2:	9b08      	ldr	r3, [sp, #32]
 8004ee4:	b1b3      	cbz	r3, 8004f14 <_strtod_l+0x5fc>
 8004ee6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004eea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	4659      	mov	r1, fp
 8004ef2:	dd0f      	ble.n	8004f14 <_strtod_l+0x5fc>
 8004ef4:	2b1f      	cmp	r3, #31
 8004ef6:	dd58      	ble.n	8004faa <_strtod_l+0x692>
 8004ef8:	2b34      	cmp	r3, #52	@ 0x34
 8004efa:	bfd8      	it	le
 8004efc:	f04f 33ff 	movle.w	r3, #4294967295
 8004f00:	f04f 0a00 	mov.w	sl, #0
 8004f04:	bfcf      	iteee	gt
 8004f06:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004f0a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8004f0e:	4093      	lslle	r3, r2
 8004f10:	ea03 0b01 	andle.w	fp, r3, r1
 8004f14:	2200      	movs	r2, #0
 8004f16:	2300      	movs	r3, #0
 8004f18:	4650      	mov	r0, sl
 8004f1a:	4659      	mov	r1, fp
 8004f1c:	f7fb fd4e 	bl	80009bc <__aeabi_dcmpeq>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d1a7      	bne.n	8004e74 <_strtod_l+0x55c>
 8004f24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f26:	464a      	mov	r2, r9
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004f2c:	462b      	mov	r3, r5
 8004f2e:	9805      	ldr	r0, [sp, #20]
 8004f30:	f001 fabe 	bl	80064b0 <__s2b>
 8004f34:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004f36:	2800      	cmp	r0, #0
 8004f38:	f43f af09 	beq.w	8004d4e <_strtod_l+0x436>
 8004f3c:	2400      	movs	r4, #0
 8004f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f42:	2a00      	cmp	r2, #0
 8004f44:	eba3 0308 	sub.w	r3, r3, r8
 8004f48:	bfa8      	it	ge
 8004f4a:	2300      	movge	r3, #0
 8004f4c:	46a0      	mov	r8, r4
 8004f4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004f50:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004f54:	9316      	str	r3, [sp, #88]	@ 0x58
 8004f56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f58:	9805      	ldr	r0, [sp, #20]
 8004f5a:	6859      	ldr	r1, [r3, #4]
 8004f5c:	f001 fa00 	bl	8006360 <_Balloc>
 8004f60:	4681      	mov	r9, r0
 8004f62:	2800      	cmp	r0, #0
 8004f64:	f43f aef7 	beq.w	8004d56 <_strtod_l+0x43e>
 8004f68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f6a:	300c      	adds	r0, #12
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	f103 010c 	add.w	r1, r3, #12
 8004f72:	3202      	adds	r2, #2
 8004f74:	0092      	lsls	r2, r2, #2
 8004f76:	f000 fd72 	bl	8005a5e <memcpy>
 8004f7a:	ab1c      	add	r3, sp, #112	@ 0x70
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	4652      	mov	r2, sl
 8004f84:	465b      	mov	r3, fp
 8004f86:	9805      	ldr	r0, [sp, #20]
 8004f88:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8004f8c:	f001 fdbc 	bl	8006b08 <__d2b>
 8004f90:	901a      	str	r0, [sp, #104]	@ 0x68
 8004f92:	2800      	cmp	r0, #0
 8004f94:	f43f aedf 	beq.w	8004d56 <_strtod_l+0x43e>
 8004f98:	2101      	movs	r1, #1
 8004f9a:	9805      	ldr	r0, [sp, #20]
 8004f9c:	f001 fb1e 	bl	80065dc <__i2b>
 8004fa0:	4680      	mov	r8, r0
 8004fa2:	b948      	cbnz	r0, 8004fb8 <_strtod_l+0x6a0>
 8004fa4:	f04f 0800 	mov.w	r8, #0
 8004fa8:	e6d5      	b.n	8004d56 <_strtod_l+0x43e>
 8004faa:	f04f 32ff 	mov.w	r2, #4294967295
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	ea03 0a0a 	and.w	sl, r3, sl
 8004fb6:	e7ad      	b.n	8004f14 <_strtod_l+0x5fc>
 8004fb8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8004fba:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004fbc:	2d00      	cmp	r5, #0
 8004fbe:	bfab      	itete	ge
 8004fc0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004fc2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004fc4:	18ef      	addge	r7, r5, r3
 8004fc6:	1b5e      	sublt	r6, r3, r5
 8004fc8:	9b08      	ldr	r3, [sp, #32]
 8004fca:	bfa8      	it	ge
 8004fcc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8004fce:	eba5 0503 	sub.w	r5, r5, r3
 8004fd2:	4415      	add	r5, r2
 8004fd4:	4b34      	ldr	r3, [pc, #208]	@ (80050a8 <_strtod_l+0x790>)
 8004fd6:	f105 35ff 	add.w	r5, r5, #4294967295
 8004fda:	bfb8      	it	lt
 8004fdc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8004fde:	429d      	cmp	r5, r3
 8004fe0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004fe4:	da50      	bge.n	8005088 <_strtod_l+0x770>
 8004fe6:	1b5b      	subs	r3, r3, r5
 8004fe8:	2b1f      	cmp	r3, #31
 8004fea:	f04f 0101 	mov.w	r1, #1
 8004fee:	eba2 0203 	sub.w	r2, r2, r3
 8004ff2:	dc3d      	bgt.n	8005070 <_strtod_l+0x758>
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	9310      	str	r3, [sp, #64]	@ 0x40
 8004ffe:	18bd      	adds	r5, r7, r2
 8005000:	9b08      	ldr	r3, [sp, #32]
 8005002:	42af      	cmp	r7, r5
 8005004:	4416      	add	r6, r2
 8005006:	441e      	add	r6, r3
 8005008:	463b      	mov	r3, r7
 800500a:	bfa8      	it	ge
 800500c:	462b      	movge	r3, r5
 800500e:	42b3      	cmp	r3, r6
 8005010:	bfa8      	it	ge
 8005012:	4633      	movge	r3, r6
 8005014:	2b00      	cmp	r3, #0
 8005016:	bfc2      	ittt	gt
 8005018:	1aed      	subgt	r5, r5, r3
 800501a:	1af6      	subgt	r6, r6, r3
 800501c:	1aff      	subgt	r7, r7, r3
 800501e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005020:	2b00      	cmp	r3, #0
 8005022:	dd16      	ble.n	8005052 <_strtod_l+0x73a>
 8005024:	4641      	mov	r1, r8
 8005026:	461a      	mov	r2, r3
 8005028:	9805      	ldr	r0, [sp, #20]
 800502a:	f001 fb8f 	bl	800674c <__pow5mult>
 800502e:	4680      	mov	r8, r0
 8005030:	2800      	cmp	r0, #0
 8005032:	d0b7      	beq.n	8004fa4 <_strtod_l+0x68c>
 8005034:	4601      	mov	r1, r0
 8005036:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005038:	9805      	ldr	r0, [sp, #20]
 800503a:	f001 fae5 	bl	8006608 <__multiply>
 800503e:	900a      	str	r0, [sp, #40]	@ 0x28
 8005040:	2800      	cmp	r0, #0
 8005042:	f43f ae88 	beq.w	8004d56 <_strtod_l+0x43e>
 8005046:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005048:	9805      	ldr	r0, [sp, #20]
 800504a:	f001 f9c9 	bl	80063e0 <_Bfree>
 800504e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005050:	931a      	str	r3, [sp, #104]	@ 0x68
 8005052:	2d00      	cmp	r5, #0
 8005054:	dc1d      	bgt.n	8005092 <_strtod_l+0x77a>
 8005056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	dd27      	ble.n	80050ac <_strtod_l+0x794>
 800505c:	4649      	mov	r1, r9
 800505e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005060:	9805      	ldr	r0, [sp, #20]
 8005062:	f001 fb73 	bl	800674c <__pow5mult>
 8005066:	4681      	mov	r9, r0
 8005068:	bb00      	cbnz	r0, 80050ac <_strtod_l+0x794>
 800506a:	f04f 0900 	mov.w	r9, #0
 800506e:	e672      	b.n	8004d56 <_strtod_l+0x43e>
 8005070:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005074:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005078:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800507c:	35e2      	adds	r5, #226	@ 0xe2
 800507e:	fa01 f305 	lsl.w	r3, r1, r5
 8005082:	9310      	str	r3, [sp, #64]	@ 0x40
 8005084:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005086:	e7ba      	b.n	8004ffe <_strtod_l+0x6e6>
 8005088:	2300      	movs	r3, #0
 800508a:	9310      	str	r3, [sp, #64]	@ 0x40
 800508c:	2301      	movs	r3, #1
 800508e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005090:	e7b5      	b.n	8004ffe <_strtod_l+0x6e6>
 8005092:	462a      	mov	r2, r5
 8005094:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005096:	9805      	ldr	r0, [sp, #20]
 8005098:	f001 fbb2 	bl	8006800 <__lshift>
 800509c:	901a      	str	r0, [sp, #104]	@ 0x68
 800509e:	2800      	cmp	r0, #0
 80050a0:	d1d9      	bne.n	8005056 <_strtod_l+0x73e>
 80050a2:	e658      	b.n	8004d56 <_strtod_l+0x43e>
 80050a4:	080079a0 	.word	0x080079a0
 80050a8:	fffffc02 	.word	0xfffffc02
 80050ac:	2e00      	cmp	r6, #0
 80050ae:	dd07      	ble.n	80050c0 <_strtod_l+0x7a8>
 80050b0:	4649      	mov	r1, r9
 80050b2:	4632      	mov	r2, r6
 80050b4:	9805      	ldr	r0, [sp, #20]
 80050b6:	f001 fba3 	bl	8006800 <__lshift>
 80050ba:	4681      	mov	r9, r0
 80050bc:	2800      	cmp	r0, #0
 80050be:	d0d4      	beq.n	800506a <_strtod_l+0x752>
 80050c0:	2f00      	cmp	r7, #0
 80050c2:	dd08      	ble.n	80050d6 <_strtod_l+0x7be>
 80050c4:	4641      	mov	r1, r8
 80050c6:	463a      	mov	r2, r7
 80050c8:	9805      	ldr	r0, [sp, #20]
 80050ca:	f001 fb99 	bl	8006800 <__lshift>
 80050ce:	4680      	mov	r8, r0
 80050d0:	2800      	cmp	r0, #0
 80050d2:	f43f ae40 	beq.w	8004d56 <_strtod_l+0x43e>
 80050d6:	464a      	mov	r2, r9
 80050d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80050da:	9805      	ldr	r0, [sp, #20]
 80050dc:	f001 fc18 	bl	8006910 <__mdiff>
 80050e0:	4604      	mov	r4, r0
 80050e2:	2800      	cmp	r0, #0
 80050e4:	f43f ae37 	beq.w	8004d56 <_strtod_l+0x43e>
 80050e8:	68c3      	ldr	r3, [r0, #12]
 80050ea:	4641      	mov	r1, r8
 80050ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 80050ee:	2300      	movs	r3, #0
 80050f0:	60c3      	str	r3, [r0, #12]
 80050f2:	f001 fbf1 	bl	80068d8 <__mcmp>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	da3d      	bge.n	8005176 <_strtod_l+0x85e>
 80050fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050fc:	ea53 030a 	orrs.w	r3, r3, sl
 8005100:	d163      	bne.n	80051ca <_strtod_l+0x8b2>
 8005102:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005106:	2b00      	cmp	r3, #0
 8005108:	d15f      	bne.n	80051ca <_strtod_l+0x8b2>
 800510a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800510e:	0d1b      	lsrs	r3, r3, #20
 8005110:	051b      	lsls	r3, r3, #20
 8005112:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005116:	d958      	bls.n	80051ca <_strtod_l+0x8b2>
 8005118:	6963      	ldr	r3, [r4, #20]
 800511a:	b913      	cbnz	r3, 8005122 <_strtod_l+0x80a>
 800511c:	6923      	ldr	r3, [r4, #16]
 800511e:	2b01      	cmp	r3, #1
 8005120:	dd53      	ble.n	80051ca <_strtod_l+0x8b2>
 8005122:	4621      	mov	r1, r4
 8005124:	2201      	movs	r2, #1
 8005126:	9805      	ldr	r0, [sp, #20]
 8005128:	f001 fb6a 	bl	8006800 <__lshift>
 800512c:	4641      	mov	r1, r8
 800512e:	4604      	mov	r4, r0
 8005130:	f001 fbd2 	bl	80068d8 <__mcmp>
 8005134:	2800      	cmp	r0, #0
 8005136:	dd48      	ble.n	80051ca <_strtod_l+0x8b2>
 8005138:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800513c:	9a08      	ldr	r2, [sp, #32]
 800513e:	0d1b      	lsrs	r3, r3, #20
 8005140:	051b      	lsls	r3, r3, #20
 8005142:	2a00      	cmp	r2, #0
 8005144:	d062      	beq.n	800520c <_strtod_l+0x8f4>
 8005146:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800514a:	d85f      	bhi.n	800520c <_strtod_l+0x8f4>
 800514c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005150:	f67f ae94 	bls.w	8004e7c <_strtod_l+0x564>
 8005154:	4650      	mov	r0, sl
 8005156:	4659      	mov	r1, fp
 8005158:	4ba3      	ldr	r3, [pc, #652]	@ (80053e8 <_strtod_l+0xad0>)
 800515a:	2200      	movs	r2, #0
 800515c:	f7fb f9c6 	bl	80004ec <__aeabi_dmul>
 8005160:	4ba2      	ldr	r3, [pc, #648]	@ (80053ec <_strtod_l+0xad4>)
 8005162:	4682      	mov	sl, r0
 8005164:	400b      	ands	r3, r1
 8005166:	468b      	mov	fp, r1
 8005168:	2b00      	cmp	r3, #0
 800516a:	f47f adff 	bne.w	8004d6c <_strtod_l+0x454>
 800516e:	2322      	movs	r3, #34	@ 0x22
 8005170:	9a05      	ldr	r2, [sp, #20]
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e5fa      	b.n	8004d6c <_strtod_l+0x454>
 8005176:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800517a:	d165      	bne.n	8005248 <_strtod_l+0x930>
 800517c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800517e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005182:	b35a      	cbz	r2, 80051dc <_strtod_l+0x8c4>
 8005184:	4a9a      	ldr	r2, [pc, #616]	@ (80053f0 <_strtod_l+0xad8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d12b      	bne.n	80051e2 <_strtod_l+0x8ca>
 800518a:	9b08      	ldr	r3, [sp, #32]
 800518c:	4651      	mov	r1, sl
 800518e:	b303      	cbz	r3, 80051d2 <_strtod_l+0x8ba>
 8005190:	465a      	mov	r2, fp
 8005192:	4b96      	ldr	r3, [pc, #600]	@ (80053ec <_strtod_l+0xad4>)
 8005194:	4013      	ands	r3, r2
 8005196:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800519a:	f04f 32ff 	mov.w	r2, #4294967295
 800519e:	d81b      	bhi.n	80051d8 <_strtod_l+0x8c0>
 80051a0:	0d1b      	lsrs	r3, r3, #20
 80051a2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	4299      	cmp	r1, r3
 80051ac:	d119      	bne.n	80051e2 <_strtod_l+0x8ca>
 80051ae:	4b91      	ldr	r3, [pc, #580]	@ (80053f4 <_strtod_l+0xadc>)
 80051b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d102      	bne.n	80051bc <_strtod_l+0x8a4>
 80051b6:	3101      	adds	r1, #1
 80051b8:	f43f adcd 	beq.w	8004d56 <_strtod_l+0x43e>
 80051bc:	f04f 0a00 	mov.w	sl, #0
 80051c0:	4b8a      	ldr	r3, [pc, #552]	@ (80053ec <_strtod_l+0xad4>)
 80051c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051c4:	401a      	ands	r2, r3
 80051c6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80051ca:	9b08      	ldr	r3, [sp, #32]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1c1      	bne.n	8005154 <_strtod_l+0x83c>
 80051d0:	e5cc      	b.n	8004d6c <_strtod_l+0x454>
 80051d2:	f04f 33ff 	mov.w	r3, #4294967295
 80051d6:	e7e8      	b.n	80051aa <_strtod_l+0x892>
 80051d8:	4613      	mov	r3, r2
 80051da:	e7e6      	b.n	80051aa <_strtod_l+0x892>
 80051dc:	ea53 030a 	orrs.w	r3, r3, sl
 80051e0:	d0aa      	beq.n	8005138 <_strtod_l+0x820>
 80051e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80051e4:	b1db      	cbz	r3, 800521e <_strtod_l+0x906>
 80051e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051e8:	4213      	tst	r3, r2
 80051ea:	d0ee      	beq.n	80051ca <_strtod_l+0x8b2>
 80051ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051ee:	4650      	mov	r0, sl
 80051f0:	4659      	mov	r1, fp
 80051f2:	9a08      	ldr	r2, [sp, #32]
 80051f4:	b1bb      	cbz	r3, 8005226 <_strtod_l+0x90e>
 80051f6:	f7ff fb6d 	bl	80048d4 <sulp>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005202:	f7fa ffbd 	bl	8000180 <__adddf3>
 8005206:	4682      	mov	sl, r0
 8005208:	468b      	mov	fp, r1
 800520a:	e7de      	b.n	80051ca <_strtod_l+0x8b2>
 800520c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005210:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005214:	f04f 3aff 	mov.w	sl, #4294967295
 8005218:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800521c:	e7d5      	b.n	80051ca <_strtod_l+0x8b2>
 800521e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005220:	ea13 0f0a 	tst.w	r3, sl
 8005224:	e7e1      	b.n	80051ea <_strtod_l+0x8d2>
 8005226:	f7ff fb55 	bl	80048d4 <sulp>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005232:	f7fa ffa3 	bl	800017c <__aeabi_dsub>
 8005236:	2200      	movs	r2, #0
 8005238:	2300      	movs	r3, #0
 800523a:	4682      	mov	sl, r0
 800523c:	468b      	mov	fp, r1
 800523e:	f7fb fbbd 	bl	80009bc <__aeabi_dcmpeq>
 8005242:	2800      	cmp	r0, #0
 8005244:	d0c1      	beq.n	80051ca <_strtod_l+0x8b2>
 8005246:	e619      	b.n	8004e7c <_strtod_l+0x564>
 8005248:	4641      	mov	r1, r8
 800524a:	4620      	mov	r0, r4
 800524c:	f001 fcb4 	bl	8006bb8 <__ratio>
 8005250:	2200      	movs	r2, #0
 8005252:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005256:	4606      	mov	r6, r0
 8005258:	460f      	mov	r7, r1
 800525a:	f7fb fbc3 	bl	80009e4 <__aeabi_dcmple>
 800525e:	2800      	cmp	r0, #0
 8005260:	d06d      	beq.n	800533e <_strtod_l+0xa26>
 8005262:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005264:	2b00      	cmp	r3, #0
 8005266:	d178      	bne.n	800535a <_strtod_l+0xa42>
 8005268:	f1ba 0f00 	cmp.w	sl, #0
 800526c:	d156      	bne.n	800531c <_strtod_l+0xa04>
 800526e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005274:	2b00      	cmp	r3, #0
 8005276:	d158      	bne.n	800532a <_strtod_l+0xa12>
 8005278:	2200      	movs	r2, #0
 800527a:	4630      	mov	r0, r6
 800527c:	4639      	mov	r1, r7
 800527e:	4b5e      	ldr	r3, [pc, #376]	@ (80053f8 <_strtod_l+0xae0>)
 8005280:	f7fb fba6 	bl	80009d0 <__aeabi_dcmplt>
 8005284:	2800      	cmp	r0, #0
 8005286:	d157      	bne.n	8005338 <_strtod_l+0xa20>
 8005288:	4630      	mov	r0, r6
 800528a:	4639      	mov	r1, r7
 800528c:	2200      	movs	r2, #0
 800528e:	4b5b      	ldr	r3, [pc, #364]	@ (80053fc <_strtod_l+0xae4>)
 8005290:	f7fb f92c 	bl	80004ec <__aeabi_dmul>
 8005294:	4606      	mov	r6, r0
 8005296:	460f      	mov	r7, r1
 8005298:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800529c:	9606      	str	r6, [sp, #24]
 800529e:	9307      	str	r3, [sp, #28]
 80052a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052a4:	4d51      	ldr	r5, [pc, #324]	@ (80053ec <_strtod_l+0xad4>)
 80052a6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80052aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052ac:	401d      	ands	r5, r3
 80052ae:	4b54      	ldr	r3, [pc, #336]	@ (8005400 <_strtod_l+0xae8>)
 80052b0:	429d      	cmp	r5, r3
 80052b2:	f040 80ab 	bne.w	800540c <_strtod_l+0xaf4>
 80052b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052b8:	4650      	mov	r0, sl
 80052ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80052be:	4659      	mov	r1, fp
 80052c0:	f001 fbba 	bl	8006a38 <__ulp>
 80052c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052c8:	f7fb f910 	bl	80004ec <__aeabi_dmul>
 80052cc:	4652      	mov	r2, sl
 80052ce:	465b      	mov	r3, fp
 80052d0:	f7fa ff56 	bl	8000180 <__adddf3>
 80052d4:	460b      	mov	r3, r1
 80052d6:	4945      	ldr	r1, [pc, #276]	@ (80053ec <_strtod_l+0xad4>)
 80052d8:	4a4a      	ldr	r2, [pc, #296]	@ (8005404 <_strtod_l+0xaec>)
 80052da:	4019      	ands	r1, r3
 80052dc:	4291      	cmp	r1, r2
 80052de:	4682      	mov	sl, r0
 80052e0:	d942      	bls.n	8005368 <_strtod_l+0xa50>
 80052e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80052e4:	4b43      	ldr	r3, [pc, #268]	@ (80053f4 <_strtod_l+0xadc>)
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d103      	bne.n	80052f2 <_strtod_l+0x9da>
 80052ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80052ec:	3301      	adds	r3, #1
 80052ee:	f43f ad32 	beq.w	8004d56 <_strtod_l+0x43e>
 80052f2:	f04f 3aff 	mov.w	sl, #4294967295
 80052f6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80053f4 <_strtod_l+0xadc>
 80052fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80052fc:	9805      	ldr	r0, [sp, #20]
 80052fe:	f001 f86f 	bl	80063e0 <_Bfree>
 8005302:	4649      	mov	r1, r9
 8005304:	9805      	ldr	r0, [sp, #20]
 8005306:	f001 f86b 	bl	80063e0 <_Bfree>
 800530a:	4641      	mov	r1, r8
 800530c:	9805      	ldr	r0, [sp, #20]
 800530e:	f001 f867 	bl	80063e0 <_Bfree>
 8005312:	4621      	mov	r1, r4
 8005314:	9805      	ldr	r0, [sp, #20]
 8005316:	f001 f863 	bl	80063e0 <_Bfree>
 800531a:	e61c      	b.n	8004f56 <_strtod_l+0x63e>
 800531c:	f1ba 0f01 	cmp.w	sl, #1
 8005320:	d103      	bne.n	800532a <_strtod_l+0xa12>
 8005322:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005324:	2b00      	cmp	r3, #0
 8005326:	f43f ada9 	beq.w	8004e7c <_strtod_l+0x564>
 800532a:	2200      	movs	r2, #0
 800532c:	4b36      	ldr	r3, [pc, #216]	@ (8005408 <_strtod_l+0xaf0>)
 800532e:	2600      	movs	r6, #0
 8005330:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005334:	4f30      	ldr	r7, [pc, #192]	@ (80053f8 <_strtod_l+0xae0>)
 8005336:	e7b3      	b.n	80052a0 <_strtod_l+0x988>
 8005338:	2600      	movs	r6, #0
 800533a:	4f30      	ldr	r7, [pc, #192]	@ (80053fc <_strtod_l+0xae4>)
 800533c:	e7ac      	b.n	8005298 <_strtod_l+0x980>
 800533e:	4630      	mov	r0, r6
 8005340:	4639      	mov	r1, r7
 8005342:	4b2e      	ldr	r3, [pc, #184]	@ (80053fc <_strtod_l+0xae4>)
 8005344:	2200      	movs	r2, #0
 8005346:	f7fb f8d1 	bl	80004ec <__aeabi_dmul>
 800534a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800534c:	4606      	mov	r6, r0
 800534e:	460f      	mov	r7, r1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0a1      	beq.n	8005298 <_strtod_l+0x980>
 8005354:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005358:	e7a2      	b.n	80052a0 <_strtod_l+0x988>
 800535a:	2200      	movs	r2, #0
 800535c:	4b26      	ldr	r3, [pc, #152]	@ (80053f8 <_strtod_l+0xae0>)
 800535e:	4616      	mov	r6, r2
 8005360:	461f      	mov	r7, r3
 8005362:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005366:	e79b      	b.n	80052a0 <_strtod_l+0x988>
 8005368:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800536c:	9b08      	ldr	r3, [sp, #32]
 800536e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1c1      	bne.n	80052fa <_strtod_l+0x9e2>
 8005376:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800537a:	0d1b      	lsrs	r3, r3, #20
 800537c:	051b      	lsls	r3, r3, #20
 800537e:	429d      	cmp	r5, r3
 8005380:	d1bb      	bne.n	80052fa <_strtod_l+0x9e2>
 8005382:	4630      	mov	r0, r6
 8005384:	4639      	mov	r1, r7
 8005386:	f7fb fee1 	bl	800114c <__aeabi_d2lz>
 800538a:	f7fb f881 	bl	8000490 <__aeabi_l2d>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	4630      	mov	r0, r6
 8005394:	4639      	mov	r1, r7
 8005396:	f7fa fef1 	bl	800017c <__aeabi_dsub>
 800539a:	460b      	mov	r3, r1
 800539c:	4602      	mov	r2, r0
 800539e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80053a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80053a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053a8:	ea46 060a 	orr.w	r6, r6, sl
 80053ac:	431e      	orrs	r6, r3
 80053ae:	d06a      	beq.n	8005486 <_strtod_l+0xb6e>
 80053b0:	a309      	add	r3, pc, #36	@ (adr r3, 80053d8 <_strtod_l+0xac0>)
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	f7fb fb0b 	bl	80009d0 <__aeabi_dcmplt>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	f47f acd6 	bne.w	8004d6c <_strtod_l+0x454>
 80053c0:	a307      	add	r3, pc, #28	@ (adr r3, 80053e0 <_strtod_l+0xac8>)
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053ca:	f7fb fb1f 	bl	8000a0c <__aeabi_dcmpgt>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d093      	beq.n	80052fa <_strtod_l+0x9e2>
 80053d2:	e4cb      	b.n	8004d6c <_strtod_l+0x454>
 80053d4:	f3af 8000 	nop.w
 80053d8:	94a03595 	.word	0x94a03595
 80053dc:	3fdfffff 	.word	0x3fdfffff
 80053e0:	35afe535 	.word	0x35afe535
 80053e4:	3fe00000 	.word	0x3fe00000
 80053e8:	39500000 	.word	0x39500000
 80053ec:	7ff00000 	.word	0x7ff00000
 80053f0:	000fffff 	.word	0x000fffff
 80053f4:	7fefffff 	.word	0x7fefffff
 80053f8:	3ff00000 	.word	0x3ff00000
 80053fc:	3fe00000 	.word	0x3fe00000
 8005400:	7fe00000 	.word	0x7fe00000
 8005404:	7c9fffff 	.word	0x7c9fffff
 8005408:	bff00000 	.word	0xbff00000
 800540c:	9b08      	ldr	r3, [sp, #32]
 800540e:	b323      	cbz	r3, 800545a <_strtod_l+0xb42>
 8005410:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005414:	d821      	bhi.n	800545a <_strtod_l+0xb42>
 8005416:	a328      	add	r3, pc, #160	@ (adr r3, 80054b8 <_strtod_l+0xba0>)
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	4630      	mov	r0, r6
 800541e:	4639      	mov	r1, r7
 8005420:	f7fb fae0 	bl	80009e4 <__aeabi_dcmple>
 8005424:	b1a0      	cbz	r0, 8005450 <_strtod_l+0xb38>
 8005426:	4639      	mov	r1, r7
 8005428:	4630      	mov	r0, r6
 800542a:	f7fb fb0f 	bl	8000a4c <__aeabi_d2uiz>
 800542e:	2801      	cmp	r0, #1
 8005430:	bf38      	it	cc
 8005432:	2001      	movcc	r0, #1
 8005434:	f7fa ffe0 	bl	80003f8 <__aeabi_ui2d>
 8005438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800543a:	4606      	mov	r6, r0
 800543c:	460f      	mov	r7, r1
 800543e:	b9fb      	cbnz	r3, 8005480 <_strtod_l+0xb68>
 8005440:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005444:	9014      	str	r0, [sp, #80]	@ 0x50
 8005446:	9315      	str	r3, [sp, #84]	@ 0x54
 8005448:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800544c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005450:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005452:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005456:	1b5b      	subs	r3, r3, r5
 8005458:	9311      	str	r3, [sp, #68]	@ 0x44
 800545a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800545e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005462:	f001 fae9 	bl	8006a38 <__ulp>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4650      	mov	r0, sl
 800546c:	4659      	mov	r1, fp
 800546e:	f7fb f83d 	bl	80004ec <__aeabi_dmul>
 8005472:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005476:	f7fa fe83 	bl	8000180 <__adddf3>
 800547a:	4682      	mov	sl, r0
 800547c:	468b      	mov	fp, r1
 800547e:	e775      	b.n	800536c <_strtod_l+0xa54>
 8005480:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005484:	e7e0      	b.n	8005448 <_strtod_l+0xb30>
 8005486:	a30e      	add	r3, pc, #56	@ (adr r3, 80054c0 <_strtod_l+0xba8>)
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	f7fb faa0 	bl	80009d0 <__aeabi_dcmplt>
 8005490:	e79d      	b.n	80053ce <_strtod_l+0xab6>
 8005492:	2300      	movs	r3, #0
 8005494:	930e      	str	r3, [sp, #56]	@ 0x38
 8005496:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005498:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	f7ff ba79 	b.w	8004992 <_strtod_l+0x7a>
 80054a0:	2a65      	cmp	r2, #101	@ 0x65
 80054a2:	f43f ab72 	beq.w	8004b8a <_strtod_l+0x272>
 80054a6:	2a45      	cmp	r2, #69	@ 0x45
 80054a8:	f43f ab6f 	beq.w	8004b8a <_strtod_l+0x272>
 80054ac:	2301      	movs	r3, #1
 80054ae:	f7ff bbaa 	b.w	8004c06 <_strtod_l+0x2ee>
 80054b2:	bf00      	nop
 80054b4:	f3af 8000 	nop.w
 80054b8:	ffc00000 	.word	0xffc00000
 80054bc:	41dfffff 	.word	0x41dfffff
 80054c0:	94a03595 	.word	0x94a03595
 80054c4:	3fcfffff 	.word	0x3fcfffff

080054c8 <strtof>:
 80054c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054cc:	4d24      	ldr	r5, [pc, #144]	@ (8005560 <strtof+0x98>)
 80054ce:	460a      	mov	r2, r1
 80054d0:	4b24      	ldr	r3, [pc, #144]	@ (8005564 <strtof+0x9c>)
 80054d2:	4601      	mov	r1, r0
 80054d4:	6828      	ldr	r0, [r5, #0]
 80054d6:	f7ff fa1f 	bl	8004918 <_strtod_l>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4606      	mov	r6, r0
 80054e0:	460f      	mov	r7, r1
 80054e2:	f7fb fa9d 	bl	8000a20 <__aeabi_dcmpun>
 80054e6:	b168      	cbz	r0, 8005504 <strtof+0x3c>
 80054e8:	2f00      	cmp	r7, #0
 80054ea:	481f      	ldr	r0, [pc, #124]	@ (8005568 <strtof+0xa0>)
 80054ec:	da06      	bge.n	80054fc <strtof+0x34>
 80054ee:	f000 facb 	bl	8005a88 <nanf>
 80054f2:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80054f6:	4620      	mov	r0, r4
 80054f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005500:	f000 bac2 	b.w	8005a88 <nanf>
 8005504:	4639      	mov	r1, r7
 8005506:	4630      	mov	r0, r6
 8005508:	f7fb fac0 	bl	8000a8c <__aeabi_d2f>
 800550c:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8005510:	4604      	mov	r4, r0
 8005512:	4916      	ldr	r1, [pc, #88]	@ (800556c <strtof+0xa4>)
 8005514:	4640      	mov	r0, r8
 8005516:	f7fb fddd 	bl	80010d4 <__aeabi_fcmpun>
 800551a:	b9b0      	cbnz	r0, 800554a <strtof+0x82>
 800551c:	4640      	mov	r0, r8
 800551e:	4913      	ldr	r1, [pc, #76]	@ (800556c <strtof+0xa4>)
 8005520:	f7fb fdba 	bl	8001098 <__aeabi_fcmple>
 8005524:	b988      	cbnz	r0, 800554a <strtof+0x82>
 8005526:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 800552a:	f04f 32ff 	mov.w	r2, #4294967295
 800552e:	4630      	mov	r0, r6
 8005530:	4649      	mov	r1, r9
 8005532:	4b0f      	ldr	r3, [pc, #60]	@ (8005570 <strtof+0xa8>)
 8005534:	f7fb fa74 	bl	8000a20 <__aeabi_dcmpun>
 8005538:	b970      	cbnz	r0, 8005558 <strtof+0x90>
 800553a:	f04f 32ff 	mov.w	r2, #4294967295
 800553e:	4630      	mov	r0, r6
 8005540:	4649      	mov	r1, r9
 8005542:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <strtof+0xa8>)
 8005544:	f7fb fa4e 	bl	80009e4 <__aeabi_dcmple>
 8005548:	b930      	cbnz	r0, 8005558 <strtof+0x90>
 800554a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800554e:	d1d2      	bne.n	80054f6 <strtof+0x2e>
 8005550:	4b08      	ldr	r3, [pc, #32]	@ (8005574 <strtof+0xac>)
 8005552:	403b      	ands	r3, r7
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0ce      	beq.n	80054f6 <strtof+0x2e>
 8005558:	2222      	movs	r2, #34	@ 0x22
 800555a:	682b      	ldr	r3, [r5, #0]
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e7ca      	b.n	80054f6 <strtof+0x2e>
 8005560:	20000194 	.word	0x20000194
 8005564:	20000028 	.word	0x20000028
 8005568:	08007878 	.word	0x08007878
 800556c:	7f7fffff 	.word	0x7f7fffff
 8005570:	7fefffff 	.word	0x7fefffff
 8005574:	7ff00000 	.word	0x7ff00000

08005578 <_strtol_l.isra.0>:
 8005578:	2b24      	cmp	r3, #36	@ 0x24
 800557a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800557e:	4686      	mov	lr, r0
 8005580:	4690      	mov	r8, r2
 8005582:	d801      	bhi.n	8005588 <_strtol_l.isra.0+0x10>
 8005584:	2b01      	cmp	r3, #1
 8005586:	d106      	bne.n	8005596 <_strtol_l.isra.0+0x1e>
 8005588:	f000 fa3c 	bl	8005a04 <__errno>
 800558c:	2316      	movs	r3, #22
 800558e:	6003      	str	r3, [r0, #0]
 8005590:	2000      	movs	r0, #0
 8005592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005596:	460d      	mov	r5, r1
 8005598:	4833      	ldr	r0, [pc, #204]	@ (8005668 <_strtol_l.isra.0+0xf0>)
 800559a:	462a      	mov	r2, r5
 800559c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055a0:	5d06      	ldrb	r6, [r0, r4]
 80055a2:	f016 0608 	ands.w	r6, r6, #8
 80055a6:	d1f8      	bne.n	800559a <_strtol_l.isra.0+0x22>
 80055a8:	2c2d      	cmp	r4, #45	@ 0x2d
 80055aa:	d110      	bne.n	80055ce <_strtol_l.isra.0+0x56>
 80055ac:	2601      	movs	r6, #1
 80055ae:	782c      	ldrb	r4, [r5, #0]
 80055b0:	1c95      	adds	r5, r2, #2
 80055b2:	f033 0210 	bics.w	r2, r3, #16
 80055b6:	d115      	bne.n	80055e4 <_strtol_l.isra.0+0x6c>
 80055b8:	2c30      	cmp	r4, #48	@ 0x30
 80055ba:	d10d      	bne.n	80055d8 <_strtol_l.isra.0+0x60>
 80055bc:	782a      	ldrb	r2, [r5, #0]
 80055be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80055c2:	2a58      	cmp	r2, #88	@ 0x58
 80055c4:	d108      	bne.n	80055d8 <_strtol_l.isra.0+0x60>
 80055c6:	786c      	ldrb	r4, [r5, #1]
 80055c8:	3502      	adds	r5, #2
 80055ca:	2310      	movs	r3, #16
 80055cc:	e00a      	b.n	80055e4 <_strtol_l.isra.0+0x6c>
 80055ce:	2c2b      	cmp	r4, #43	@ 0x2b
 80055d0:	bf04      	itt	eq
 80055d2:	782c      	ldrbeq	r4, [r5, #0]
 80055d4:	1c95      	addeq	r5, r2, #2
 80055d6:	e7ec      	b.n	80055b2 <_strtol_l.isra.0+0x3a>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f6      	bne.n	80055ca <_strtol_l.isra.0+0x52>
 80055dc:	2c30      	cmp	r4, #48	@ 0x30
 80055de:	bf14      	ite	ne
 80055e0:	230a      	movne	r3, #10
 80055e2:	2308      	moveq	r3, #8
 80055e4:	2200      	movs	r2, #0
 80055e6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80055ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 80055ee:	fbbc f9f3 	udiv	r9, ip, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	fb03 ca19 	mls	sl, r3, r9, ip
 80055f8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80055fc:	2f09      	cmp	r7, #9
 80055fe:	d80f      	bhi.n	8005620 <_strtol_l.isra.0+0xa8>
 8005600:	463c      	mov	r4, r7
 8005602:	42a3      	cmp	r3, r4
 8005604:	dd1b      	ble.n	800563e <_strtol_l.isra.0+0xc6>
 8005606:	1c57      	adds	r7, r2, #1
 8005608:	d007      	beq.n	800561a <_strtol_l.isra.0+0xa2>
 800560a:	4581      	cmp	r9, r0
 800560c:	d314      	bcc.n	8005638 <_strtol_l.isra.0+0xc0>
 800560e:	d101      	bne.n	8005614 <_strtol_l.isra.0+0x9c>
 8005610:	45a2      	cmp	sl, r4
 8005612:	db11      	blt.n	8005638 <_strtol_l.isra.0+0xc0>
 8005614:	2201      	movs	r2, #1
 8005616:	fb00 4003 	mla	r0, r0, r3, r4
 800561a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800561e:	e7eb      	b.n	80055f8 <_strtol_l.isra.0+0x80>
 8005620:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005624:	2f19      	cmp	r7, #25
 8005626:	d801      	bhi.n	800562c <_strtol_l.isra.0+0xb4>
 8005628:	3c37      	subs	r4, #55	@ 0x37
 800562a:	e7ea      	b.n	8005602 <_strtol_l.isra.0+0x8a>
 800562c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005630:	2f19      	cmp	r7, #25
 8005632:	d804      	bhi.n	800563e <_strtol_l.isra.0+0xc6>
 8005634:	3c57      	subs	r4, #87	@ 0x57
 8005636:	e7e4      	b.n	8005602 <_strtol_l.isra.0+0x8a>
 8005638:	f04f 32ff 	mov.w	r2, #4294967295
 800563c:	e7ed      	b.n	800561a <_strtol_l.isra.0+0xa2>
 800563e:	1c53      	adds	r3, r2, #1
 8005640:	d108      	bne.n	8005654 <_strtol_l.isra.0+0xdc>
 8005642:	2322      	movs	r3, #34	@ 0x22
 8005644:	4660      	mov	r0, ip
 8005646:	f8ce 3000 	str.w	r3, [lr]
 800564a:	f1b8 0f00 	cmp.w	r8, #0
 800564e:	d0a0      	beq.n	8005592 <_strtol_l.isra.0+0x1a>
 8005650:	1e69      	subs	r1, r5, #1
 8005652:	e006      	b.n	8005662 <_strtol_l.isra.0+0xea>
 8005654:	b106      	cbz	r6, 8005658 <_strtol_l.isra.0+0xe0>
 8005656:	4240      	negs	r0, r0
 8005658:	f1b8 0f00 	cmp.w	r8, #0
 800565c:	d099      	beq.n	8005592 <_strtol_l.isra.0+0x1a>
 800565e:	2a00      	cmp	r2, #0
 8005660:	d1f6      	bne.n	8005650 <_strtol_l.isra.0+0xd8>
 8005662:	f8c8 1000 	str.w	r1, [r8]
 8005666:	e794      	b.n	8005592 <_strtol_l.isra.0+0x1a>
 8005668:	080079c9 	.word	0x080079c9

0800566c <strtol>:
 800566c:	4613      	mov	r3, r2
 800566e:	460a      	mov	r2, r1
 8005670:	4601      	mov	r1, r0
 8005672:	4802      	ldr	r0, [pc, #8]	@ (800567c <strtol+0x10>)
 8005674:	6800      	ldr	r0, [r0, #0]
 8005676:	f7ff bf7f 	b.w	8005578 <_strtol_l.isra.0>
 800567a:	bf00      	nop
 800567c:	20000194 	.word	0x20000194

08005680 <std>:
 8005680:	2300      	movs	r3, #0
 8005682:	b510      	push	{r4, lr}
 8005684:	4604      	mov	r4, r0
 8005686:	e9c0 3300 	strd	r3, r3, [r0]
 800568a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800568e:	6083      	str	r3, [r0, #8]
 8005690:	8181      	strh	r1, [r0, #12]
 8005692:	6643      	str	r3, [r0, #100]	@ 0x64
 8005694:	81c2      	strh	r2, [r0, #14]
 8005696:	6183      	str	r3, [r0, #24]
 8005698:	4619      	mov	r1, r3
 800569a:	2208      	movs	r2, #8
 800569c:	305c      	adds	r0, #92	@ 0x5c
 800569e:	f000 f8f4 	bl	800588a <memset>
 80056a2:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <std+0x58>)
 80056a4:	6224      	str	r4, [r4, #32]
 80056a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80056a8:	4b0c      	ldr	r3, [pc, #48]	@ (80056dc <std+0x5c>)
 80056aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80056ac:	4b0c      	ldr	r3, [pc, #48]	@ (80056e0 <std+0x60>)
 80056ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80056b0:	4b0c      	ldr	r3, [pc, #48]	@ (80056e4 <std+0x64>)
 80056b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80056b4:	4b0c      	ldr	r3, [pc, #48]	@ (80056e8 <std+0x68>)
 80056b6:	429c      	cmp	r4, r3
 80056b8:	d006      	beq.n	80056c8 <std+0x48>
 80056ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80056be:	4294      	cmp	r4, r2
 80056c0:	d002      	beq.n	80056c8 <std+0x48>
 80056c2:	33d0      	adds	r3, #208	@ 0xd0
 80056c4:	429c      	cmp	r4, r3
 80056c6:	d105      	bne.n	80056d4 <std+0x54>
 80056c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d0:	f000 b9c2 	b.w	8005a58 <__retarget_lock_init_recursive>
 80056d4:	bd10      	pop	{r4, pc}
 80056d6:	bf00      	nop
 80056d8:	08005805 	.word	0x08005805
 80056dc:	08005827 	.word	0x08005827
 80056e0:	0800585f 	.word	0x0800585f
 80056e4:	08005883 	.word	0x08005883
 80056e8:	20000328 	.word	0x20000328

080056ec <stdio_exit_handler>:
 80056ec:	4a02      	ldr	r2, [pc, #8]	@ (80056f8 <stdio_exit_handler+0xc>)
 80056ee:	4903      	ldr	r1, [pc, #12]	@ (80056fc <stdio_exit_handler+0x10>)
 80056f0:	4803      	ldr	r0, [pc, #12]	@ (8005700 <stdio_exit_handler+0x14>)
 80056f2:	f000 b869 	b.w	80057c8 <_fwalk_sglue>
 80056f6:	bf00      	nop
 80056f8:	2000001c 	.word	0x2000001c
 80056fc:	08006dbd 	.word	0x08006dbd
 8005700:	20000198 	.word	0x20000198

08005704 <cleanup_stdio>:
 8005704:	6841      	ldr	r1, [r0, #4]
 8005706:	4b0c      	ldr	r3, [pc, #48]	@ (8005738 <cleanup_stdio+0x34>)
 8005708:	b510      	push	{r4, lr}
 800570a:	4299      	cmp	r1, r3
 800570c:	4604      	mov	r4, r0
 800570e:	d001      	beq.n	8005714 <cleanup_stdio+0x10>
 8005710:	f001 fb54 	bl	8006dbc <_fflush_r>
 8005714:	68a1      	ldr	r1, [r4, #8]
 8005716:	4b09      	ldr	r3, [pc, #36]	@ (800573c <cleanup_stdio+0x38>)
 8005718:	4299      	cmp	r1, r3
 800571a:	d002      	beq.n	8005722 <cleanup_stdio+0x1e>
 800571c:	4620      	mov	r0, r4
 800571e:	f001 fb4d 	bl	8006dbc <_fflush_r>
 8005722:	68e1      	ldr	r1, [r4, #12]
 8005724:	4b06      	ldr	r3, [pc, #24]	@ (8005740 <cleanup_stdio+0x3c>)
 8005726:	4299      	cmp	r1, r3
 8005728:	d004      	beq.n	8005734 <cleanup_stdio+0x30>
 800572a:	4620      	mov	r0, r4
 800572c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005730:	f001 bb44 	b.w	8006dbc <_fflush_r>
 8005734:	bd10      	pop	{r4, pc}
 8005736:	bf00      	nop
 8005738:	20000328 	.word	0x20000328
 800573c:	20000390 	.word	0x20000390
 8005740:	200003f8 	.word	0x200003f8

08005744 <global_stdio_init.part.0>:
 8005744:	b510      	push	{r4, lr}
 8005746:	4b0b      	ldr	r3, [pc, #44]	@ (8005774 <global_stdio_init.part.0+0x30>)
 8005748:	4c0b      	ldr	r4, [pc, #44]	@ (8005778 <global_stdio_init.part.0+0x34>)
 800574a:	4a0c      	ldr	r2, [pc, #48]	@ (800577c <global_stdio_init.part.0+0x38>)
 800574c:	4620      	mov	r0, r4
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	2104      	movs	r1, #4
 8005752:	2200      	movs	r2, #0
 8005754:	f7ff ff94 	bl	8005680 <std>
 8005758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800575c:	2201      	movs	r2, #1
 800575e:	2109      	movs	r1, #9
 8005760:	f7ff ff8e 	bl	8005680 <std>
 8005764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005768:	2202      	movs	r2, #2
 800576a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800576e:	2112      	movs	r1, #18
 8005770:	f7ff bf86 	b.w	8005680 <std>
 8005774:	20000460 	.word	0x20000460
 8005778:	20000328 	.word	0x20000328
 800577c:	080056ed 	.word	0x080056ed

08005780 <__sfp_lock_acquire>:
 8005780:	4801      	ldr	r0, [pc, #4]	@ (8005788 <__sfp_lock_acquire+0x8>)
 8005782:	f000 b96a 	b.w	8005a5a <__retarget_lock_acquire_recursive>
 8005786:	bf00      	nop
 8005788:	20000469 	.word	0x20000469

0800578c <__sfp_lock_release>:
 800578c:	4801      	ldr	r0, [pc, #4]	@ (8005794 <__sfp_lock_release+0x8>)
 800578e:	f000 b965 	b.w	8005a5c <__retarget_lock_release_recursive>
 8005792:	bf00      	nop
 8005794:	20000469 	.word	0x20000469

08005798 <__sinit>:
 8005798:	b510      	push	{r4, lr}
 800579a:	4604      	mov	r4, r0
 800579c:	f7ff fff0 	bl	8005780 <__sfp_lock_acquire>
 80057a0:	6a23      	ldr	r3, [r4, #32]
 80057a2:	b11b      	cbz	r3, 80057ac <__sinit+0x14>
 80057a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057a8:	f7ff bff0 	b.w	800578c <__sfp_lock_release>
 80057ac:	4b04      	ldr	r3, [pc, #16]	@ (80057c0 <__sinit+0x28>)
 80057ae:	6223      	str	r3, [r4, #32]
 80057b0:	4b04      	ldr	r3, [pc, #16]	@ (80057c4 <__sinit+0x2c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1f5      	bne.n	80057a4 <__sinit+0xc>
 80057b8:	f7ff ffc4 	bl	8005744 <global_stdio_init.part.0>
 80057bc:	e7f2      	b.n	80057a4 <__sinit+0xc>
 80057be:	bf00      	nop
 80057c0:	08005705 	.word	0x08005705
 80057c4:	20000460 	.word	0x20000460

080057c8 <_fwalk_sglue>:
 80057c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057cc:	4607      	mov	r7, r0
 80057ce:	4688      	mov	r8, r1
 80057d0:	4614      	mov	r4, r2
 80057d2:	2600      	movs	r6, #0
 80057d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057d8:	f1b9 0901 	subs.w	r9, r9, #1
 80057dc:	d505      	bpl.n	80057ea <_fwalk_sglue+0x22>
 80057de:	6824      	ldr	r4, [r4, #0]
 80057e0:	2c00      	cmp	r4, #0
 80057e2:	d1f7      	bne.n	80057d4 <_fwalk_sglue+0xc>
 80057e4:	4630      	mov	r0, r6
 80057e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ea:	89ab      	ldrh	r3, [r5, #12]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d907      	bls.n	8005800 <_fwalk_sglue+0x38>
 80057f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057f4:	3301      	adds	r3, #1
 80057f6:	d003      	beq.n	8005800 <_fwalk_sglue+0x38>
 80057f8:	4629      	mov	r1, r5
 80057fa:	4638      	mov	r0, r7
 80057fc:	47c0      	blx	r8
 80057fe:	4306      	orrs	r6, r0
 8005800:	3568      	adds	r5, #104	@ 0x68
 8005802:	e7e9      	b.n	80057d8 <_fwalk_sglue+0x10>

08005804 <__sread>:
 8005804:	b510      	push	{r4, lr}
 8005806:	460c      	mov	r4, r1
 8005808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580c:	f000 f8d6 	bl	80059bc <_read_r>
 8005810:	2800      	cmp	r0, #0
 8005812:	bfab      	itete	ge
 8005814:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005816:	89a3      	ldrhlt	r3, [r4, #12]
 8005818:	181b      	addge	r3, r3, r0
 800581a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800581e:	bfac      	ite	ge
 8005820:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005822:	81a3      	strhlt	r3, [r4, #12]
 8005824:	bd10      	pop	{r4, pc}

08005826 <__swrite>:
 8005826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800582a:	461f      	mov	r7, r3
 800582c:	898b      	ldrh	r3, [r1, #12]
 800582e:	4605      	mov	r5, r0
 8005830:	05db      	lsls	r3, r3, #23
 8005832:	460c      	mov	r4, r1
 8005834:	4616      	mov	r6, r2
 8005836:	d505      	bpl.n	8005844 <__swrite+0x1e>
 8005838:	2302      	movs	r3, #2
 800583a:	2200      	movs	r2, #0
 800583c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005840:	f000 f8aa 	bl	8005998 <_lseek_r>
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	4632      	mov	r2, r6
 8005848:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800584c:	81a3      	strh	r3, [r4, #12]
 800584e:	4628      	mov	r0, r5
 8005850:	463b      	mov	r3, r7
 8005852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800585a:	f000 b8c1 	b.w	80059e0 <_write_r>

0800585e <__sseek>:
 800585e:	b510      	push	{r4, lr}
 8005860:	460c      	mov	r4, r1
 8005862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005866:	f000 f897 	bl	8005998 <_lseek_r>
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	bf15      	itete	ne
 8005870:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005872:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005876:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800587a:	81a3      	strheq	r3, [r4, #12]
 800587c:	bf18      	it	ne
 800587e:	81a3      	strhne	r3, [r4, #12]
 8005880:	bd10      	pop	{r4, pc}

08005882 <__sclose>:
 8005882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005886:	f000 b877 	b.w	8005978 <_close_r>

0800588a <memset>:
 800588a:	4603      	mov	r3, r0
 800588c:	4402      	add	r2, r0
 800588e:	4293      	cmp	r3, r2
 8005890:	d100      	bne.n	8005894 <memset+0xa>
 8005892:	4770      	bx	lr
 8005894:	f803 1b01 	strb.w	r1, [r3], #1
 8005898:	e7f9      	b.n	800588e <memset+0x4>

0800589a <strncmp>:
 800589a:	b510      	push	{r4, lr}
 800589c:	b16a      	cbz	r2, 80058ba <strncmp+0x20>
 800589e:	3901      	subs	r1, #1
 80058a0:	1884      	adds	r4, r0, r2
 80058a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d103      	bne.n	80058b6 <strncmp+0x1c>
 80058ae:	42a0      	cmp	r0, r4
 80058b0:	d001      	beq.n	80058b6 <strncmp+0x1c>
 80058b2:	2a00      	cmp	r2, #0
 80058b4:	d1f5      	bne.n	80058a2 <strncmp+0x8>
 80058b6:	1ad0      	subs	r0, r2, r3
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	4610      	mov	r0, r2
 80058bc:	e7fc      	b.n	80058b8 <strncmp+0x1e>
	...

080058c0 <strtok>:
 80058c0:	4b16      	ldr	r3, [pc, #88]	@ (800591c <strtok+0x5c>)
 80058c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c6:	681f      	ldr	r7, [r3, #0]
 80058c8:	4605      	mov	r5, r0
 80058ca:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80058cc:	460e      	mov	r6, r1
 80058ce:	b9ec      	cbnz	r4, 800590c <strtok+0x4c>
 80058d0:	2050      	movs	r0, #80	@ 0x50
 80058d2:	f000 fc7d 	bl	80061d0 <malloc>
 80058d6:	4602      	mov	r2, r0
 80058d8:	6478      	str	r0, [r7, #68]	@ 0x44
 80058da:	b920      	cbnz	r0, 80058e6 <strtok+0x26>
 80058dc:	215b      	movs	r1, #91	@ 0x5b
 80058de:	4b10      	ldr	r3, [pc, #64]	@ (8005920 <strtok+0x60>)
 80058e0:	4810      	ldr	r0, [pc, #64]	@ (8005924 <strtok+0x64>)
 80058e2:	f000 f8d5 	bl	8005a90 <__assert_func>
 80058e6:	e9c0 4400 	strd	r4, r4, [r0]
 80058ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80058ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80058f2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80058f6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80058fa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80058fe:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005902:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005906:	6184      	str	r4, [r0, #24]
 8005908:	7704      	strb	r4, [r0, #28]
 800590a:	6244      	str	r4, [r0, #36]	@ 0x24
 800590c:	4631      	mov	r1, r6
 800590e:	4628      	mov	r0, r5
 8005910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005912:	2301      	movs	r3, #1
 8005914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005918:	f000 b806 	b.w	8005928 <__strtok_r>
 800591c:	20000194 	.word	0x20000194
 8005920:	080077c4 	.word	0x080077c4
 8005924:	080077db 	.word	0x080077db

08005928 <__strtok_r>:
 8005928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592a:	4604      	mov	r4, r0
 800592c:	b908      	cbnz	r0, 8005932 <__strtok_r+0xa>
 800592e:	6814      	ldr	r4, [r2, #0]
 8005930:	b144      	cbz	r4, 8005944 <__strtok_r+0x1c>
 8005932:	460f      	mov	r7, r1
 8005934:	4620      	mov	r0, r4
 8005936:	f814 5b01 	ldrb.w	r5, [r4], #1
 800593a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800593e:	b91e      	cbnz	r6, 8005948 <__strtok_r+0x20>
 8005940:	b965      	cbnz	r5, 800595c <__strtok_r+0x34>
 8005942:	6015      	str	r5, [r2, #0]
 8005944:	2000      	movs	r0, #0
 8005946:	e005      	b.n	8005954 <__strtok_r+0x2c>
 8005948:	42b5      	cmp	r5, r6
 800594a:	d1f6      	bne.n	800593a <__strtok_r+0x12>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1f0      	bne.n	8005932 <__strtok_r+0xa>
 8005950:	6014      	str	r4, [r2, #0]
 8005952:	7003      	strb	r3, [r0, #0]
 8005954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005956:	461c      	mov	r4, r3
 8005958:	e00c      	b.n	8005974 <__strtok_r+0x4c>
 800595a:	b91d      	cbnz	r5, 8005964 <__strtok_r+0x3c>
 800595c:	460e      	mov	r6, r1
 800595e:	4627      	mov	r7, r4
 8005960:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005964:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005968:	42ab      	cmp	r3, r5
 800596a:	d1f6      	bne.n	800595a <__strtok_r+0x32>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f2      	beq.n	8005956 <__strtok_r+0x2e>
 8005970:	2300      	movs	r3, #0
 8005972:	703b      	strb	r3, [r7, #0]
 8005974:	6014      	str	r4, [r2, #0]
 8005976:	e7ed      	b.n	8005954 <__strtok_r+0x2c>

08005978 <_close_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	2300      	movs	r3, #0
 800597c:	4d05      	ldr	r5, [pc, #20]	@ (8005994 <_close_r+0x1c>)
 800597e:	4604      	mov	r4, r0
 8005980:	4608      	mov	r0, r1
 8005982:	602b      	str	r3, [r5, #0]
 8005984:	f7fc fa17 	bl	8001db6 <_close>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d102      	bne.n	8005992 <_close_r+0x1a>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	b103      	cbz	r3, 8005992 <_close_r+0x1a>
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	20000464 	.word	0x20000464

08005998 <_lseek_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4604      	mov	r4, r0
 800599c:	4608      	mov	r0, r1
 800599e:	4611      	mov	r1, r2
 80059a0:	2200      	movs	r2, #0
 80059a2:	4d05      	ldr	r5, [pc, #20]	@ (80059b8 <_lseek_r+0x20>)
 80059a4:	602a      	str	r2, [r5, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	f7fc fa29 	bl	8001dfe <_lseek>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d102      	bne.n	80059b6 <_lseek_r+0x1e>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	b103      	cbz	r3, 80059b6 <_lseek_r+0x1e>
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	20000464 	.word	0x20000464

080059bc <_read_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4604      	mov	r4, r0
 80059c0:	4608      	mov	r0, r1
 80059c2:	4611      	mov	r1, r2
 80059c4:	2200      	movs	r2, #0
 80059c6:	4d05      	ldr	r5, [pc, #20]	@ (80059dc <_read_r+0x20>)
 80059c8:	602a      	str	r2, [r5, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	f7fc f9ba 	bl	8001d44 <_read>
 80059d0:	1c43      	adds	r3, r0, #1
 80059d2:	d102      	bne.n	80059da <_read_r+0x1e>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	b103      	cbz	r3, 80059da <_read_r+0x1e>
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	bd38      	pop	{r3, r4, r5, pc}
 80059dc:	20000464 	.word	0x20000464

080059e0 <_write_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4604      	mov	r4, r0
 80059e4:	4608      	mov	r0, r1
 80059e6:	4611      	mov	r1, r2
 80059e8:	2200      	movs	r2, #0
 80059ea:	4d05      	ldr	r5, [pc, #20]	@ (8005a00 <_write_r+0x20>)
 80059ec:	602a      	str	r2, [r5, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	f7fc f9c5 	bl	8001d7e <_write>
 80059f4:	1c43      	adds	r3, r0, #1
 80059f6:	d102      	bne.n	80059fe <_write_r+0x1e>
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	b103      	cbz	r3, 80059fe <_write_r+0x1e>
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	bd38      	pop	{r3, r4, r5, pc}
 8005a00:	20000464 	.word	0x20000464

08005a04 <__errno>:
 8005a04:	4b01      	ldr	r3, [pc, #4]	@ (8005a0c <__errno+0x8>)
 8005a06:	6818      	ldr	r0, [r3, #0]
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	20000194 	.word	0x20000194

08005a10 <__libc_init_array>:
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	2600      	movs	r6, #0
 8005a14:	4d0c      	ldr	r5, [pc, #48]	@ (8005a48 <__libc_init_array+0x38>)
 8005a16:	4c0d      	ldr	r4, [pc, #52]	@ (8005a4c <__libc_init_array+0x3c>)
 8005a18:	1b64      	subs	r4, r4, r5
 8005a1a:	10a4      	asrs	r4, r4, #2
 8005a1c:	42a6      	cmp	r6, r4
 8005a1e:	d109      	bne.n	8005a34 <__libc_init_array+0x24>
 8005a20:	f001 fe96 	bl	8007750 <_init>
 8005a24:	2600      	movs	r6, #0
 8005a26:	4d0a      	ldr	r5, [pc, #40]	@ (8005a50 <__libc_init_array+0x40>)
 8005a28:	4c0a      	ldr	r4, [pc, #40]	@ (8005a54 <__libc_init_array+0x44>)
 8005a2a:	1b64      	subs	r4, r4, r5
 8005a2c:	10a4      	asrs	r4, r4, #2
 8005a2e:	42a6      	cmp	r6, r4
 8005a30:	d105      	bne.n	8005a3e <__libc_init_array+0x2e>
 8005a32:	bd70      	pop	{r4, r5, r6, pc}
 8005a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a38:	4798      	blx	r3
 8005a3a:	3601      	adds	r6, #1
 8005a3c:	e7ee      	b.n	8005a1c <__libc_init_array+0xc>
 8005a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a42:	4798      	blx	r3
 8005a44:	3601      	adds	r6, #1
 8005a46:	e7f2      	b.n	8005a2e <__libc_init_array+0x1e>
 8005a48:	08007bd0 	.word	0x08007bd0
 8005a4c:	08007bd0 	.word	0x08007bd0
 8005a50:	08007bd0 	.word	0x08007bd0
 8005a54:	08007bd4 	.word	0x08007bd4

08005a58 <__retarget_lock_init_recursive>:
 8005a58:	4770      	bx	lr

08005a5a <__retarget_lock_acquire_recursive>:
 8005a5a:	4770      	bx	lr

08005a5c <__retarget_lock_release_recursive>:
 8005a5c:	4770      	bx	lr

08005a5e <memcpy>:
 8005a5e:	440a      	add	r2, r1
 8005a60:	4291      	cmp	r1, r2
 8005a62:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a66:	d100      	bne.n	8005a6a <memcpy+0xc>
 8005a68:	4770      	bx	lr
 8005a6a:	b510      	push	{r4, lr}
 8005a6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a70:	4291      	cmp	r1, r2
 8005a72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a76:	d1f9      	bne.n	8005a6c <memcpy+0xe>
 8005a78:	bd10      	pop	{r4, pc}
	...

08005a7c <nan>:
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	4901      	ldr	r1, [pc, #4]	@ (8005a84 <nan+0x8>)
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	7ff80000 	.word	0x7ff80000

08005a88 <nanf>:
 8005a88:	4800      	ldr	r0, [pc, #0]	@ (8005a8c <nanf+0x4>)
 8005a8a:	4770      	bx	lr
 8005a8c:	7fc00000 	.word	0x7fc00000

08005a90 <__assert_func>:
 8005a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a92:	4614      	mov	r4, r2
 8005a94:	461a      	mov	r2, r3
 8005a96:	4b09      	ldr	r3, [pc, #36]	@ (8005abc <__assert_func+0x2c>)
 8005a98:	4605      	mov	r5, r0
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68d8      	ldr	r0, [r3, #12]
 8005a9e:	b14c      	cbz	r4, 8005ab4 <__assert_func+0x24>
 8005aa0:	4b07      	ldr	r3, [pc, #28]	@ (8005ac0 <__assert_func+0x30>)
 8005aa2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005aa6:	9100      	str	r1, [sp, #0]
 8005aa8:	462b      	mov	r3, r5
 8005aaa:	4906      	ldr	r1, [pc, #24]	@ (8005ac4 <__assert_func+0x34>)
 8005aac:	f001 f9ae 	bl	8006e0c <fiprintf>
 8005ab0:	f001 f9ce 	bl	8006e50 <abort>
 8005ab4:	4b04      	ldr	r3, [pc, #16]	@ (8005ac8 <__assert_func+0x38>)
 8005ab6:	461c      	mov	r4, r3
 8005ab8:	e7f3      	b.n	8005aa2 <__assert_func+0x12>
 8005aba:	bf00      	nop
 8005abc:	20000194 	.word	0x20000194
 8005ac0:	0800783d 	.word	0x0800783d
 8005ac4:	0800784a 	.word	0x0800784a
 8005ac8:	08007878 	.word	0x08007878

08005acc <_free_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4605      	mov	r5, r0
 8005ad0:	2900      	cmp	r1, #0
 8005ad2:	d040      	beq.n	8005b56 <_free_r+0x8a>
 8005ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ad8:	1f0c      	subs	r4, r1, #4
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bfb8      	it	lt
 8005ade:	18e4      	addlt	r4, r4, r3
 8005ae0:	f000 fc32 	bl	8006348 <__malloc_lock>
 8005ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b58 <_free_r+0x8c>)
 8005ae6:	6813      	ldr	r3, [r2, #0]
 8005ae8:	b933      	cbnz	r3, 8005af8 <_free_r+0x2c>
 8005aea:	6063      	str	r3, [r4, #4]
 8005aec:	6014      	str	r4, [r2, #0]
 8005aee:	4628      	mov	r0, r5
 8005af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005af4:	f000 bc2e 	b.w	8006354 <__malloc_unlock>
 8005af8:	42a3      	cmp	r3, r4
 8005afa:	d908      	bls.n	8005b0e <_free_r+0x42>
 8005afc:	6820      	ldr	r0, [r4, #0]
 8005afe:	1821      	adds	r1, r4, r0
 8005b00:	428b      	cmp	r3, r1
 8005b02:	bf01      	itttt	eq
 8005b04:	6819      	ldreq	r1, [r3, #0]
 8005b06:	685b      	ldreq	r3, [r3, #4]
 8005b08:	1809      	addeq	r1, r1, r0
 8005b0a:	6021      	streq	r1, [r4, #0]
 8005b0c:	e7ed      	b.n	8005aea <_free_r+0x1e>
 8005b0e:	461a      	mov	r2, r3
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	b10b      	cbz	r3, 8005b18 <_free_r+0x4c>
 8005b14:	42a3      	cmp	r3, r4
 8005b16:	d9fa      	bls.n	8005b0e <_free_r+0x42>
 8005b18:	6811      	ldr	r1, [r2, #0]
 8005b1a:	1850      	adds	r0, r2, r1
 8005b1c:	42a0      	cmp	r0, r4
 8005b1e:	d10b      	bne.n	8005b38 <_free_r+0x6c>
 8005b20:	6820      	ldr	r0, [r4, #0]
 8005b22:	4401      	add	r1, r0
 8005b24:	1850      	adds	r0, r2, r1
 8005b26:	4283      	cmp	r3, r0
 8005b28:	6011      	str	r1, [r2, #0]
 8005b2a:	d1e0      	bne.n	8005aee <_free_r+0x22>
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4408      	add	r0, r1
 8005b32:	6010      	str	r0, [r2, #0]
 8005b34:	6053      	str	r3, [r2, #4]
 8005b36:	e7da      	b.n	8005aee <_free_r+0x22>
 8005b38:	d902      	bls.n	8005b40 <_free_r+0x74>
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	602b      	str	r3, [r5, #0]
 8005b3e:	e7d6      	b.n	8005aee <_free_r+0x22>
 8005b40:	6820      	ldr	r0, [r4, #0]
 8005b42:	1821      	adds	r1, r4, r0
 8005b44:	428b      	cmp	r3, r1
 8005b46:	bf01      	itttt	eq
 8005b48:	6819      	ldreq	r1, [r3, #0]
 8005b4a:	685b      	ldreq	r3, [r3, #4]
 8005b4c:	1809      	addeq	r1, r1, r0
 8005b4e:	6021      	streq	r1, [r4, #0]
 8005b50:	6063      	str	r3, [r4, #4]
 8005b52:	6054      	str	r4, [r2, #4]
 8005b54:	e7cb      	b.n	8005aee <_free_r+0x22>
 8005b56:	bd38      	pop	{r3, r4, r5, pc}
 8005b58:	20000470 	.word	0x20000470

08005b5c <rshift>:
 8005b5c:	6903      	ldr	r3, [r0, #16]
 8005b5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005b66:	f100 0414 	add.w	r4, r0, #20
 8005b6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005b6e:	dd46      	ble.n	8005bfe <rshift+0xa2>
 8005b70:	f011 011f 	ands.w	r1, r1, #31
 8005b74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005b78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005b7c:	d10c      	bne.n	8005b98 <rshift+0x3c>
 8005b7e:	4629      	mov	r1, r5
 8005b80:	f100 0710 	add.w	r7, r0, #16
 8005b84:	42b1      	cmp	r1, r6
 8005b86:	d335      	bcc.n	8005bf4 <rshift+0x98>
 8005b88:	1a9b      	subs	r3, r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	1eea      	subs	r2, r5, #3
 8005b8e:	4296      	cmp	r6, r2
 8005b90:	bf38      	it	cc
 8005b92:	2300      	movcc	r3, #0
 8005b94:	4423      	add	r3, r4
 8005b96:	e015      	b.n	8005bc4 <rshift+0x68>
 8005b98:	46a1      	mov	r9, r4
 8005b9a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005b9e:	f1c1 0820 	rsb	r8, r1, #32
 8005ba2:	40cf      	lsrs	r7, r1
 8005ba4:	f105 0e04 	add.w	lr, r5, #4
 8005ba8:	4576      	cmp	r6, lr
 8005baa:	46f4      	mov	ip, lr
 8005bac:	d816      	bhi.n	8005bdc <rshift+0x80>
 8005bae:	1a9a      	subs	r2, r3, r2
 8005bb0:	0092      	lsls	r2, r2, #2
 8005bb2:	3a04      	subs	r2, #4
 8005bb4:	3501      	adds	r5, #1
 8005bb6:	42ae      	cmp	r6, r5
 8005bb8:	bf38      	it	cc
 8005bba:	2200      	movcc	r2, #0
 8005bbc:	18a3      	adds	r3, r4, r2
 8005bbe:	50a7      	str	r7, [r4, r2]
 8005bc0:	b107      	cbz	r7, 8005bc4 <rshift+0x68>
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	42a3      	cmp	r3, r4
 8005bc6:	eba3 0204 	sub.w	r2, r3, r4
 8005bca:	bf08      	it	eq
 8005bcc:	2300      	moveq	r3, #0
 8005bce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005bd2:	6102      	str	r2, [r0, #16]
 8005bd4:	bf08      	it	eq
 8005bd6:	6143      	streq	r3, [r0, #20]
 8005bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bdc:	f8dc c000 	ldr.w	ip, [ip]
 8005be0:	fa0c fc08 	lsl.w	ip, ip, r8
 8005be4:	ea4c 0707 	orr.w	r7, ip, r7
 8005be8:	f849 7b04 	str.w	r7, [r9], #4
 8005bec:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005bf0:	40cf      	lsrs	r7, r1
 8005bf2:	e7d9      	b.n	8005ba8 <rshift+0x4c>
 8005bf4:	f851 cb04 	ldr.w	ip, [r1], #4
 8005bf8:	f847 cf04 	str.w	ip, [r7, #4]!
 8005bfc:	e7c2      	b.n	8005b84 <rshift+0x28>
 8005bfe:	4623      	mov	r3, r4
 8005c00:	e7e0      	b.n	8005bc4 <rshift+0x68>

08005c02 <__hexdig_fun>:
 8005c02:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8005c06:	2b09      	cmp	r3, #9
 8005c08:	d802      	bhi.n	8005c10 <__hexdig_fun+0xe>
 8005c0a:	3820      	subs	r0, #32
 8005c0c:	b2c0      	uxtb	r0, r0
 8005c0e:	4770      	bx	lr
 8005c10:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8005c14:	2b05      	cmp	r3, #5
 8005c16:	d801      	bhi.n	8005c1c <__hexdig_fun+0x1a>
 8005c18:	3847      	subs	r0, #71	@ 0x47
 8005c1a:	e7f7      	b.n	8005c0c <__hexdig_fun+0xa>
 8005c1c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8005c20:	2b05      	cmp	r3, #5
 8005c22:	d801      	bhi.n	8005c28 <__hexdig_fun+0x26>
 8005c24:	3827      	subs	r0, #39	@ 0x27
 8005c26:	e7f1      	b.n	8005c0c <__hexdig_fun+0xa>
 8005c28:	2000      	movs	r0, #0
 8005c2a:	4770      	bx	lr

08005c2c <__gethex>:
 8005c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c30:	468a      	mov	sl, r1
 8005c32:	4690      	mov	r8, r2
 8005c34:	b085      	sub	sp, #20
 8005c36:	9302      	str	r3, [sp, #8]
 8005c38:	680b      	ldr	r3, [r1, #0]
 8005c3a:	9001      	str	r0, [sp, #4]
 8005c3c:	1c9c      	adds	r4, r3, #2
 8005c3e:	46a1      	mov	r9, r4
 8005c40:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005c44:	2830      	cmp	r0, #48	@ 0x30
 8005c46:	d0fa      	beq.n	8005c3e <__gethex+0x12>
 8005c48:	eba9 0303 	sub.w	r3, r9, r3
 8005c4c:	f1a3 0b02 	sub.w	fp, r3, #2
 8005c50:	f7ff ffd7 	bl	8005c02 <__hexdig_fun>
 8005c54:	4605      	mov	r5, r0
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d168      	bne.n	8005d2c <__gethex+0x100>
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	4648      	mov	r0, r9
 8005c5e:	499f      	ldr	r1, [pc, #636]	@ (8005edc <__gethex+0x2b0>)
 8005c60:	f7ff fe1b 	bl	800589a <strncmp>
 8005c64:	4607      	mov	r7, r0
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d167      	bne.n	8005d3a <__gethex+0x10e>
 8005c6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005c6e:	4626      	mov	r6, r4
 8005c70:	f7ff ffc7 	bl	8005c02 <__hexdig_fun>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d062      	beq.n	8005d3e <__gethex+0x112>
 8005c78:	4623      	mov	r3, r4
 8005c7a:	7818      	ldrb	r0, [r3, #0]
 8005c7c:	4699      	mov	r9, r3
 8005c7e:	2830      	cmp	r0, #48	@ 0x30
 8005c80:	f103 0301 	add.w	r3, r3, #1
 8005c84:	d0f9      	beq.n	8005c7a <__gethex+0x4e>
 8005c86:	f7ff ffbc 	bl	8005c02 <__hexdig_fun>
 8005c8a:	fab0 f580 	clz	r5, r0
 8005c8e:	f04f 0b01 	mov.w	fp, #1
 8005c92:	096d      	lsrs	r5, r5, #5
 8005c94:	464a      	mov	r2, r9
 8005c96:	4616      	mov	r6, r2
 8005c98:	7830      	ldrb	r0, [r6, #0]
 8005c9a:	3201      	adds	r2, #1
 8005c9c:	f7ff ffb1 	bl	8005c02 <__hexdig_fun>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d1f8      	bne.n	8005c96 <__gethex+0x6a>
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	498c      	ldr	r1, [pc, #560]	@ (8005edc <__gethex+0x2b0>)
 8005caa:	f7ff fdf6 	bl	800589a <strncmp>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	d13f      	bne.n	8005d32 <__gethex+0x106>
 8005cb2:	b944      	cbnz	r4, 8005cc6 <__gethex+0x9a>
 8005cb4:	1c74      	adds	r4, r6, #1
 8005cb6:	4622      	mov	r2, r4
 8005cb8:	4616      	mov	r6, r2
 8005cba:	7830      	ldrb	r0, [r6, #0]
 8005cbc:	3201      	adds	r2, #1
 8005cbe:	f7ff ffa0 	bl	8005c02 <__hexdig_fun>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d1f8      	bne.n	8005cb8 <__gethex+0x8c>
 8005cc6:	1ba4      	subs	r4, r4, r6
 8005cc8:	00a7      	lsls	r7, r4, #2
 8005cca:	7833      	ldrb	r3, [r6, #0]
 8005ccc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005cd0:	2b50      	cmp	r3, #80	@ 0x50
 8005cd2:	d13e      	bne.n	8005d52 <__gethex+0x126>
 8005cd4:	7873      	ldrb	r3, [r6, #1]
 8005cd6:	2b2b      	cmp	r3, #43	@ 0x2b
 8005cd8:	d033      	beq.n	8005d42 <__gethex+0x116>
 8005cda:	2b2d      	cmp	r3, #45	@ 0x2d
 8005cdc:	d034      	beq.n	8005d48 <__gethex+0x11c>
 8005cde:	2400      	movs	r4, #0
 8005ce0:	1c71      	adds	r1, r6, #1
 8005ce2:	7808      	ldrb	r0, [r1, #0]
 8005ce4:	f7ff ff8d 	bl	8005c02 <__hexdig_fun>
 8005ce8:	1e43      	subs	r3, r0, #1
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b18      	cmp	r3, #24
 8005cee:	d830      	bhi.n	8005d52 <__gethex+0x126>
 8005cf0:	f1a0 0210 	sub.w	r2, r0, #16
 8005cf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005cf8:	f7ff ff83 	bl	8005c02 <__hexdig_fun>
 8005cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8005d00:	fa5f fc8c 	uxtb.w	ip, ip
 8005d04:	f1bc 0f18 	cmp.w	ip, #24
 8005d08:	f04f 030a 	mov.w	r3, #10
 8005d0c:	d91e      	bls.n	8005d4c <__gethex+0x120>
 8005d0e:	b104      	cbz	r4, 8005d12 <__gethex+0xe6>
 8005d10:	4252      	negs	r2, r2
 8005d12:	4417      	add	r7, r2
 8005d14:	f8ca 1000 	str.w	r1, [sl]
 8005d18:	b1ed      	cbz	r5, 8005d56 <__gethex+0x12a>
 8005d1a:	f1bb 0f00 	cmp.w	fp, #0
 8005d1e:	bf0c      	ite	eq
 8005d20:	2506      	moveq	r5, #6
 8005d22:	2500      	movne	r5, #0
 8005d24:	4628      	mov	r0, r5
 8005d26:	b005      	add	sp, #20
 8005d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d2c:	2500      	movs	r5, #0
 8005d2e:	462c      	mov	r4, r5
 8005d30:	e7b0      	b.n	8005c94 <__gethex+0x68>
 8005d32:	2c00      	cmp	r4, #0
 8005d34:	d1c7      	bne.n	8005cc6 <__gethex+0x9a>
 8005d36:	4627      	mov	r7, r4
 8005d38:	e7c7      	b.n	8005cca <__gethex+0x9e>
 8005d3a:	464e      	mov	r6, r9
 8005d3c:	462f      	mov	r7, r5
 8005d3e:	2501      	movs	r5, #1
 8005d40:	e7c3      	b.n	8005cca <__gethex+0x9e>
 8005d42:	2400      	movs	r4, #0
 8005d44:	1cb1      	adds	r1, r6, #2
 8005d46:	e7cc      	b.n	8005ce2 <__gethex+0xb6>
 8005d48:	2401      	movs	r4, #1
 8005d4a:	e7fb      	b.n	8005d44 <__gethex+0x118>
 8005d4c:	fb03 0002 	mla	r0, r3, r2, r0
 8005d50:	e7ce      	b.n	8005cf0 <__gethex+0xc4>
 8005d52:	4631      	mov	r1, r6
 8005d54:	e7de      	b.n	8005d14 <__gethex+0xe8>
 8005d56:	4629      	mov	r1, r5
 8005d58:	eba6 0309 	sub.w	r3, r6, r9
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	2b07      	cmp	r3, #7
 8005d60:	dc0a      	bgt.n	8005d78 <__gethex+0x14c>
 8005d62:	9801      	ldr	r0, [sp, #4]
 8005d64:	f000 fafc 	bl	8006360 <_Balloc>
 8005d68:	4604      	mov	r4, r0
 8005d6a:	b940      	cbnz	r0, 8005d7e <__gethex+0x152>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	21e4      	movs	r1, #228	@ 0xe4
 8005d70:	4b5b      	ldr	r3, [pc, #364]	@ (8005ee0 <__gethex+0x2b4>)
 8005d72:	485c      	ldr	r0, [pc, #368]	@ (8005ee4 <__gethex+0x2b8>)
 8005d74:	f7ff fe8c 	bl	8005a90 <__assert_func>
 8005d78:	3101      	adds	r1, #1
 8005d7a:	105b      	asrs	r3, r3, #1
 8005d7c:	e7ef      	b.n	8005d5e <__gethex+0x132>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f100 0a14 	add.w	sl, r0, #20
 8005d84:	4655      	mov	r5, sl
 8005d86:	469b      	mov	fp, r3
 8005d88:	45b1      	cmp	r9, r6
 8005d8a:	d337      	bcc.n	8005dfc <__gethex+0x1d0>
 8005d8c:	f845 bb04 	str.w	fp, [r5], #4
 8005d90:	eba5 050a 	sub.w	r5, r5, sl
 8005d94:	10ad      	asrs	r5, r5, #2
 8005d96:	6125      	str	r5, [r4, #16]
 8005d98:	4658      	mov	r0, fp
 8005d9a:	f000 fbd3 	bl	8006544 <__hi0bits>
 8005d9e:	016d      	lsls	r5, r5, #5
 8005da0:	f8d8 6000 	ldr.w	r6, [r8]
 8005da4:	1a2d      	subs	r5, r5, r0
 8005da6:	42b5      	cmp	r5, r6
 8005da8:	dd54      	ble.n	8005e54 <__gethex+0x228>
 8005daa:	1bad      	subs	r5, r5, r6
 8005dac:	4629      	mov	r1, r5
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 ff55 	bl	8006c5e <__any_on>
 8005db4:	4681      	mov	r9, r0
 8005db6:	b178      	cbz	r0, 8005dd8 <__gethex+0x1ac>
 8005db8:	f04f 0901 	mov.w	r9, #1
 8005dbc:	1e6b      	subs	r3, r5, #1
 8005dbe:	1159      	asrs	r1, r3, #5
 8005dc0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005dc4:	f003 021f 	and.w	r2, r3, #31
 8005dc8:	fa09 f202 	lsl.w	r2, r9, r2
 8005dcc:	420a      	tst	r2, r1
 8005dce:	d003      	beq.n	8005dd8 <__gethex+0x1ac>
 8005dd0:	454b      	cmp	r3, r9
 8005dd2:	dc36      	bgt.n	8005e42 <__gethex+0x216>
 8005dd4:	f04f 0902 	mov.w	r9, #2
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7ff febe 	bl	8005b5c <rshift>
 8005de0:	442f      	add	r7, r5
 8005de2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005de6:	42bb      	cmp	r3, r7
 8005de8:	da42      	bge.n	8005e70 <__gethex+0x244>
 8005dea:	4621      	mov	r1, r4
 8005dec:	9801      	ldr	r0, [sp, #4]
 8005dee:	f000 faf7 	bl	80063e0 <_Bfree>
 8005df2:	2300      	movs	r3, #0
 8005df4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005df6:	25a3      	movs	r5, #163	@ 0xa3
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	e793      	b.n	8005d24 <__gethex+0xf8>
 8005dfc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005e00:	2a2e      	cmp	r2, #46	@ 0x2e
 8005e02:	d012      	beq.n	8005e2a <__gethex+0x1fe>
 8005e04:	2b20      	cmp	r3, #32
 8005e06:	d104      	bne.n	8005e12 <__gethex+0x1e6>
 8005e08:	f845 bb04 	str.w	fp, [r5], #4
 8005e0c:	f04f 0b00 	mov.w	fp, #0
 8005e10:	465b      	mov	r3, fp
 8005e12:	7830      	ldrb	r0, [r6, #0]
 8005e14:	9303      	str	r3, [sp, #12]
 8005e16:	f7ff fef4 	bl	8005c02 <__hexdig_fun>
 8005e1a:	9b03      	ldr	r3, [sp, #12]
 8005e1c:	f000 000f 	and.w	r0, r0, #15
 8005e20:	4098      	lsls	r0, r3
 8005e22:	ea4b 0b00 	orr.w	fp, fp, r0
 8005e26:	3304      	adds	r3, #4
 8005e28:	e7ae      	b.n	8005d88 <__gethex+0x15c>
 8005e2a:	45b1      	cmp	r9, r6
 8005e2c:	d8ea      	bhi.n	8005e04 <__gethex+0x1d8>
 8005e2e:	2201      	movs	r2, #1
 8005e30:	4630      	mov	r0, r6
 8005e32:	492a      	ldr	r1, [pc, #168]	@ (8005edc <__gethex+0x2b0>)
 8005e34:	9303      	str	r3, [sp, #12]
 8005e36:	f7ff fd30 	bl	800589a <strncmp>
 8005e3a:	9b03      	ldr	r3, [sp, #12]
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d1e1      	bne.n	8005e04 <__gethex+0x1d8>
 8005e40:	e7a2      	b.n	8005d88 <__gethex+0x15c>
 8005e42:	4620      	mov	r0, r4
 8005e44:	1ea9      	subs	r1, r5, #2
 8005e46:	f000 ff0a 	bl	8006c5e <__any_on>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d0c2      	beq.n	8005dd4 <__gethex+0x1a8>
 8005e4e:	f04f 0903 	mov.w	r9, #3
 8005e52:	e7c1      	b.n	8005dd8 <__gethex+0x1ac>
 8005e54:	da09      	bge.n	8005e6a <__gethex+0x23e>
 8005e56:	1b75      	subs	r5, r6, r5
 8005e58:	4621      	mov	r1, r4
 8005e5a:	462a      	mov	r2, r5
 8005e5c:	9801      	ldr	r0, [sp, #4]
 8005e5e:	f000 fccf 	bl	8006800 <__lshift>
 8005e62:	4604      	mov	r4, r0
 8005e64:	1b7f      	subs	r7, r7, r5
 8005e66:	f100 0a14 	add.w	sl, r0, #20
 8005e6a:	f04f 0900 	mov.w	r9, #0
 8005e6e:	e7b8      	b.n	8005de2 <__gethex+0x1b6>
 8005e70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005e74:	42bd      	cmp	r5, r7
 8005e76:	dd6f      	ble.n	8005f58 <__gethex+0x32c>
 8005e78:	1bed      	subs	r5, r5, r7
 8005e7a:	42ae      	cmp	r6, r5
 8005e7c:	dc34      	bgt.n	8005ee8 <__gethex+0x2bc>
 8005e7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d022      	beq.n	8005ecc <__gethex+0x2a0>
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d024      	beq.n	8005ed4 <__gethex+0x2a8>
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d115      	bne.n	8005eba <__gethex+0x28e>
 8005e8e:	42ae      	cmp	r6, r5
 8005e90:	d113      	bne.n	8005eba <__gethex+0x28e>
 8005e92:	2e01      	cmp	r6, #1
 8005e94:	d10b      	bne.n	8005eae <__gethex+0x282>
 8005e96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005e9a:	9a02      	ldr	r2, [sp, #8]
 8005e9c:	2562      	movs	r5, #98	@ 0x62
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	6123      	str	r3, [r4, #16]
 8005ea4:	f8ca 3000 	str.w	r3, [sl]
 8005ea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005eaa:	601c      	str	r4, [r3, #0]
 8005eac:	e73a      	b.n	8005d24 <__gethex+0xf8>
 8005eae:	4620      	mov	r0, r4
 8005eb0:	1e71      	subs	r1, r6, #1
 8005eb2:	f000 fed4 	bl	8006c5e <__any_on>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d1ed      	bne.n	8005e96 <__gethex+0x26a>
 8005eba:	4621      	mov	r1, r4
 8005ebc:	9801      	ldr	r0, [sp, #4]
 8005ebe:	f000 fa8f 	bl	80063e0 <_Bfree>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ec6:	2550      	movs	r5, #80	@ 0x50
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	e72b      	b.n	8005d24 <__gethex+0xf8>
 8005ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f3      	bne.n	8005eba <__gethex+0x28e>
 8005ed2:	e7e0      	b.n	8005e96 <__gethex+0x26a>
 8005ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1dd      	bne.n	8005e96 <__gethex+0x26a>
 8005eda:	e7ee      	b.n	8005eba <__gethex+0x28e>
 8005edc:	080077b6 	.word	0x080077b6
 8005ee0:	08007879 	.word	0x08007879
 8005ee4:	0800788a 	.word	0x0800788a
 8005ee8:	1e6f      	subs	r7, r5, #1
 8005eea:	f1b9 0f00 	cmp.w	r9, #0
 8005eee:	d130      	bne.n	8005f52 <__gethex+0x326>
 8005ef0:	b127      	cbz	r7, 8005efc <__gethex+0x2d0>
 8005ef2:	4639      	mov	r1, r7
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f000 feb2 	bl	8006c5e <__any_on>
 8005efa:	4681      	mov	r9, r0
 8005efc:	2301      	movs	r3, #1
 8005efe:	4629      	mov	r1, r5
 8005f00:	1b76      	subs	r6, r6, r5
 8005f02:	2502      	movs	r5, #2
 8005f04:	117a      	asrs	r2, r7, #5
 8005f06:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005f0a:	f007 071f 	and.w	r7, r7, #31
 8005f0e:	40bb      	lsls	r3, r7
 8005f10:	4213      	tst	r3, r2
 8005f12:	4620      	mov	r0, r4
 8005f14:	bf18      	it	ne
 8005f16:	f049 0902 	orrne.w	r9, r9, #2
 8005f1a:	f7ff fe1f 	bl	8005b5c <rshift>
 8005f1e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8005f22:	f1b9 0f00 	cmp.w	r9, #0
 8005f26:	d047      	beq.n	8005fb8 <__gethex+0x38c>
 8005f28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d015      	beq.n	8005f5c <__gethex+0x330>
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d017      	beq.n	8005f64 <__gethex+0x338>
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d109      	bne.n	8005f4c <__gethex+0x320>
 8005f38:	f019 0f02 	tst.w	r9, #2
 8005f3c:	d006      	beq.n	8005f4c <__gethex+0x320>
 8005f3e:	f8da 3000 	ldr.w	r3, [sl]
 8005f42:	ea49 0903 	orr.w	r9, r9, r3
 8005f46:	f019 0f01 	tst.w	r9, #1
 8005f4a:	d10e      	bne.n	8005f6a <__gethex+0x33e>
 8005f4c:	f045 0510 	orr.w	r5, r5, #16
 8005f50:	e032      	b.n	8005fb8 <__gethex+0x38c>
 8005f52:	f04f 0901 	mov.w	r9, #1
 8005f56:	e7d1      	b.n	8005efc <__gethex+0x2d0>
 8005f58:	2501      	movs	r5, #1
 8005f5a:	e7e2      	b.n	8005f22 <__gethex+0x2f6>
 8005f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f5e:	f1c3 0301 	rsb	r3, r3, #1
 8005f62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0f0      	beq.n	8005f4c <__gethex+0x320>
 8005f6a:	f04f 0c00 	mov.w	ip, #0
 8005f6e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005f72:	f104 0314 	add.w	r3, r4, #20
 8005f76:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005f7a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f84:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005f88:	d01b      	beq.n	8005fc2 <__gethex+0x396>
 8005f8a:	3201      	adds	r2, #1
 8005f8c:	6002      	str	r2, [r0, #0]
 8005f8e:	2d02      	cmp	r5, #2
 8005f90:	f104 0314 	add.w	r3, r4, #20
 8005f94:	d13c      	bne.n	8006010 <__gethex+0x3e4>
 8005f96:	f8d8 2000 	ldr.w	r2, [r8]
 8005f9a:	3a01      	subs	r2, #1
 8005f9c:	42b2      	cmp	r2, r6
 8005f9e:	d109      	bne.n	8005fb4 <__gethex+0x388>
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	1171      	asrs	r1, r6, #5
 8005fa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005fa8:	f006 061f 	and.w	r6, r6, #31
 8005fac:	fa02 f606 	lsl.w	r6, r2, r6
 8005fb0:	421e      	tst	r6, r3
 8005fb2:	d13a      	bne.n	800602a <__gethex+0x3fe>
 8005fb4:	f045 0520 	orr.w	r5, r5, #32
 8005fb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fba:	601c      	str	r4, [r3, #0]
 8005fbc:	9b02      	ldr	r3, [sp, #8]
 8005fbe:	601f      	str	r7, [r3, #0]
 8005fc0:	e6b0      	b.n	8005d24 <__gethex+0xf8>
 8005fc2:	4299      	cmp	r1, r3
 8005fc4:	f843 cc04 	str.w	ip, [r3, #-4]
 8005fc8:	d8d9      	bhi.n	8005f7e <__gethex+0x352>
 8005fca:	68a3      	ldr	r3, [r4, #8]
 8005fcc:	459b      	cmp	fp, r3
 8005fce:	db17      	blt.n	8006000 <__gethex+0x3d4>
 8005fd0:	6861      	ldr	r1, [r4, #4]
 8005fd2:	9801      	ldr	r0, [sp, #4]
 8005fd4:	3101      	adds	r1, #1
 8005fd6:	f000 f9c3 	bl	8006360 <_Balloc>
 8005fda:	4681      	mov	r9, r0
 8005fdc:	b918      	cbnz	r0, 8005fe6 <__gethex+0x3ba>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	2184      	movs	r1, #132	@ 0x84
 8005fe2:	4b19      	ldr	r3, [pc, #100]	@ (8006048 <__gethex+0x41c>)
 8005fe4:	e6c5      	b.n	8005d72 <__gethex+0x146>
 8005fe6:	6922      	ldr	r2, [r4, #16]
 8005fe8:	f104 010c 	add.w	r1, r4, #12
 8005fec:	3202      	adds	r2, #2
 8005fee:	0092      	lsls	r2, r2, #2
 8005ff0:	300c      	adds	r0, #12
 8005ff2:	f7ff fd34 	bl	8005a5e <memcpy>
 8005ff6:	4621      	mov	r1, r4
 8005ff8:	9801      	ldr	r0, [sp, #4]
 8005ffa:	f000 f9f1 	bl	80063e0 <_Bfree>
 8005ffe:	464c      	mov	r4, r9
 8006000:	6923      	ldr	r3, [r4, #16]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	6122      	str	r2, [r4, #16]
 8006006:	2201      	movs	r2, #1
 8006008:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800600c:	615a      	str	r2, [r3, #20]
 800600e:	e7be      	b.n	8005f8e <__gethex+0x362>
 8006010:	6922      	ldr	r2, [r4, #16]
 8006012:	455a      	cmp	r2, fp
 8006014:	dd0b      	ble.n	800602e <__gethex+0x402>
 8006016:	2101      	movs	r1, #1
 8006018:	4620      	mov	r0, r4
 800601a:	f7ff fd9f 	bl	8005b5c <rshift>
 800601e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006022:	3701      	adds	r7, #1
 8006024:	42bb      	cmp	r3, r7
 8006026:	f6ff aee0 	blt.w	8005dea <__gethex+0x1be>
 800602a:	2501      	movs	r5, #1
 800602c:	e7c2      	b.n	8005fb4 <__gethex+0x388>
 800602e:	f016 061f 	ands.w	r6, r6, #31
 8006032:	d0fa      	beq.n	800602a <__gethex+0x3fe>
 8006034:	4453      	add	r3, sl
 8006036:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800603a:	f000 fa83 	bl	8006544 <__hi0bits>
 800603e:	f1c6 0620 	rsb	r6, r6, #32
 8006042:	42b0      	cmp	r0, r6
 8006044:	dbe7      	blt.n	8006016 <__gethex+0x3ea>
 8006046:	e7f0      	b.n	800602a <__gethex+0x3fe>
 8006048:	08007879 	.word	0x08007879

0800604c <L_shift>:
 800604c:	f1c2 0208 	rsb	r2, r2, #8
 8006050:	0092      	lsls	r2, r2, #2
 8006052:	b570      	push	{r4, r5, r6, lr}
 8006054:	f1c2 0620 	rsb	r6, r2, #32
 8006058:	6843      	ldr	r3, [r0, #4]
 800605a:	6804      	ldr	r4, [r0, #0]
 800605c:	fa03 f506 	lsl.w	r5, r3, r6
 8006060:	432c      	orrs	r4, r5
 8006062:	40d3      	lsrs	r3, r2
 8006064:	6004      	str	r4, [r0, #0]
 8006066:	f840 3f04 	str.w	r3, [r0, #4]!
 800606a:	4288      	cmp	r0, r1
 800606c:	d3f4      	bcc.n	8006058 <L_shift+0xc>
 800606e:	bd70      	pop	{r4, r5, r6, pc}

08006070 <__match>:
 8006070:	b530      	push	{r4, r5, lr}
 8006072:	6803      	ldr	r3, [r0, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800607a:	b914      	cbnz	r4, 8006082 <__match+0x12>
 800607c:	6003      	str	r3, [r0, #0]
 800607e:	2001      	movs	r0, #1
 8006080:	bd30      	pop	{r4, r5, pc}
 8006082:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006086:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800608a:	2d19      	cmp	r5, #25
 800608c:	bf98      	it	ls
 800608e:	3220      	addls	r2, #32
 8006090:	42a2      	cmp	r2, r4
 8006092:	d0f0      	beq.n	8006076 <__match+0x6>
 8006094:	2000      	movs	r0, #0
 8006096:	e7f3      	b.n	8006080 <__match+0x10>

08006098 <__hexnan>:
 8006098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	2500      	movs	r5, #0
 800609e:	680b      	ldr	r3, [r1, #0]
 80060a0:	4682      	mov	sl, r0
 80060a2:	115e      	asrs	r6, r3, #5
 80060a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80060a8:	f013 031f 	ands.w	r3, r3, #31
 80060ac:	bf18      	it	ne
 80060ae:	3604      	addne	r6, #4
 80060b0:	1f37      	subs	r7, r6, #4
 80060b2:	4690      	mov	r8, r2
 80060b4:	46b9      	mov	r9, r7
 80060b6:	463c      	mov	r4, r7
 80060b8:	46ab      	mov	fp, r5
 80060ba:	b087      	sub	sp, #28
 80060bc:	6801      	ldr	r1, [r0, #0]
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	f846 5c04 	str.w	r5, [r6, #-4]
 80060c4:	9502      	str	r5, [sp, #8]
 80060c6:	784a      	ldrb	r2, [r1, #1]
 80060c8:	1c4b      	adds	r3, r1, #1
 80060ca:	9303      	str	r3, [sp, #12]
 80060cc:	b342      	cbz	r2, 8006120 <__hexnan+0x88>
 80060ce:	4610      	mov	r0, r2
 80060d0:	9105      	str	r1, [sp, #20]
 80060d2:	9204      	str	r2, [sp, #16]
 80060d4:	f7ff fd95 	bl	8005c02 <__hexdig_fun>
 80060d8:	2800      	cmp	r0, #0
 80060da:	d151      	bne.n	8006180 <__hexnan+0xe8>
 80060dc:	9a04      	ldr	r2, [sp, #16]
 80060de:	9905      	ldr	r1, [sp, #20]
 80060e0:	2a20      	cmp	r2, #32
 80060e2:	d818      	bhi.n	8006116 <__hexnan+0x7e>
 80060e4:	9b02      	ldr	r3, [sp, #8]
 80060e6:	459b      	cmp	fp, r3
 80060e8:	dd13      	ble.n	8006112 <__hexnan+0x7a>
 80060ea:	454c      	cmp	r4, r9
 80060ec:	d206      	bcs.n	80060fc <__hexnan+0x64>
 80060ee:	2d07      	cmp	r5, #7
 80060f0:	dc04      	bgt.n	80060fc <__hexnan+0x64>
 80060f2:	462a      	mov	r2, r5
 80060f4:	4649      	mov	r1, r9
 80060f6:	4620      	mov	r0, r4
 80060f8:	f7ff ffa8 	bl	800604c <L_shift>
 80060fc:	4544      	cmp	r4, r8
 80060fe:	d952      	bls.n	80061a6 <__hexnan+0x10e>
 8006100:	2300      	movs	r3, #0
 8006102:	f1a4 0904 	sub.w	r9, r4, #4
 8006106:	f844 3c04 	str.w	r3, [r4, #-4]
 800610a:	461d      	mov	r5, r3
 800610c:	464c      	mov	r4, r9
 800610e:	f8cd b008 	str.w	fp, [sp, #8]
 8006112:	9903      	ldr	r1, [sp, #12]
 8006114:	e7d7      	b.n	80060c6 <__hexnan+0x2e>
 8006116:	2a29      	cmp	r2, #41	@ 0x29
 8006118:	d157      	bne.n	80061ca <__hexnan+0x132>
 800611a:	3102      	adds	r1, #2
 800611c:	f8ca 1000 	str.w	r1, [sl]
 8006120:	f1bb 0f00 	cmp.w	fp, #0
 8006124:	d051      	beq.n	80061ca <__hexnan+0x132>
 8006126:	454c      	cmp	r4, r9
 8006128:	d206      	bcs.n	8006138 <__hexnan+0xa0>
 800612a:	2d07      	cmp	r5, #7
 800612c:	dc04      	bgt.n	8006138 <__hexnan+0xa0>
 800612e:	462a      	mov	r2, r5
 8006130:	4649      	mov	r1, r9
 8006132:	4620      	mov	r0, r4
 8006134:	f7ff ff8a 	bl	800604c <L_shift>
 8006138:	4544      	cmp	r4, r8
 800613a:	d936      	bls.n	80061aa <__hexnan+0x112>
 800613c:	4623      	mov	r3, r4
 800613e:	f1a8 0204 	sub.w	r2, r8, #4
 8006142:	f853 1b04 	ldr.w	r1, [r3], #4
 8006146:	429f      	cmp	r7, r3
 8006148:	f842 1f04 	str.w	r1, [r2, #4]!
 800614c:	d2f9      	bcs.n	8006142 <__hexnan+0xaa>
 800614e:	1b3b      	subs	r3, r7, r4
 8006150:	f023 0303 	bic.w	r3, r3, #3
 8006154:	3304      	adds	r3, #4
 8006156:	3401      	adds	r4, #1
 8006158:	3e03      	subs	r6, #3
 800615a:	42b4      	cmp	r4, r6
 800615c:	bf88      	it	hi
 800615e:	2304      	movhi	r3, #4
 8006160:	2200      	movs	r2, #0
 8006162:	4443      	add	r3, r8
 8006164:	f843 2b04 	str.w	r2, [r3], #4
 8006168:	429f      	cmp	r7, r3
 800616a:	d2fb      	bcs.n	8006164 <__hexnan+0xcc>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	b91b      	cbnz	r3, 8006178 <__hexnan+0xe0>
 8006170:	4547      	cmp	r7, r8
 8006172:	d128      	bne.n	80061c6 <__hexnan+0x12e>
 8006174:	2301      	movs	r3, #1
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	2005      	movs	r0, #5
 800617a:	b007      	add	sp, #28
 800617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006180:	3501      	adds	r5, #1
 8006182:	2d08      	cmp	r5, #8
 8006184:	f10b 0b01 	add.w	fp, fp, #1
 8006188:	dd06      	ble.n	8006198 <__hexnan+0x100>
 800618a:	4544      	cmp	r4, r8
 800618c:	d9c1      	bls.n	8006112 <__hexnan+0x7a>
 800618e:	2300      	movs	r3, #0
 8006190:	2501      	movs	r5, #1
 8006192:	f844 3c04 	str.w	r3, [r4, #-4]
 8006196:	3c04      	subs	r4, #4
 8006198:	6822      	ldr	r2, [r4, #0]
 800619a:	f000 000f 	and.w	r0, r0, #15
 800619e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80061a2:	6020      	str	r0, [r4, #0]
 80061a4:	e7b5      	b.n	8006112 <__hexnan+0x7a>
 80061a6:	2508      	movs	r5, #8
 80061a8:	e7b3      	b.n	8006112 <__hexnan+0x7a>
 80061aa:	9b01      	ldr	r3, [sp, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0dd      	beq.n	800616c <__hexnan+0xd4>
 80061b0:	f04f 32ff 	mov.w	r2, #4294967295
 80061b4:	f1c3 0320 	rsb	r3, r3, #32
 80061b8:	40da      	lsrs	r2, r3
 80061ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80061be:	4013      	ands	r3, r2
 80061c0:	f846 3c04 	str.w	r3, [r6, #-4]
 80061c4:	e7d2      	b.n	800616c <__hexnan+0xd4>
 80061c6:	3f04      	subs	r7, #4
 80061c8:	e7d0      	b.n	800616c <__hexnan+0xd4>
 80061ca:	2004      	movs	r0, #4
 80061cc:	e7d5      	b.n	800617a <__hexnan+0xe2>
	...

080061d0 <malloc>:
 80061d0:	4b02      	ldr	r3, [pc, #8]	@ (80061dc <malloc+0xc>)
 80061d2:	4601      	mov	r1, r0
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	f000 b825 	b.w	8006224 <_malloc_r>
 80061da:	bf00      	nop
 80061dc:	20000194 	.word	0x20000194

080061e0 <sbrk_aligned>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	4e0f      	ldr	r6, [pc, #60]	@ (8006220 <sbrk_aligned+0x40>)
 80061e4:	460c      	mov	r4, r1
 80061e6:	6831      	ldr	r1, [r6, #0]
 80061e8:	4605      	mov	r5, r0
 80061ea:	b911      	cbnz	r1, 80061f2 <sbrk_aligned+0x12>
 80061ec:	f000 fe20 	bl	8006e30 <_sbrk_r>
 80061f0:	6030      	str	r0, [r6, #0]
 80061f2:	4621      	mov	r1, r4
 80061f4:	4628      	mov	r0, r5
 80061f6:	f000 fe1b 	bl	8006e30 <_sbrk_r>
 80061fa:	1c43      	adds	r3, r0, #1
 80061fc:	d103      	bne.n	8006206 <sbrk_aligned+0x26>
 80061fe:	f04f 34ff 	mov.w	r4, #4294967295
 8006202:	4620      	mov	r0, r4
 8006204:	bd70      	pop	{r4, r5, r6, pc}
 8006206:	1cc4      	adds	r4, r0, #3
 8006208:	f024 0403 	bic.w	r4, r4, #3
 800620c:	42a0      	cmp	r0, r4
 800620e:	d0f8      	beq.n	8006202 <sbrk_aligned+0x22>
 8006210:	1a21      	subs	r1, r4, r0
 8006212:	4628      	mov	r0, r5
 8006214:	f000 fe0c 	bl	8006e30 <_sbrk_r>
 8006218:	3001      	adds	r0, #1
 800621a:	d1f2      	bne.n	8006202 <sbrk_aligned+0x22>
 800621c:	e7ef      	b.n	80061fe <sbrk_aligned+0x1e>
 800621e:	bf00      	nop
 8006220:	2000046c 	.word	0x2000046c

08006224 <_malloc_r>:
 8006224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006228:	1ccd      	adds	r5, r1, #3
 800622a:	f025 0503 	bic.w	r5, r5, #3
 800622e:	3508      	adds	r5, #8
 8006230:	2d0c      	cmp	r5, #12
 8006232:	bf38      	it	cc
 8006234:	250c      	movcc	r5, #12
 8006236:	2d00      	cmp	r5, #0
 8006238:	4606      	mov	r6, r0
 800623a:	db01      	blt.n	8006240 <_malloc_r+0x1c>
 800623c:	42a9      	cmp	r1, r5
 800623e:	d904      	bls.n	800624a <_malloc_r+0x26>
 8006240:	230c      	movs	r3, #12
 8006242:	6033      	str	r3, [r6, #0]
 8006244:	2000      	movs	r0, #0
 8006246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800624a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006320 <_malloc_r+0xfc>
 800624e:	f000 f87b 	bl	8006348 <__malloc_lock>
 8006252:	f8d8 3000 	ldr.w	r3, [r8]
 8006256:	461c      	mov	r4, r3
 8006258:	bb44      	cbnz	r4, 80062ac <_malloc_r+0x88>
 800625a:	4629      	mov	r1, r5
 800625c:	4630      	mov	r0, r6
 800625e:	f7ff ffbf 	bl	80061e0 <sbrk_aligned>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	4604      	mov	r4, r0
 8006266:	d158      	bne.n	800631a <_malloc_r+0xf6>
 8006268:	f8d8 4000 	ldr.w	r4, [r8]
 800626c:	4627      	mov	r7, r4
 800626e:	2f00      	cmp	r7, #0
 8006270:	d143      	bne.n	80062fa <_malloc_r+0xd6>
 8006272:	2c00      	cmp	r4, #0
 8006274:	d04b      	beq.n	800630e <_malloc_r+0xea>
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	4639      	mov	r1, r7
 800627a:	4630      	mov	r0, r6
 800627c:	eb04 0903 	add.w	r9, r4, r3
 8006280:	f000 fdd6 	bl	8006e30 <_sbrk_r>
 8006284:	4581      	cmp	r9, r0
 8006286:	d142      	bne.n	800630e <_malloc_r+0xea>
 8006288:	6821      	ldr	r1, [r4, #0]
 800628a:	4630      	mov	r0, r6
 800628c:	1a6d      	subs	r5, r5, r1
 800628e:	4629      	mov	r1, r5
 8006290:	f7ff ffa6 	bl	80061e0 <sbrk_aligned>
 8006294:	3001      	adds	r0, #1
 8006296:	d03a      	beq.n	800630e <_malloc_r+0xea>
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	442b      	add	r3, r5
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	f8d8 3000 	ldr.w	r3, [r8]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	bb62      	cbnz	r2, 8006300 <_malloc_r+0xdc>
 80062a6:	f8c8 7000 	str.w	r7, [r8]
 80062aa:	e00f      	b.n	80062cc <_malloc_r+0xa8>
 80062ac:	6822      	ldr	r2, [r4, #0]
 80062ae:	1b52      	subs	r2, r2, r5
 80062b0:	d420      	bmi.n	80062f4 <_malloc_r+0xd0>
 80062b2:	2a0b      	cmp	r2, #11
 80062b4:	d917      	bls.n	80062e6 <_malloc_r+0xc2>
 80062b6:	1961      	adds	r1, r4, r5
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	6025      	str	r5, [r4, #0]
 80062bc:	bf18      	it	ne
 80062be:	6059      	strne	r1, [r3, #4]
 80062c0:	6863      	ldr	r3, [r4, #4]
 80062c2:	bf08      	it	eq
 80062c4:	f8c8 1000 	streq.w	r1, [r8]
 80062c8:	5162      	str	r2, [r4, r5]
 80062ca:	604b      	str	r3, [r1, #4]
 80062cc:	4630      	mov	r0, r6
 80062ce:	f000 f841 	bl	8006354 <__malloc_unlock>
 80062d2:	f104 000b 	add.w	r0, r4, #11
 80062d6:	1d23      	adds	r3, r4, #4
 80062d8:	f020 0007 	bic.w	r0, r0, #7
 80062dc:	1ac2      	subs	r2, r0, r3
 80062de:	bf1c      	itt	ne
 80062e0:	1a1b      	subne	r3, r3, r0
 80062e2:	50a3      	strne	r3, [r4, r2]
 80062e4:	e7af      	b.n	8006246 <_malloc_r+0x22>
 80062e6:	6862      	ldr	r2, [r4, #4]
 80062e8:	42a3      	cmp	r3, r4
 80062ea:	bf0c      	ite	eq
 80062ec:	f8c8 2000 	streq.w	r2, [r8]
 80062f0:	605a      	strne	r2, [r3, #4]
 80062f2:	e7eb      	b.n	80062cc <_malloc_r+0xa8>
 80062f4:	4623      	mov	r3, r4
 80062f6:	6864      	ldr	r4, [r4, #4]
 80062f8:	e7ae      	b.n	8006258 <_malloc_r+0x34>
 80062fa:	463c      	mov	r4, r7
 80062fc:	687f      	ldr	r7, [r7, #4]
 80062fe:	e7b6      	b.n	800626e <_malloc_r+0x4a>
 8006300:	461a      	mov	r2, r3
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	42a3      	cmp	r3, r4
 8006306:	d1fb      	bne.n	8006300 <_malloc_r+0xdc>
 8006308:	2300      	movs	r3, #0
 800630a:	6053      	str	r3, [r2, #4]
 800630c:	e7de      	b.n	80062cc <_malloc_r+0xa8>
 800630e:	230c      	movs	r3, #12
 8006310:	4630      	mov	r0, r6
 8006312:	6033      	str	r3, [r6, #0]
 8006314:	f000 f81e 	bl	8006354 <__malloc_unlock>
 8006318:	e794      	b.n	8006244 <_malloc_r+0x20>
 800631a:	6005      	str	r5, [r0, #0]
 800631c:	e7d6      	b.n	80062cc <_malloc_r+0xa8>
 800631e:	bf00      	nop
 8006320:	20000470 	.word	0x20000470

08006324 <__ascii_mbtowc>:
 8006324:	b082      	sub	sp, #8
 8006326:	b901      	cbnz	r1, 800632a <__ascii_mbtowc+0x6>
 8006328:	a901      	add	r1, sp, #4
 800632a:	b142      	cbz	r2, 800633e <__ascii_mbtowc+0x1a>
 800632c:	b14b      	cbz	r3, 8006342 <__ascii_mbtowc+0x1e>
 800632e:	7813      	ldrb	r3, [r2, #0]
 8006330:	600b      	str	r3, [r1, #0]
 8006332:	7812      	ldrb	r2, [r2, #0]
 8006334:	1e10      	subs	r0, r2, #0
 8006336:	bf18      	it	ne
 8006338:	2001      	movne	r0, #1
 800633a:	b002      	add	sp, #8
 800633c:	4770      	bx	lr
 800633e:	4610      	mov	r0, r2
 8006340:	e7fb      	b.n	800633a <__ascii_mbtowc+0x16>
 8006342:	f06f 0001 	mvn.w	r0, #1
 8006346:	e7f8      	b.n	800633a <__ascii_mbtowc+0x16>

08006348 <__malloc_lock>:
 8006348:	4801      	ldr	r0, [pc, #4]	@ (8006350 <__malloc_lock+0x8>)
 800634a:	f7ff bb86 	b.w	8005a5a <__retarget_lock_acquire_recursive>
 800634e:	bf00      	nop
 8006350:	20000468 	.word	0x20000468

08006354 <__malloc_unlock>:
 8006354:	4801      	ldr	r0, [pc, #4]	@ (800635c <__malloc_unlock+0x8>)
 8006356:	f7ff bb81 	b.w	8005a5c <__retarget_lock_release_recursive>
 800635a:	bf00      	nop
 800635c:	20000468 	.word	0x20000468

08006360 <_Balloc>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	69c6      	ldr	r6, [r0, #28]
 8006364:	4604      	mov	r4, r0
 8006366:	460d      	mov	r5, r1
 8006368:	b976      	cbnz	r6, 8006388 <_Balloc+0x28>
 800636a:	2010      	movs	r0, #16
 800636c:	f7ff ff30 	bl	80061d0 <malloc>
 8006370:	4602      	mov	r2, r0
 8006372:	61e0      	str	r0, [r4, #28]
 8006374:	b920      	cbnz	r0, 8006380 <_Balloc+0x20>
 8006376:	216b      	movs	r1, #107	@ 0x6b
 8006378:	4b17      	ldr	r3, [pc, #92]	@ (80063d8 <_Balloc+0x78>)
 800637a:	4818      	ldr	r0, [pc, #96]	@ (80063dc <_Balloc+0x7c>)
 800637c:	f7ff fb88 	bl	8005a90 <__assert_func>
 8006380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006384:	6006      	str	r6, [r0, #0]
 8006386:	60c6      	str	r6, [r0, #12]
 8006388:	69e6      	ldr	r6, [r4, #28]
 800638a:	68f3      	ldr	r3, [r6, #12]
 800638c:	b183      	cbz	r3, 80063b0 <_Balloc+0x50>
 800638e:	69e3      	ldr	r3, [r4, #28]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006396:	b9b8      	cbnz	r0, 80063c8 <_Balloc+0x68>
 8006398:	2101      	movs	r1, #1
 800639a:	fa01 f605 	lsl.w	r6, r1, r5
 800639e:	1d72      	adds	r2, r6, #5
 80063a0:	4620      	mov	r0, r4
 80063a2:	0092      	lsls	r2, r2, #2
 80063a4:	f000 fd5b 	bl	8006e5e <_calloc_r>
 80063a8:	b160      	cbz	r0, 80063c4 <_Balloc+0x64>
 80063aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063ae:	e00e      	b.n	80063ce <_Balloc+0x6e>
 80063b0:	2221      	movs	r2, #33	@ 0x21
 80063b2:	2104      	movs	r1, #4
 80063b4:	4620      	mov	r0, r4
 80063b6:	f000 fd52 	bl	8006e5e <_calloc_r>
 80063ba:	69e3      	ldr	r3, [r4, #28]
 80063bc:	60f0      	str	r0, [r6, #12]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e4      	bne.n	800638e <_Balloc+0x2e>
 80063c4:	2000      	movs	r0, #0
 80063c6:	bd70      	pop	{r4, r5, r6, pc}
 80063c8:	6802      	ldr	r2, [r0, #0]
 80063ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063ce:	2300      	movs	r3, #0
 80063d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063d4:	e7f7      	b.n	80063c6 <_Balloc+0x66>
 80063d6:	bf00      	nop
 80063d8:	080077c4 	.word	0x080077c4
 80063dc:	080078ea 	.word	0x080078ea

080063e0 <_Bfree>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	69c6      	ldr	r6, [r0, #28]
 80063e4:	4605      	mov	r5, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	b976      	cbnz	r6, 8006408 <_Bfree+0x28>
 80063ea:	2010      	movs	r0, #16
 80063ec:	f7ff fef0 	bl	80061d0 <malloc>
 80063f0:	4602      	mov	r2, r0
 80063f2:	61e8      	str	r0, [r5, #28]
 80063f4:	b920      	cbnz	r0, 8006400 <_Bfree+0x20>
 80063f6:	218f      	movs	r1, #143	@ 0x8f
 80063f8:	4b08      	ldr	r3, [pc, #32]	@ (800641c <_Bfree+0x3c>)
 80063fa:	4809      	ldr	r0, [pc, #36]	@ (8006420 <_Bfree+0x40>)
 80063fc:	f7ff fb48 	bl	8005a90 <__assert_func>
 8006400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006404:	6006      	str	r6, [r0, #0]
 8006406:	60c6      	str	r6, [r0, #12]
 8006408:	b13c      	cbz	r4, 800641a <_Bfree+0x3a>
 800640a:	69eb      	ldr	r3, [r5, #28]
 800640c:	6862      	ldr	r2, [r4, #4]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006414:	6021      	str	r1, [r4, #0]
 8006416:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	080077c4 	.word	0x080077c4
 8006420:	080078ea 	.word	0x080078ea

08006424 <__multadd>:
 8006424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006428:	4607      	mov	r7, r0
 800642a:	460c      	mov	r4, r1
 800642c:	461e      	mov	r6, r3
 800642e:	2000      	movs	r0, #0
 8006430:	690d      	ldr	r5, [r1, #16]
 8006432:	f101 0c14 	add.w	ip, r1, #20
 8006436:	f8dc 3000 	ldr.w	r3, [ip]
 800643a:	3001      	adds	r0, #1
 800643c:	b299      	uxth	r1, r3
 800643e:	fb02 6101 	mla	r1, r2, r1, r6
 8006442:	0c1e      	lsrs	r6, r3, #16
 8006444:	0c0b      	lsrs	r3, r1, #16
 8006446:	fb02 3306 	mla	r3, r2, r6, r3
 800644a:	b289      	uxth	r1, r1
 800644c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006450:	4285      	cmp	r5, r0
 8006452:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006456:	f84c 1b04 	str.w	r1, [ip], #4
 800645a:	dcec      	bgt.n	8006436 <__multadd+0x12>
 800645c:	b30e      	cbz	r6, 80064a2 <__multadd+0x7e>
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	42ab      	cmp	r3, r5
 8006462:	dc19      	bgt.n	8006498 <__multadd+0x74>
 8006464:	6861      	ldr	r1, [r4, #4]
 8006466:	4638      	mov	r0, r7
 8006468:	3101      	adds	r1, #1
 800646a:	f7ff ff79 	bl	8006360 <_Balloc>
 800646e:	4680      	mov	r8, r0
 8006470:	b928      	cbnz	r0, 800647e <__multadd+0x5a>
 8006472:	4602      	mov	r2, r0
 8006474:	21ba      	movs	r1, #186	@ 0xba
 8006476:	4b0c      	ldr	r3, [pc, #48]	@ (80064a8 <__multadd+0x84>)
 8006478:	480c      	ldr	r0, [pc, #48]	@ (80064ac <__multadd+0x88>)
 800647a:	f7ff fb09 	bl	8005a90 <__assert_func>
 800647e:	6922      	ldr	r2, [r4, #16]
 8006480:	f104 010c 	add.w	r1, r4, #12
 8006484:	3202      	adds	r2, #2
 8006486:	0092      	lsls	r2, r2, #2
 8006488:	300c      	adds	r0, #12
 800648a:	f7ff fae8 	bl	8005a5e <memcpy>
 800648e:	4621      	mov	r1, r4
 8006490:	4638      	mov	r0, r7
 8006492:	f7ff ffa5 	bl	80063e0 <_Bfree>
 8006496:	4644      	mov	r4, r8
 8006498:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800649c:	3501      	adds	r5, #1
 800649e:	615e      	str	r6, [r3, #20]
 80064a0:	6125      	str	r5, [r4, #16]
 80064a2:	4620      	mov	r0, r4
 80064a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a8:	08007879 	.word	0x08007879
 80064ac:	080078ea 	.word	0x080078ea

080064b0 <__s2b>:
 80064b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b4:	4615      	mov	r5, r2
 80064b6:	2209      	movs	r2, #9
 80064b8:	461f      	mov	r7, r3
 80064ba:	3308      	adds	r3, #8
 80064bc:	460c      	mov	r4, r1
 80064be:	fb93 f3f2 	sdiv	r3, r3, r2
 80064c2:	4606      	mov	r6, r0
 80064c4:	2201      	movs	r2, #1
 80064c6:	2100      	movs	r1, #0
 80064c8:	429a      	cmp	r2, r3
 80064ca:	db09      	blt.n	80064e0 <__s2b+0x30>
 80064cc:	4630      	mov	r0, r6
 80064ce:	f7ff ff47 	bl	8006360 <_Balloc>
 80064d2:	b940      	cbnz	r0, 80064e6 <__s2b+0x36>
 80064d4:	4602      	mov	r2, r0
 80064d6:	21d3      	movs	r1, #211	@ 0xd3
 80064d8:	4b18      	ldr	r3, [pc, #96]	@ (800653c <__s2b+0x8c>)
 80064da:	4819      	ldr	r0, [pc, #100]	@ (8006540 <__s2b+0x90>)
 80064dc:	f7ff fad8 	bl	8005a90 <__assert_func>
 80064e0:	0052      	lsls	r2, r2, #1
 80064e2:	3101      	adds	r1, #1
 80064e4:	e7f0      	b.n	80064c8 <__s2b+0x18>
 80064e6:	9b08      	ldr	r3, [sp, #32]
 80064e8:	2d09      	cmp	r5, #9
 80064ea:	6143      	str	r3, [r0, #20]
 80064ec:	f04f 0301 	mov.w	r3, #1
 80064f0:	6103      	str	r3, [r0, #16]
 80064f2:	dd16      	ble.n	8006522 <__s2b+0x72>
 80064f4:	f104 0909 	add.w	r9, r4, #9
 80064f8:	46c8      	mov	r8, r9
 80064fa:	442c      	add	r4, r5
 80064fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006500:	4601      	mov	r1, r0
 8006502:	220a      	movs	r2, #10
 8006504:	4630      	mov	r0, r6
 8006506:	3b30      	subs	r3, #48	@ 0x30
 8006508:	f7ff ff8c 	bl	8006424 <__multadd>
 800650c:	45a0      	cmp	r8, r4
 800650e:	d1f5      	bne.n	80064fc <__s2b+0x4c>
 8006510:	f1a5 0408 	sub.w	r4, r5, #8
 8006514:	444c      	add	r4, r9
 8006516:	1b2d      	subs	r5, r5, r4
 8006518:	1963      	adds	r3, r4, r5
 800651a:	42bb      	cmp	r3, r7
 800651c:	db04      	blt.n	8006528 <__s2b+0x78>
 800651e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006522:	2509      	movs	r5, #9
 8006524:	340a      	adds	r4, #10
 8006526:	e7f6      	b.n	8006516 <__s2b+0x66>
 8006528:	f814 3b01 	ldrb.w	r3, [r4], #1
 800652c:	4601      	mov	r1, r0
 800652e:	220a      	movs	r2, #10
 8006530:	4630      	mov	r0, r6
 8006532:	3b30      	subs	r3, #48	@ 0x30
 8006534:	f7ff ff76 	bl	8006424 <__multadd>
 8006538:	e7ee      	b.n	8006518 <__s2b+0x68>
 800653a:	bf00      	nop
 800653c:	08007879 	.word	0x08007879
 8006540:	080078ea 	.word	0x080078ea

08006544 <__hi0bits>:
 8006544:	4603      	mov	r3, r0
 8006546:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800654a:	bf3a      	itte	cc
 800654c:	0403      	lslcc	r3, r0, #16
 800654e:	2010      	movcc	r0, #16
 8006550:	2000      	movcs	r0, #0
 8006552:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006556:	bf3c      	itt	cc
 8006558:	021b      	lslcc	r3, r3, #8
 800655a:	3008      	addcc	r0, #8
 800655c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006560:	bf3c      	itt	cc
 8006562:	011b      	lslcc	r3, r3, #4
 8006564:	3004      	addcc	r0, #4
 8006566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800656a:	bf3c      	itt	cc
 800656c:	009b      	lslcc	r3, r3, #2
 800656e:	3002      	addcc	r0, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	db05      	blt.n	8006580 <__hi0bits+0x3c>
 8006574:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006578:	f100 0001 	add.w	r0, r0, #1
 800657c:	bf08      	it	eq
 800657e:	2020      	moveq	r0, #32
 8006580:	4770      	bx	lr

08006582 <__lo0bits>:
 8006582:	6803      	ldr	r3, [r0, #0]
 8006584:	4602      	mov	r2, r0
 8006586:	f013 0007 	ands.w	r0, r3, #7
 800658a:	d00b      	beq.n	80065a4 <__lo0bits+0x22>
 800658c:	07d9      	lsls	r1, r3, #31
 800658e:	d421      	bmi.n	80065d4 <__lo0bits+0x52>
 8006590:	0798      	lsls	r0, r3, #30
 8006592:	bf49      	itett	mi
 8006594:	085b      	lsrmi	r3, r3, #1
 8006596:	089b      	lsrpl	r3, r3, #2
 8006598:	2001      	movmi	r0, #1
 800659a:	6013      	strmi	r3, [r2, #0]
 800659c:	bf5c      	itt	pl
 800659e:	2002      	movpl	r0, #2
 80065a0:	6013      	strpl	r3, [r2, #0]
 80065a2:	4770      	bx	lr
 80065a4:	b299      	uxth	r1, r3
 80065a6:	b909      	cbnz	r1, 80065ac <__lo0bits+0x2a>
 80065a8:	2010      	movs	r0, #16
 80065aa:	0c1b      	lsrs	r3, r3, #16
 80065ac:	b2d9      	uxtb	r1, r3
 80065ae:	b909      	cbnz	r1, 80065b4 <__lo0bits+0x32>
 80065b0:	3008      	adds	r0, #8
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	0719      	lsls	r1, r3, #28
 80065b6:	bf04      	itt	eq
 80065b8:	091b      	lsreq	r3, r3, #4
 80065ba:	3004      	addeq	r0, #4
 80065bc:	0799      	lsls	r1, r3, #30
 80065be:	bf04      	itt	eq
 80065c0:	089b      	lsreq	r3, r3, #2
 80065c2:	3002      	addeq	r0, #2
 80065c4:	07d9      	lsls	r1, r3, #31
 80065c6:	d403      	bmi.n	80065d0 <__lo0bits+0x4e>
 80065c8:	085b      	lsrs	r3, r3, #1
 80065ca:	f100 0001 	add.w	r0, r0, #1
 80065ce:	d003      	beq.n	80065d8 <__lo0bits+0x56>
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	4770      	bx	lr
 80065d4:	2000      	movs	r0, #0
 80065d6:	4770      	bx	lr
 80065d8:	2020      	movs	r0, #32
 80065da:	4770      	bx	lr

080065dc <__i2b>:
 80065dc:	b510      	push	{r4, lr}
 80065de:	460c      	mov	r4, r1
 80065e0:	2101      	movs	r1, #1
 80065e2:	f7ff febd 	bl	8006360 <_Balloc>
 80065e6:	4602      	mov	r2, r0
 80065e8:	b928      	cbnz	r0, 80065f6 <__i2b+0x1a>
 80065ea:	f240 1145 	movw	r1, #325	@ 0x145
 80065ee:	4b04      	ldr	r3, [pc, #16]	@ (8006600 <__i2b+0x24>)
 80065f0:	4804      	ldr	r0, [pc, #16]	@ (8006604 <__i2b+0x28>)
 80065f2:	f7ff fa4d 	bl	8005a90 <__assert_func>
 80065f6:	2301      	movs	r3, #1
 80065f8:	6144      	str	r4, [r0, #20]
 80065fa:	6103      	str	r3, [r0, #16]
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	bf00      	nop
 8006600:	08007879 	.word	0x08007879
 8006604:	080078ea 	.word	0x080078ea

08006608 <__multiply>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	4617      	mov	r7, r2
 800660e:	690a      	ldr	r2, [r1, #16]
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	4689      	mov	r9, r1
 8006614:	429a      	cmp	r2, r3
 8006616:	bfa2      	ittt	ge
 8006618:	463b      	movge	r3, r7
 800661a:	460f      	movge	r7, r1
 800661c:	4699      	movge	r9, r3
 800661e:	693d      	ldr	r5, [r7, #16]
 8006620:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	eb05 060a 	add.w	r6, r5, sl
 800662c:	42b3      	cmp	r3, r6
 800662e:	b085      	sub	sp, #20
 8006630:	bfb8      	it	lt
 8006632:	3101      	addlt	r1, #1
 8006634:	f7ff fe94 	bl	8006360 <_Balloc>
 8006638:	b930      	cbnz	r0, 8006648 <__multiply+0x40>
 800663a:	4602      	mov	r2, r0
 800663c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006640:	4b40      	ldr	r3, [pc, #256]	@ (8006744 <__multiply+0x13c>)
 8006642:	4841      	ldr	r0, [pc, #260]	@ (8006748 <__multiply+0x140>)
 8006644:	f7ff fa24 	bl	8005a90 <__assert_func>
 8006648:	f100 0414 	add.w	r4, r0, #20
 800664c:	4623      	mov	r3, r4
 800664e:	2200      	movs	r2, #0
 8006650:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006654:	4573      	cmp	r3, lr
 8006656:	d320      	bcc.n	800669a <__multiply+0x92>
 8006658:	f107 0814 	add.w	r8, r7, #20
 800665c:	f109 0114 	add.w	r1, r9, #20
 8006660:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006664:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006668:	9302      	str	r3, [sp, #8]
 800666a:	1beb      	subs	r3, r5, r7
 800666c:	3b15      	subs	r3, #21
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	3304      	adds	r3, #4
 8006674:	3715      	adds	r7, #21
 8006676:	42bd      	cmp	r5, r7
 8006678:	bf38      	it	cc
 800667a:	2304      	movcc	r3, #4
 800667c:	9301      	str	r3, [sp, #4]
 800667e:	9b02      	ldr	r3, [sp, #8]
 8006680:	9103      	str	r1, [sp, #12]
 8006682:	428b      	cmp	r3, r1
 8006684:	d80c      	bhi.n	80066a0 <__multiply+0x98>
 8006686:	2e00      	cmp	r6, #0
 8006688:	dd03      	ble.n	8006692 <__multiply+0x8a>
 800668a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800668e:	2b00      	cmp	r3, #0
 8006690:	d055      	beq.n	800673e <__multiply+0x136>
 8006692:	6106      	str	r6, [r0, #16]
 8006694:	b005      	add	sp, #20
 8006696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669a:	f843 2b04 	str.w	r2, [r3], #4
 800669e:	e7d9      	b.n	8006654 <__multiply+0x4c>
 80066a0:	f8b1 a000 	ldrh.w	sl, [r1]
 80066a4:	f1ba 0f00 	cmp.w	sl, #0
 80066a8:	d01f      	beq.n	80066ea <__multiply+0xe2>
 80066aa:	46c4      	mov	ip, r8
 80066ac:	46a1      	mov	r9, r4
 80066ae:	2700      	movs	r7, #0
 80066b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80066b4:	f8d9 3000 	ldr.w	r3, [r9]
 80066b8:	fa1f fb82 	uxth.w	fp, r2
 80066bc:	b29b      	uxth	r3, r3
 80066be:	fb0a 330b 	mla	r3, sl, fp, r3
 80066c2:	443b      	add	r3, r7
 80066c4:	f8d9 7000 	ldr.w	r7, [r9]
 80066c8:	0c12      	lsrs	r2, r2, #16
 80066ca:	0c3f      	lsrs	r7, r7, #16
 80066cc:	fb0a 7202 	mla	r2, sl, r2, r7
 80066d0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066da:	4565      	cmp	r5, ip
 80066dc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80066e0:	f849 3b04 	str.w	r3, [r9], #4
 80066e4:	d8e4      	bhi.n	80066b0 <__multiply+0xa8>
 80066e6:	9b01      	ldr	r3, [sp, #4]
 80066e8:	50e7      	str	r7, [r4, r3]
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	3104      	adds	r1, #4
 80066ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80066f2:	f1b9 0f00 	cmp.w	r9, #0
 80066f6:	d020      	beq.n	800673a <__multiply+0x132>
 80066f8:	4647      	mov	r7, r8
 80066fa:	46a4      	mov	ip, r4
 80066fc:	f04f 0a00 	mov.w	sl, #0
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	f8b7 b000 	ldrh.w	fp, [r7]
 8006706:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800670a:	b29b      	uxth	r3, r3
 800670c:	fb09 220b 	mla	r2, r9, fp, r2
 8006710:	4452      	add	r2, sl
 8006712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006716:	f84c 3b04 	str.w	r3, [ip], #4
 800671a:	f857 3b04 	ldr.w	r3, [r7], #4
 800671e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006722:	f8bc 3000 	ldrh.w	r3, [ip]
 8006726:	42bd      	cmp	r5, r7
 8006728:	fb09 330a 	mla	r3, r9, sl, r3
 800672c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006730:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006734:	d8e5      	bhi.n	8006702 <__multiply+0xfa>
 8006736:	9a01      	ldr	r2, [sp, #4]
 8006738:	50a3      	str	r3, [r4, r2]
 800673a:	3404      	adds	r4, #4
 800673c:	e79f      	b.n	800667e <__multiply+0x76>
 800673e:	3e01      	subs	r6, #1
 8006740:	e7a1      	b.n	8006686 <__multiply+0x7e>
 8006742:	bf00      	nop
 8006744:	08007879 	.word	0x08007879
 8006748:	080078ea 	.word	0x080078ea

0800674c <__pow5mult>:
 800674c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006750:	4615      	mov	r5, r2
 8006752:	f012 0203 	ands.w	r2, r2, #3
 8006756:	4607      	mov	r7, r0
 8006758:	460e      	mov	r6, r1
 800675a:	d007      	beq.n	800676c <__pow5mult+0x20>
 800675c:	4c25      	ldr	r4, [pc, #148]	@ (80067f4 <__pow5mult+0xa8>)
 800675e:	3a01      	subs	r2, #1
 8006760:	2300      	movs	r3, #0
 8006762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006766:	f7ff fe5d 	bl	8006424 <__multadd>
 800676a:	4606      	mov	r6, r0
 800676c:	10ad      	asrs	r5, r5, #2
 800676e:	d03d      	beq.n	80067ec <__pow5mult+0xa0>
 8006770:	69fc      	ldr	r4, [r7, #28]
 8006772:	b97c      	cbnz	r4, 8006794 <__pow5mult+0x48>
 8006774:	2010      	movs	r0, #16
 8006776:	f7ff fd2b 	bl	80061d0 <malloc>
 800677a:	4602      	mov	r2, r0
 800677c:	61f8      	str	r0, [r7, #28]
 800677e:	b928      	cbnz	r0, 800678c <__pow5mult+0x40>
 8006780:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006784:	4b1c      	ldr	r3, [pc, #112]	@ (80067f8 <__pow5mult+0xac>)
 8006786:	481d      	ldr	r0, [pc, #116]	@ (80067fc <__pow5mult+0xb0>)
 8006788:	f7ff f982 	bl	8005a90 <__assert_func>
 800678c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006790:	6004      	str	r4, [r0, #0]
 8006792:	60c4      	str	r4, [r0, #12]
 8006794:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800679c:	b94c      	cbnz	r4, 80067b2 <__pow5mult+0x66>
 800679e:	f240 2171 	movw	r1, #625	@ 0x271
 80067a2:	4638      	mov	r0, r7
 80067a4:	f7ff ff1a 	bl	80065dc <__i2b>
 80067a8:	2300      	movs	r3, #0
 80067aa:	4604      	mov	r4, r0
 80067ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80067b0:	6003      	str	r3, [r0, #0]
 80067b2:	f04f 0900 	mov.w	r9, #0
 80067b6:	07eb      	lsls	r3, r5, #31
 80067b8:	d50a      	bpl.n	80067d0 <__pow5mult+0x84>
 80067ba:	4631      	mov	r1, r6
 80067bc:	4622      	mov	r2, r4
 80067be:	4638      	mov	r0, r7
 80067c0:	f7ff ff22 	bl	8006608 <__multiply>
 80067c4:	4680      	mov	r8, r0
 80067c6:	4631      	mov	r1, r6
 80067c8:	4638      	mov	r0, r7
 80067ca:	f7ff fe09 	bl	80063e0 <_Bfree>
 80067ce:	4646      	mov	r6, r8
 80067d0:	106d      	asrs	r5, r5, #1
 80067d2:	d00b      	beq.n	80067ec <__pow5mult+0xa0>
 80067d4:	6820      	ldr	r0, [r4, #0]
 80067d6:	b938      	cbnz	r0, 80067e8 <__pow5mult+0x9c>
 80067d8:	4622      	mov	r2, r4
 80067da:	4621      	mov	r1, r4
 80067dc:	4638      	mov	r0, r7
 80067de:	f7ff ff13 	bl	8006608 <__multiply>
 80067e2:	6020      	str	r0, [r4, #0]
 80067e4:	f8c0 9000 	str.w	r9, [r0]
 80067e8:	4604      	mov	r4, r0
 80067ea:	e7e4      	b.n	80067b6 <__pow5mult+0x6a>
 80067ec:	4630      	mov	r0, r6
 80067ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067f2:	bf00      	nop
 80067f4:	08007acc 	.word	0x08007acc
 80067f8:	080077c4 	.word	0x080077c4
 80067fc:	080078ea 	.word	0x080078ea

08006800 <__lshift>:
 8006800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006804:	460c      	mov	r4, r1
 8006806:	4607      	mov	r7, r0
 8006808:	4691      	mov	r9, r2
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	6849      	ldr	r1, [r1, #4]
 800680e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006812:	68a3      	ldr	r3, [r4, #8]
 8006814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006818:	f108 0601 	add.w	r6, r8, #1
 800681c:	42b3      	cmp	r3, r6
 800681e:	db0b      	blt.n	8006838 <__lshift+0x38>
 8006820:	4638      	mov	r0, r7
 8006822:	f7ff fd9d 	bl	8006360 <_Balloc>
 8006826:	4605      	mov	r5, r0
 8006828:	b948      	cbnz	r0, 800683e <__lshift+0x3e>
 800682a:	4602      	mov	r2, r0
 800682c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006830:	4b27      	ldr	r3, [pc, #156]	@ (80068d0 <__lshift+0xd0>)
 8006832:	4828      	ldr	r0, [pc, #160]	@ (80068d4 <__lshift+0xd4>)
 8006834:	f7ff f92c 	bl	8005a90 <__assert_func>
 8006838:	3101      	adds	r1, #1
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	e7ee      	b.n	800681c <__lshift+0x1c>
 800683e:	2300      	movs	r3, #0
 8006840:	f100 0114 	add.w	r1, r0, #20
 8006844:	f100 0210 	add.w	r2, r0, #16
 8006848:	4618      	mov	r0, r3
 800684a:	4553      	cmp	r3, sl
 800684c:	db33      	blt.n	80068b6 <__lshift+0xb6>
 800684e:	6920      	ldr	r0, [r4, #16]
 8006850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006854:	f104 0314 	add.w	r3, r4, #20
 8006858:	f019 091f 	ands.w	r9, r9, #31
 800685c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006860:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006864:	d02b      	beq.n	80068be <__lshift+0xbe>
 8006866:	468a      	mov	sl, r1
 8006868:	2200      	movs	r2, #0
 800686a:	f1c9 0e20 	rsb	lr, r9, #32
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	fa00 f009 	lsl.w	r0, r0, r9
 8006874:	4310      	orrs	r0, r2
 8006876:	f84a 0b04 	str.w	r0, [sl], #4
 800687a:	f853 2b04 	ldr.w	r2, [r3], #4
 800687e:	459c      	cmp	ip, r3
 8006880:	fa22 f20e 	lsr.w	r2, r2, lr
 8006884:	d8f3      	bhi.n	800686e <__lshift+0x6e>
 8006886:	ebac 0304 	sub.w	r3, ip, r4
 800688a:	3b15      	subs	r3, #21
 800688c:	f023 0303 	bic.w	r3, r3, #3
 8006890:	3304      	adds	r3, #4
 8006892:	f104 0015 	add.w	r0, r4, #21
 8006896:	4560      	cmp	r0, ip
 8006898:	bf88      	it	hi
 800689a:	2304      	movhi	r3, #4
 800689c:	50ca      	str	r2, [r1, r3]
 800689e:	b10a      	cbz	r2, 80068a4 <__lshift+0xa4>
 80068a0:	f108 0602 	add.w	r6, r8, #2
 80068a4:	3e01      	subs	r6, #1
 80068a6:	4638      	mov	r0, r7
 80068a8:	4621      	mov	r1, r4
 80068aa:	612e      	str	r6, [r5, #16]
 80068ac:	f7ff fd98 	bl	80063e0 <_Bfree>
 80068b0:	4628      	mov	r0, r5
 80068b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80068ba:	3301      	adds	r3, #1
 80068bc:	e7c5      	b.n	800684a <__lshift+0x4a>
 80068be:	3904      	subs	r1, #4
 80068c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c4:	459c      	cmp	ip, r3
 80068c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80068ca:	d8f9      	bhi.n	80068c0 <__lshift+0xc0>
 80068cc:	e7ea      	b.n	80068a4 <__lshift+0xa4>
 80068ce:	bf00      	nop
 80068d0:	08007879 	.word	0x08007879
 80068d4:	080078ea 	.word	0x080078ea

080068d8 <__mcmp>:
 80068d8:	4603      	mov	r3, r0
 80068da:	690a      	ldr	r2, [r1, #16]
 80068dc:	6900      	ldr	r0, [r0, #16]
 80068de:	b530      	push	{r4, r5, lr}
 80068e0:	1a80      	subs	r0, r0, r2
 80068e2:	d10e      	bne.n	8006902 <__mcmp+0x2a>
 80068e4:	3314      	adds	r3, #20
 80068e6:	3114      	adds	r1, #20
 80068e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80068ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80068f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068f8:	4295      	cmp	r5, r2
 80068fa:	d003      	beq.n	8006904 <__mcmp+0x2c>
 80068fc:	d205      	bcs.n	800690a <__mcmp+0x32>
 80068fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006902:	bd30      	pop	{r4, r5, pc}
 8006904:	42a3      	cmp	r3, r4
 8006906:	d3f3      	bcc.n	80068f0 <__mcmp+0x18>
 8006908:	e7fb      	b.n	8006902 <__mcmp+0x2a>
 800690a:	2001      	movs	r0, #1
 800690c:	e7f9      	b.n	8006902 <__mcmp+0x2a>
	...

08006910 <__mdiff>:
 8006910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	4689      	mov	r9, r1
 8006916:	4606      	mov	r6, r0
 8006918:	4611      	mov	r1, r2
 800691a:	4648      	mov	r0, r9
 800691c:	4614      	mov	r4, r2
 800691e:	f7ff ffdb 	bl	80068d8 <__mcmp>
 8006922:	1e05      	subs	r5, r0, #0
 8006924:	d112      	bne.n	800694c <__mdiff+0x3c>
 8006926:	4629      	mov	r1, r5
 8006928:	4630      	mov	r0, r6
 800692a:	f7ff fd19 	bl	8006360 <_Balloc>
 800692e:	4602      	mov	r2, r0
 8006930:	b928      	cbnz	r0, 800693e <__mdiff+0x2e>
 8006932:	f240 2137 	movw	r1, #567	@ 0x237
 8006936:	4b3e      	ldr	r3, [pc, #248]	@ (8006a30 <__mdiff+0x120>)
 8006938:	483e      	ldr	r0, [pc, #248]	@ (8006a34 <__mdiff+0x124>)
 800693a:	f7ff f8a9 	bl	8005a90 <__assert_func>
 800693e:	2301      	movs	r3, #1
 8006940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006944:	4610      	mov	r0, r2
 8006946:	b003      	add	sp, #12
 8006948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694c:	bfbc      	itt	lt
 800694e:	464b      	movlt	r3, r9
 8006950:	46a1      	movlt	r9, r4
 8006952:	4630      	mov	r0, r6
 8006954:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006958:	bfba      	itte	lt
 800695a:	461c      	movlt	r4, r3
 800695c:	2501      	movlt	r5, #1
 800695e:	2500      	movge	r5, #0
 8006960:	f7ff fcfe 	bl	8006360 <_Balloc>
 8006964:	4602      	mov	r2, r0
 8006966:	b918      	cbnz	r0, 8006970 <__mdiff+0x60>
 8006968:	f240 2145 	movw	r1, #581	@ 0x245
 800696c:	4b30      	ldr	r3, [pc, #192]	@ (8006a30 <__mdiff+0x120>)
 800696e:	e7e3      	b.n	8006938 <__mdiff+0x28>
 8006970:	f100 0b14 	add.w	fp, r0, #20
 8006974:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006978:	f109 0310 	add.w	r3, r9, #16
 800697c:	60c5      	str	r5, [r0, #12]
 800697e:	f04f 0c00 	mov.w	ip, #0
 8006982:	f109 0514 	add.w	r5, r9, #20
 8006986:	46d9      	mov	r9, fp
 8006988:	6926      	ldr	r6, [r4, #16]
 800698a:	f104 0e14 	add.w	lr, r4, #20
 800698e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006992:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	9b01      	ldr	r3, [sp, #4]
 800699a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800699e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069a2:	b281      	uxth	r1, r0
 80069a4:	9301      	str	r3, [sp, #4]
 80069a6:	fa1f f38a 	uxth.w	r3, sl
 80069aa:	1a5b      	subs	r3, r3, r1
 80069ac:	0c00      	lsrs	r0, r0, #16
 80069ae:	4463      	add	r3, ip
 80069b0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80069b4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80069be:	4576      	cmp	r6, lr
 80069c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069c4:	f849 3b04 	str.w	r3, [r9], #4
 80069c8:	d8e6      	bhi.n	8006998 <__mdiff+0x88>
 80069ca:	1b33      	subs	r3, r6, r4
 80069cc:	3b15      	subs	r3, #21
 80069ce:	f023 0303 	bic.w	r3, r3, #3
 80069d2:	3415      	adds	r4, #21
 80069d4:	3304      	adds	r3, #4
 80069d6:	42a6      	cmp	r6, r4
 80069d8:	bf38      	it	cc
 80069da:	2304      	movcc	r3, #4
 80069dc:	441d      	add	r5, r3
 80069de:	445b      	add	r3, fp
 80069e0:	461e      	mov	r6, r3
 80069e2:	462c      	mov	r4, r5
 80069e4:	4544      	cmp	r4, r8
 80069e6:	d30e      	bcc.n	8006a06 <__mdiff+0xf6>
 80069e8:	f108 0103 	add.w	r1, r8, #3
 80069ec:	1b49      	subs	r1, r1, r5
 80069ee:	f021 0103 	bic.w	r1, r1, #3
 80069f2:	3d03      	subs	r5, #3
 80069f4:	45a8      	cmp	r8, r5
 80069f6:	bf38      	it	cc
 80069f8:	2100      	movcc	r1, #0
 80069fa:	440b      	add	r3, r1
 80069fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a00:	b199      	cbz	r1, 8006a2a <__mdiff+0x11a>
 8006a02:	6117      	str	r7, [r2, #16]
 8006a04:	e79e      	b.n	8006944 <__mdiff+0x34>
 8006a06:	46e6      	mov	lr, ip
 8006a08:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a0c:	fa1f fc81 	uxth.w	ip, r1
 8006a10:	44f4      	add	ip, lr
 8006a12:	0c08      	lsrs	r0, r1, #16
 8006a14:	4471      	add	r1, lr
 8006a16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a1a:	b289      	uxth	r1, r1
 8006a1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a24:	f846 1b04 	str.w	r1, [r6], #4
 8006a28:	e7dc      	b.n	80069e4 <__mdiff+0xd4>
 8006a2a:	3f01      	subs	r7, #1
 8006a2c:	e7e6      	b.n	80069fc <__mdiff+0xec>
 8006a2e:	bf00      	nop
 8006a30:	08007879 	.word	0x08007879
 8006a34:	080078ea 	.word	0x080078ea

08006a38 <__ulp>:
 8006a38:	4b0e      	ldr	r3, [pc, #56]	@ (8006a74 <__ulp+0x3c>)
 8006a3a:	400b      	ands	r3, r1
 8006a3c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	dc08      	bgt.n	8006a56 <__ulp+0x1e>
 8006a44:	425b      	negs	r3, r3
 8006a46:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006a4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006a4e:	da04      	bge.n	8006a5a <__ulp+0x22>
 8006a50:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006a54:	4113      	asrs	r3, r2
 8006a56:	2200      	movs	r2, #0
 8006a58:	e008      	b.n	8006a6c <__ulp+0x34>
 8006a5a:	f1a2 0314 	sub.w	r3, r2, #20
 8006a5e:	2b1e      	cmp	r3, #30
 8006a60:	bfd6      	itet	le
 8006a62:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006a66:	2201      	movgt	r2, #1
 8006a68:	40da      	lsrle	r2, r3
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4610      	mov	r0, r2
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	7ff00000 	.word	0x7ff00000

08006a78 <__b2d>:
 8006a78:	6902      	ldr	r2, [r0, #16]
 8006a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7c:	f100 0614 	add.w	r6, r0, #20
 8006a80:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006a84:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006a88:	4f1e      	ldr	r7, [pc, #120]	@ (8006b04 <__b2d+0x8c>)
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f7ff fd5a 	bl	8006544 <__hi0bits>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f1c0 0020 	rsb	r0, r0, #32
 8006a96:	2b0a      	cmp	r3, #10
 8006a98:	f1a2 0504 	sub.w	r5, r2, #4
 8006a9c:	6008      	str	r0, [r1, #0]
 8006a9e:	dc12      	bgt.n	8006ac6 <__b2d+0x4e>
 8006aa0:	42ae      	cmp	r6, r5
 8006aa2:	bf2c      	ite	cs
 8006aa4:	2200      	movcs	r2, #0
 8006aa6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006aaa:	f1c3 0c0b 	rsb	ip, r3, #11
 8006aae:	3315      	adds	r3, #21
 8006ab0:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006ab4:	fa04 f303 	lsl.w	r3, r4, r3
 8006ab8:	fa22 f20c 	lsr.w	r2, r2, ip
 8006abc:	ea4e 0107 	orr.w	r1, lr, r7
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ac6:	42ae      	cmp	r6, r5
 8006ac8:	bf36      	itet	cc
 8006aca:	f1a2 0508 	subcc.w	r5, r2, #8
 8006ace:	2200      	movcs	r2, #0
 8006ad0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006ad4:	3b0b      	subs	r3, #11
 8006ad6:	d012      	beq.n	8006afe <__b2d+0x86>
 8006ad8:	f1c3 0720 	rsb	r7, r3, #32
 8006adc:	fa22 f107 	lsr.w	r1, r2, r7
 8006ae0:	409c      	lsls	r4, r3
 8006ae2:	430c      	orrs	r4, r1
 8006ae4:	42b5      	cmp	r5, r6
 8006ae6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006aea:	bf94      	ite	ls
 8006aec:	2400      	movls	r4, #0
 8006aee:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006af2:	409a      	lsls	r2, r3
 8006af4:	40fc      	lsrs	r4, r7
 8006af6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006afa:	4322      	orrs	r2, r4
 8006afc:	e7e1      	b.n	8006ac2 <__b2d+0x4a>
 8006afe:	ea44 0107 	orr.w	r1, r4, r7
 8006b02:	e7de      	b.n	8006ac2 <__b2d+0x4a>
 8006b04:	3ff00000 	.word	0x3ff00000

08006b08 <__d2b>:
 8006b08:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	4690      	mov	r8, r2
 8006b10:	4699      	mov	r9, r3
 8006b12:	9e08      	ldr	r6, [sp, #32]
 8006b14:	f7ff fc24 	bl	8006360 <_Balloc>
 8006b18:	4604      	mov	r4, r0
 8006b1a:	b930      	cbnz	r0, 8006b2a <__d2b+0x22>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	f240 310f 	movw	r1, #783	@ 0x30f
 8006b22:	4b23      	ldr	r3, [pc, #140]	@ (8006bb0 <__d2b+0xa8>)
 8006b24:	4823      	ldr	r0, [pc, #140]	@ (8006bb4 <__d2b+0xac>)
 8006b26:	f7fe ffb3 	bl	8005a90 <__assert_func>
 8006b2a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b32:	b10d      	cbz	r5, 8006b38 <__d2b+0x30>
 8006b34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	f1b8 0300 	subs.w	r3, r8, #0
 8006b3e:	d024      	beq.n	8006b8a <__d2b+0x82>
 8006b40:	4668      	mov	r0, sp
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	f7ff fd1d 	bl	8006582 <__lo0bits>
 8006b48:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b4c:	b1d8      	cbz	r0, 8006b86 <__d2b+0x7e>
 8006b4e:	f1c0 0320 	rsb	r3, r0, #32
 8006b52:	fa02 f303 	lsl.w	r3, r2, r3
 8006b56:	430b      	orrs	r3, r1
 8006b58:	40c2      	lsrs	r2, r0
 8006b5a:	6163      	str	r3, [r4, #20]
 8006b5c:	9201      	str	r2, [sp, #4]
 8006b5e:	9b01      	ldr	r3, [sp, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	bf0c      	ite	eq
 8006b64:	2201      	moveq	r2, #1
 8006b66:	2202      	movne	r2, #2
 8006b68:	61a3      	str	r3, [r4, #24]
 8006b6a:	6122      	str	r2, [r4, #16]
 8006b6c:	b1ad      	cbz	r5, 8006b9a <__d2b+0x92>
 8006b6e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b72:	4405      	add	r5, r0
 8006b74:	6035      	str	r5, [r6, #0]
 8006b76:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b7c:	6018      	str	r0, [r3, #0]
 8006b7e:	4620      	mov	r0, r4
 8006b80:	b002      	add	sp, #8
 8006b82:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006b86:	6161      	str	r1, [r4, #20]
 8006b88:	e7e9      	b.n	8006b5e <__d2b+0x56>
 8006b8a:	a801      	add	r0, sp, #4
 8006b8c:	f7ff fcf9 	bl	8006582 <__lo0bits>
 8006b90:	9b01      	ldr	r3, [sp, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	6163      	str	r3, [r4, #20]
 8006b96:	3020      	adds	r0, #32
 8006b98:	e7e7      	b.n	8006b6a <__d2b+0x62>
 8006b9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ba2:	6030      	str	r0, [r6, #0]
 8006ba4:	6918      	ldr	r0, [r3, #16]
 8006ba6:	f7ff fccd 	bl	8006544 <__hi0bits>
 8006baa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bae:	e7e4      	b.n	8006b7a <__d2b+0x72>
 8006bb0:	08007879 	.word	0x08007879
 8006bb4:	080078ea 	.word	0x080078ea

08006bb8 <__ratio>:
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	b085      	sub	sp, #20
 8006bbe:	e9cd 1000 	strd	r1, r0, [sp]
 8006bc2:	a902      	add	r1, sp, #8
 8006bc4:	f7ff ff58 	bl	8006a78 <__b2d>
 8006bc8:	468b      	mov	fp, r1
 8006bca:	4606      	mov	r6, r0
 8006bcc:	460f      	mov	r7, r1
 8006bce:	9800      	ldr	r0, [sp, #0]
 8006bd0:	a903      	add	r1, sp, #12
 8006bd2:	f7ff ff51 	bl	8006a78 <__b2d>
 8006bd6:	460d      	mov	r5, r1
 8006bd8:	9b01      	ldr	r3, [sp, #4]
 8006bda:	4689      	mov	r9, r1
 8006bdc:	6919      	ldr	r1, [r3, #16]
 8006bde:	9b00      	ldr	r3, [sp, #0]
 8006be0:	4604      	mov	r4, r0
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	4630      	mov	r0, r6
 8006be6:	1ac9      	subs	r1, r1, r3
 8006be8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006bec:	1a9b      	subs	r3, r3, r2
 8006bee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bfcd      	iteet	gt
 8006bf6:	463a      	movgt	r2, r7
 8006bf8:	462a      	movle	r2, r5
 8006bfa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006bfe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006c02:	bfd8      	it	le
 8006c04:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006c08:	464b      	mov	r3, r9
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	4659      	mov	r1, fp
 8006c0e:	f7f9 fd97 	bl	8000740 <__aeabi_ddiv>
 8006c12:	b005      	add	sp, #20
 8006c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c18 <__copybits>:
 8006c18:	3901      	subs	r1, #1
 8006c1a:	b570      	push	{r4, r5, r6, lr}
 8006c1c:	1149      	asrs	r1, r1, #5
 8006c1e:	6914      	ldr	r4, [r2, #16]
 8006c20:	3101      	adds	r1, #1
 8006c22:	f102 0314 	add.w	r3, r2, #20
 8006c26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006c2a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c2e:	1f05      	subs	r5, r0, #4
 8006c30:	42a3      	cmp	r3, r4
 8006c32:	d30c      	bcc.n	8006c4e <__copybits+0x36>
 8006c34:	1aa3      	subs	r3, r4, r2
 8006c36:	3b11      	subs	r3, #17
 8006c38:	f023 0303 	bic.w	r3, r3, #3
 8006c3c:	3211      	adds	r2, #17
 8006c3e:	42a2      	cmp	r2, r4
 8006c40:	bf88      	it	hi
 8006c42:	2300      	movhi	r3, #0
 8006c44:	4418      	add	r0, r3
 8006c46:	2300      	movs	r3, #0
 8006c48:	4288      	cmp	r0, r1
 8006c4a:	d305      	bcc.n	8006c58 <__copybits+0x40>
 8006c4c:	bd70      	pop	{r4, r5, r6, pc}
 8006c4e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006c52:	f845 6f04 	str.w	r6, [r5, #4]!
 8006c56:	e7eb      	b.n	8006c30 <__copybits+0x18>
 8006c58:	f840 3b04 	str.w	r3, [r0], #4
 8006c5c:	e7f4      	b.n	8006c48 <__copybits+0x30>

08006c5e <__any_on>:
 8006c5e:	f100 0214 	add.w	r2, r0, #20
 8006c62:	6900      	ldr	r0, [r0, #16]
 8006c64:	114b      	asrs	r3, r1, #5
 8006c66:	4298      	cmp	r0, r3
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	db11      	blt.n	8006c90 <__any_on+0x32>
 8006c6c:	dd0a      	ble.n	8006c84 <__any_on+0x26>
 8006c6e:	f011 011f 	ands.w	r1, r1, #31
 8006c72:	d007      	beq.n	8006c84 <__any_on+0x26>
 8006c74:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006c78:	fa24 f001 	lsr.w	r0, r4, r1
 8006c7c:	fa00 f101 	lsl.w	r1, r0, r1
 8006c80:	428c      	cmp	r4, r1
 8006c82:	d10b      	bne.n	8006c9c <__any_on+0x3e>
 8006c84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d803      	bhi.n	8006c94 <__any_on+0x36>
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	bd10      	pop	{r4, pc}
 8006c90:	4603      	mov	r3, r0
 8006c92:	e7f7      	b.n	8006c84 <__any_on+0x26>
 8006c94:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c98:	2900      	cmp	r1, #0
 8006c9a:	d0f5      	beq.n	8006c88 <__any_on+0x2a>
 8006c9c:	2001      	movs	r0, #1
 8006c9e:	e7f6      	b.n	8006c8e <__any_on+0x30>

08006ca0 <__ascii_wctomb>:
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	4608      	mov	r0, r1
 8006ca4:	b141      	cbz	r1, 8006cb8 <__ascii_wctomb+0x18>
 8006ca6:	2aff      	cmp	r2, #255	@ 0xff
 8006ca8:	d904      	bls.n	8006cb4 <__ascii_wctomb+0x14>
 8006caa:	228a      	movs	r2, #138	@ 0x8a
 8006cac:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	4770      	bx	lr
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	700a      	strb	r2, [r1, #0]
 8006cb8:	4770      	bx	lr
	...

08006cbc <__sflush_r>:
 8006cbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc2:	0716      	lsls	r6, r2, #28
 8006cc4:	4605      	mov	r5, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	d454      	bmi.n	8006d74 <__sflush_r+0xb8>
 8006cca:	684b      	ldr	r3, [r1, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dc02      	bgt.n	8006cd6 <__sflush_r+0x1a>
 8006cd0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	dd48      	ble.n	8006d68 <__sflush_r+0xac>
 8006cd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cd8:	2e00      	cmp	r6, #0
 8006cda:	d045      	beq.n	8006d68 <__sflush_r+0xac>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ce2:	682f      	ldr	r7, [r5, #0]
 8006ce4:	6a21      	ldr	r1, [r4, #32]
 8006ce6:	602b      	str	r3, [r5, #0]
 8006ce8:	d030      	beq.n	8006d4c <__sflush_r+0x90>
 8006cea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	0759      	lsls	r1, r3, #29
 8006cf0:	d505      	bpl.n	8006cfe <__sflush_r+0x42>
 8006cf2:	6863      	ldr	r3, [r4, #4]
 8006cf4:	1ad2      	subs	r2, r2, r3
 8006cf6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006cf8:	b10b      	cbz	r3, 8006cfe <__sflush_r+0x42>
 8006cfa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006cfc:	1ad2      	subs	r2, r2, r3
 8006cfe:	2300      	movs	r3, #0
 8006d00:	4628      	mov	r0, r5
 8006d02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d04:	6a21      	ldr	r1, [r4, #32]
 8006d06:	47b0      	blx	r6
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	d106      	bne.n	8006d1c <__sflush_r+0x60>
 8006d0e:	6829      	ldr	r1, [r5, #0]
 8006d10:	291d      	cmp	r1, #29
 8006d12:	d82b      	bhi.n	8006d6c <__sflush_r+0xb0>
 8006d14:	4a28      	ldr	r2, [pc, #160]	@ (8006db8 <__sflush_r+0xfc>)
 8006d16:	40ca      	lsrs	r2, r1
 8006d18:	07d6      	lsls	r6, r2, #31
 8006d1a:	d527      	bpl.n	8006d6c <__sflush_r+0xb0>
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	6062      	str	r2, [r4, #4]
 8006d20:	6922      	ldr	r2, [r4, #16]
 8006d22:	04d9      	lsls	r1, r3, #19
 8006d24:	6022      	str	r2, [r4, #0]
 8006d26:	d504      	bpl.n	8006d32 <__sflush_r+0x76>
 8006d28:	1c42      	adds	r2, r0, #1
 8006d2a:	d101      	bne.n	8006d30 <__sflush_r+0x74>
 8006d2c:	682b      	ldr	r3, [r5, #0]
 8006d2e:	b903      	cbnz	r3, 8006d32 <__sflush_r+0x76>
 8006d30:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d34:	602f      	str	r7, [r5, #0]
 8006d36:	b1b9      	cbz	r1, 8006d68 <__sflush_r+0xac>
 8006d38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d3c:	4299      	cmp	r1, r3
 8006d3e:	d002      	beq.n	8006d46 <__sflush_r+0x8a>
 8006d40:	4628      	mov	r0, r5
 8006d42:	f7fe fec3 	bl	8005acc <_free_r>
 8006d46:	2300      	movs	r3, #0
 8006d48:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d4a:	e00d      	b.n	8006d68 <__sflush_r+0xac>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b0      	blx	r6
 8006d52:	4602      	mov	r2, r0
 8006d54:	1c50      	adds	r0, r2, #1
 8006d56:	d1c9      	bne.n	8006cec <__sflush_r+0x30>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0c6      	beq.n	8006cec <__sflush_r+0x30>
 8006d5e:	2b1d      	cmp	r3, #29
 8006d60:	d001      	beq.n	8006d66 <__sflush_r+0xaa>
 8006d62:	2b16      	cmp	r3, #22
 8006d64:	d11d      	bne.n	8006da2 <__sflush_r+0xe6>
 8006d66:	602f      	str	r7, [r5, #0]
 8006d68:	2000      	movs	r0, #0
 8006d6a:	e021      	b.n	8006db0 <__sflush_r+0xf4>
 8006d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d70:	b21b      	sxth	r3, r3
 8006d72:	e01a      	b.n	8006daa <__sflush_r+0xee>
 8006d74:	690f      	ldr	r7, [r1, #16]
 8006d76:	2f00      	cmp	r7, #0
 8006d78:	d0f6      	beq.n	8006d68 <__sflush_r+0xac>
 8006d7a:	0793      	lsls	r3, r2, #30
 8006d7c:	bf18      	it	ne
 8006d7e:	2300      	movne	r3, #0
 8006d80:	680e      	ldr	r6, [r1, #0]
 8006d82:	bf08      	it	eq
 8006d84:	694b      	ldreq	r3, [r1, #20]
 8006d86:	1bf6      	subs	r6, r6, r7
 8006d88:	600f      	str	r7, [r1, #0]
 8006d8a:	608b      	str	r3, [r1, #8]
 8006d8c:	2e00      	cmp	r6, #0
 8006d8e:	ddeb      	ble.n	8006d68 <__sflush_r+0xac>
 8006d90:	4633      	mov	r3, r6
 8006d92:	463a      	mov	r2, r7
 8006d94:	4628      	mov	r0, r5
 8006d96:	6a21      	ldr	r1, [r4, #32]
 8006d98:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006d9c:	47e0      	blx	ip
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	dc07      	bgt.n	8006db2 <__sflush_r+0xf6>
 8006da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006da6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006daa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dae:	81a3      	strh	r3, [r4, #12]
 8006db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006db2:	4407      	add	r7, r0
 8006db4:	1a36      	subs	r6, r6, r0
 8006db6:	e7e9      	b.n	8006d8c <__sflush_r+0xd0>
 8006db8:	20400001 	.word	0x20400001

08006dbc <_fflush_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	690b      	ldr	r3, [r1, #16]
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	b913      	cbnz	r3, 8006dcc <_fflush_r+0x10>
 8006dc6:	2500      	movs	r5, #0
 8006dc8:	4628      	mov	r0, r5
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	b118      	cbz	r0, 8006dd6 <_fflush_r+0x1a>
 8006dce:	6a03      	ldr	r3, [r0, #32]
 8006dd0:	b90b      	cbnz	r3, 8006dd6 <_fflush_r+0x1a>
 8006dd2:	f7fe fce1 	bl	8005798 <__sinit>
 8006dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0f3      	beq.n	8006dc6 <_fflush_r+0xa>
 8006dde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006de0:	07d0      	lsls	r0, r2, #31
 8006de2:	d404      	bmi.n	8006dee <_fflush_r+0x32>
 8006de4:	0599      	lsls	r1, r3, #22
 8006de6:	d402      	bmi.n	8006dee <_fflush_r+0x32>
 8006de8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dea:	f7fe fe36 	bl	8005a5a <__retarget_lock_acquire_recursive>
 8006dee:	4628      	mov	r0, r5
 8006df0:	4621      	mov	r1, r4
 8006df2:	f7ff ff63 	bl	8006cbc <__sflush_r>
 8006df6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006df8:	4605      	mov	r5, r0
 8006dfa:	07da      	lsls	r2, r3, #31
 8006dfc:	d4e4      	bmi.n	8006dc8 <_fflush_r+0xc>
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	059b      	lsls	r3, r3, #22
 8006e02:	d4e1      	bmi.n	8006dc8 <_fflush_r+0xc>
 8006e04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e06:	f7fe fe29 	bl	8005a5c <__retarget_lock_release_recursive>
 8006e0a:	e7dd      	b.n	8006dc8 <_fflush_r+0xc>

08006e0c <fiprintf>:
 8006e0c:	b40e      	push	{r1, r2, r3}
 8006e0e:	b503      	push	{r0, r1, lr}
 8006e10:	4601      	mov	r1, r0
 8006e12:	ab03      	add	r3, sp, #12
 8006e14:	4805      	ldr	r0, [pc, #20]	@ (8006e2c <fiprintf+0x20>)
 8006e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e1a:	6800      	ldr	r0, [r0, #0]
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	f000 f859 	bl	8006ed4 <_vfiprintf_r>
 8006e22:	b002      	add	sp, #8
 8006e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e28:	b003      	add	sp, #12
 8006e2a:	4770      	bx	lr
 8006e2c:	20000194 	.word	0x20000194

08006e30 <_sbrk_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	2300      	movs	r3, #0
 8006e34:	4d05      	ldr	r5, [pc, #20]	@ (8006e4c <_sbrk_r+0x1c>)
 8006e36:	4604      	mov	r4, r0
 8006e38:	4608      	mov	r0, r1
 8006e3a:	602b      	str	r3, [r5, #0]
 8006e3c:	f7fa ffec 	bl	8001e18 <_sbrk>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d102      	bne.n	8006e4a <_sbrk_r+0x1a>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	b103      	cbz	r3, 8006e4a <_sbrk_r+0x1a>
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	20000464 	.word	0x20000464

08006e50 <abort>:
 8006e50:	2006      	movs	r0, #6
 8006e52:	b508      	push	{r3, lr}
 8006e54:	f000 fba2 	bl	800759c <raise>
 8006e58:	2001      	movs	r0, #1
 8006e5a:	f7fa ff68 	bl	8001d2e <_exit>

08006e5e <_calloc_r>:
 8006e5e:	b570      	push	{r4, r5, r6, lr}
 8006e60:	fba1 5402 	umull	r5, r4, r1, r2
 8006e64:	b934      	cbnz	r4, 8006e74 <_calloc_r+0x16>
 8006e66:	4629      	mov	r1, r5
 8006e68:	f7ff f9dc 	bl	8006224 <_malloc_r>
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	b928      	cbnz	r0, 8006e7c <_calloc_r+0x1e>
 8006e70:	4630      	mov	r0, r6
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
 8006e74:	220c      	movs	r2, #12
 8006e76:	2600      	movs	r6, #0
 8006e78:	6002      	str	r2, [r0, #0]
 8006e7a:	e7f9      	b.n	8006e70 <_calloc_r+0x12>
 8006e7c:	462a      	mov	r2, r5
 8006e7e:	4621      	mov	r1, r4
 8006e80:	f7fe fd03 	bl	800588a <memset>
 8006e84:	e7f4      	b.n	8006e70 <_calloc_r+0x12>

08006e86 <__sfputc_r>:
 8006e86:	6893      	ldr	r3, [r2, #8]
 8006e88:	b410      	push	{r4}
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	6093      	str	r3, [r2, #8]
 8006e90:	da07      	bge.n	8006ea2 <__sfputc_r+0x1c>
 8006e92:	6994      	ldr	r4, [r2, #24]
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	db01      	blt.n	8006e9c <__sfputc_r+0x16>
 8006e98:	290a      	cmp	r1, #10
 8006e9a:	d102      	bne.n	8006ea2 <__sfputc_r+0x1c>
 8006e9c:	bc10      	pop	{r4}
 8006e9e:	f000 bac1 	b.w	8007424 <__swbuf_r>
 8006ea2:	6813      	ldr	r3, [r2, #0]
 8006ea4:	1c58      	adds	r0, r3, #1
 8006ea6:	6010      	str	r0, [r2, #0]
 8006ea8:	7019      	strb	r1, [r3, #0]
 8006eaa:	4608      	mov	r0, r1
 8006eac:	bc10      	pop	{r4}
 8006eae:	4770      	bx	lr

08006eb0 <__sfputs_r>:
 8006eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460f      	mov	r7, r1
 8006eb6:	4614      	mov	r4, r2
 8006eb8:	18d5      	adds	r5, r2, r3
 8006eba:	42ac      	cmp	r4, r5
 8006ebc:	d101      	bne.n	8006ec2 <__sfputs_r+0x12>
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	e007      	b.n	8006ed2 <__sfputs_r+0x22>
 8006ec2:	463a      	mov	r2, r7
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eca:	f7ff ffdc 	bl	8006e86 <__sfputc_r>
 8006ece:	1c43      	adds	r3, r0, #1
 8006ed0:	d1f3      	bne.n	8006eba <__sfputs_r+0xa>
 8006ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ed4 <_vfiprintf_r>:
 8006ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	460d      	mov	r5, r1
 8006eda:	4614      	mov	r4, r2
 8006edc:	4698      	mov	r8, r3
 8006ede:	4606      	mov	r6, r0
 8006ee0:	b09d      	sub	sp, #116	@ 0x74
 8006ee2:	b118      	cbz	r0, 8006eec <_vfiprintf_r+0x18>
 8006ee4:	6a03      	ldr	r3, [r0, #32]
 8006ee6:	b90b      	cbnz	r3, 8006eec <_vfiprintf_r+0x18>
 8006ee8:	f7fe fc56 	bl	8005798 <__sinit>
 8006eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006eee:	07d9      	lsls	r1, r3, #31
 8006ef0:	d405      	bmi.n	8006efe <_vfiprintf_r+0x2a>
 8006ef2:	89ab      	ldrh	r3, [r5, #12]
 8006ef4:	059a      	lsls	r2, r3, #22
 8006ef6:	d402      	bmi.n	8006efe <_vfiprintf_r+0x2a>
 8006ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006efa:	f7fe fdae 	bl	8005a5a <__retarget_lock_acquire_recursive>
 8006efe:	89ab      	ldrh	r3, [r5, #12]
 8006f00:	071b      	lsls	r3, r3, #28
 8006f02:	d501      	bpl.n	8006f08 <_vfiprintf_r+0x34>
 8006f04:	692b      	ldr	r3, [r5, #16]
 8006f06:	b99b      	cbnz	r3, 8006f30 <_vfiprintf_r+0x5c>
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f000 fac8 	bl	80074a0 <__swsetup_r>
 8006f10:	b170      	cbz	r0, 8006f30 <_vfiprintf_r+0x5c>
 8006f12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f14:	07dc      	lsls	r4, r3, #31
 8006f16:	d504      	bpl.n	8006f22 <_vfiprintf_r+0x4e>
 8006f18:	f04f 30ff 	mov.w	r0, #4294967295
 8006f1c:	b01d      	add	sp, #116	@ 0x74
 8006f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f22:	89ab      	ldrh	r3, [r5, #12]
 8006f24:	0598      	lsls	r0, r3, #22
 8006f26:	d4f7      	bmi.n	8006f18 <_vfiprintf_r+0x44>
 8006f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f2a:	f7fe fd97 	bl	8005a5c <__retarget_lock_release_recursive>
 8006f2e:	e7f3      	b.n	8006f18 <_vfiprintf_r+0x44>
 8006f30:	2300      	movs	r3, #0
 8006f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f34:	2320      	movs	r3, #32
 8006f36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f3a:	2330      	movs	r3, #48	@ 0x30
 8006f3c:	f04f 0901 	mov.w	r9, #1
 8006f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f44:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80070f0 <_vfiprintf_r+0x21c>
 8006f48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f4c:	4623      	mov	r3, r4
 8006f4e:	469a      	mov	sl, r3
 8006f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f54:	b10a      	cbz	r2, 8006f5a <_vfiprintf_r+0x86>
 8006f56:	2a25      	cmp	r2, #37	@ 0x25
 8006f58:	d1f9      	bne.n	8006f4e <_vfiprintf_r+0x7a>
 8006f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f5e:	d00b      	beq.n	8006f78 <_vfiprintf_r+0xa4>
 8006f60:	465b      	mov	r3, fp
 8006f62:	4622      	mov	r2, r4
 8006f64:	4629      	mov	r1, r5
 8006f66:	4630      	mov	r0, r6
 8006f68:	f7ff ffa2 	bl	8006eb0 <__sfputs_r>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	f000 80a7 	beq.w	80070c0 <_vfiprintf_r+0x1ec>
 8006f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f74:	445a      	add	r2, fp
 8006f76:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f78:	f89a 3000 	ldrb.w	r3, [sl]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 809f 	beq.w	80070c0 <_vfiprintf_r+0x1ec>
 8006f82:	2300      	movs	r3, #0
 8006f84:	f04f 32ff 	mov.w	r2, #4294967295
 8006f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f8c:	f10a 0a01 	add.w	sl, sl, #1
 8006f90:	9304      	str	r3, [sp, #16]
 8006f92:	9307      	str	r3, [sp, #28]
 8006f94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f98:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f9a:	4654      	mov	r4, sl
 8006f9c:	2205      	movs	r2, #5
 8006f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa2:	4853      	ldr	r0, [pc, #332]	@ (80070f0 <_vfiprintf_r+0x21c>)
 8006fa4:	f000 fb16 	bl	80075d4 <memchr>
 8006fa8:	9a04      	ldr	r2, [sp, #16]
 8006faa:	b9d8      	cbnz	r0, 8006fe4 <_vfiprintf_r+0x110>
 8006fac:	06d1      	lsls	r1, r2, #27
 8006fae:	bf44      	itt	mi
 8006fb0:	2320      	movmi	r3, #32
 8006fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fb6:	0713      	lsls	r3, r2, #28
 8006fb8:	bf44      	itt	mi
 8006fba:	232b      	movmi	r3, #43	@ 0x2b
 8006fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fc6:	d015      	beq.n	8006ff4 <_vfiprintf_r+0x120>
 8006fc8:	4654      	mov	r4, sl
 8006fca:	2000      	movs	r0, #0
 8006fcc:	f04f 0c0a 	mov.w	ip, #10
 8006fd0:	9a07      	ldr	r2, [sp, #28]
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fd8:	3b30      	subs	r3, #48	@ 0x30
 8006fda:	2b09      	cmp	r3, #9
 8006fdc:	d94b      	bls.n	8007076 <_vfiprintf_r+0x1a2>
 8006fde:	b1b0      	cbz	r0, 800700e <_vfiprintf_r+0x13a>
 8006fe0:	9207      	str	r2, [sp, #28]
 8006fe2:	e014      	b.n	800700e <_vfiprintf_r+0x13a>
 8006fe4:	eba0 0308 	sub.w	r3, r0, r8
 8006fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8006fec:	4313      	orrs	r3, r2
 8006fee:	46a2      	mov	sl, r4
 8006ff0:	9304      	str	r3, [sp, #16]
 8006ff2:	e7d2      	b.n	8006f9a <_vfiprintf_r+0xc6>
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	1d19      	adds	r1, r3, #4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	9103      	str	r1, [sp, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bfbb      	ittet	lt
 8007000:	425b      	neglt	r3, r3
 8007002:	f042 0202 	orrlt.w	r2, r2, #2
 8007006:	9307      	strge	r3, [sp, #28]
 8007008:	9307      	strlt	r3, [sp, #28]
 800700a:	bfb8      	it	lt
 800700c:	9204      	strlt	r2, [sp, #16]
 800700e:	7823      	ldrb	r3, [r4, #0]
 8007010:	2b2e      	cmp	r3, #46	@ 0x2e
 8007012:	d10a      	bne.n	800702a <_vfiprintf_r+0x156>
 8007014:	7863      	ldrb	r3, [r4, #1]
 8007016:	2b2a      	cmp	r3, #42	@ 0x2a
 8007018:	d132      	bne.n	8007080 <_vfiprintf_r+0x1ac>
 800701a:	9b03      	ldr	r3, [sp, #12]
 800701c:	3402      	adds	r4, #2
 800701e:	1d1a      	adds	r2, r3, #4
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	9203      	str	r2, [sp, #12]
 8007024:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007028:	9305      	str	r3, [sp, #20]
 800702a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80070f4 <_vfiprintf_r+0x220>
 800702e:	2203      	movs	r2, #3
 8007030:	4650      	mov	r0, sl
 8007032:	7821      	ldrb	r1, [r4, #0]
 8007034:	f000 face 	bl	80075d4 <memchr>
 8007038:	b138      	cbz	r0, 800704a <_vfiprintf_r+0x176>
 800703a:	2240      	movs	r2, #64	@ 0x40
 800703c:	9b04      	ldr	r3, [sp, #16]
 800703e:	eba0 000a 	sub.w	r0, r0, sl
 8007042:	4082      	lsls	r2, r0
 8007044:	4313      	orrs	r3, r2
 8007046:	3401      	adds	r4, #1
 8007048:	9304      	str	r3, [sp, #16]
 800704a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800704e:	2206      	movs	r2, #6
 8007050:	4829      	ldr	r0, [pc, #164]	@ (80070f8 <_vfiprintf_r+0x224>)
 8007052:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007056:	f000 fabd 	bl	80075d4 <memchr>
 800705a:	2800      	cmp	r0, #0
 800705c:	d03f      	beq.n	80070de <_vfiprintf_r+0x20a>
 800705e:	4b27      	ldr	r3, [pc, #156]	@ (80070fc <_vfiprintf_r+0x228>)
 8007060:	bb1b      	cbnz	r3, 80070aa <_vfiprintf_r+0x1d6>
 8007062:	9b03      	ldr	r3, [sp, #12]
 8007064:	3307      	adds	r3, #7
 8007066:	f023 0307 	bic.w	r3, r3, #7
 800706a:	3308      	adds	r3, #8
 800706c:	9303      	str	r3, [sp, #12]
 800706e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007070:	443b      	add	r3, r7
 8007072:	9309      	str	r3, [sp, #36]	@ 0x24
 8007074:	e76a      	b.n	8006f4c <_vfiprintf_r+0x78>
 8007076:	460c      	mov	r4, r1
 8007078:	2001      	movs	r0, #1
 800707a:	fb0c 3202 	mla	r2, ip, r2, r3
 800707e:	e7a8      	b.n	8006fd2 <_vfiprintf_r+0xfe>
 8007080:	2300      	movs	r3, #0
 8007082:	f04f 0c0a 	mov.w	ip, #10
 8007086:	4619      	mov	r1, r3
 8007088:	3401      	adds	r4, #1
 800708a:	9305      	str	r3, [sp, #20]
 800708c:	4620      	mov	r0, r4
 800708e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007092:	3a30      	subs	r2, #48	@ 0x30
 8007094:	2a09      	cmp	r2, #9
 8007096:	d903      	bls.n	80070a0 <_vfiprintf_r+0x1cc>
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0c6      	beq.n	800702a <_vfiprintf_r+0x156>
 800709c:	9105      	str	r1, [sp, #20]
 800709e:	e7c4      	b.n	800702a <_vfiprintf_r+0x156>
 80070a0:	4604      	mov	r4, r0
 80070a2:	2301      	movs	r3, #1
 80070a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80070a8:	e7f0      	b.n	800708c <_vfiprintf_r+0x1b8>
 80070aa:	ab03      	add	r3, sp, #12
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	462a      	mov	r2, r5
 80070b0:	4630      	mov	r0, r6
 80070b2:	4b13      	ldr	r3, [pc, #76]	@ (8007100 <_vfiprintf_r+0x22c>)
 80070b4:	a904      	add	r1, sp, #16
 80070b6:	f3af 8000 	nop.w
 80070ba:	4607      	mov	r7, r0
 80070bc:	1c78      	adds	r0, r7, #1
 80070be:	d1d6      	bne.n	800706e <_vfiprintf_r+0x19a>
 80070c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070c2:	07d9      	lsls	r1, r3, #31
 80070c4:	d405      	bmi.n	80070d2 <_vfiprintf_r+0x1fe>
 80070c6:	89ab      	ldrh	r3, [r5, #12]
 80070c8:	059a      	lsls	r2, r3, #22
 80070ca:	d402      	bmi.n	80070d2 <_vfiprintf_r+0x1fe>
 80070cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070ce:	f7fe fcc5 	bl	8005a5c <__retarget_lock_release_recursive>
 80070d2:	89ab      	ldrh	r3, [r5, #12]
 80070d4:	065b      	lsls	r3, r3, #25
 80070d6:	f53f af1f 	bmi.w	8006f18 <_vfiprintf_r+0x44>
 80070da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070dc:	e71e      	b.n	8006f1c <_vfiprintf_r+0x48>
 80070de:	ab03      	add	r3, sp, #12
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	462a      	mov	r2, r5
 80070e4:	4630      	mov	r0, r6
 80070e6:	4b06      	ldr	r3, [pc, #24]	@ (8007100 <_vfiprintf_r+0x22c>)
 80070e8:	a904      	add	r1, sp, #16
 80070ea:	f000 f87d 	bl	80071e8 <_printf_i>
 80070ee:	e7e4      	b.n	80070ba <_vfiprintf_r+0x1e6>
 80070f0:	08007943 	.word	0x08007943
 80070f4:	08007949 	.word	0x08007949
 80070f8:	0800794d 	.word	0x0800794d
 80070fc:	00000000 	.word	0x00000000
 8007100:	08006eb1 	.word	0x08006eb1

08007104 <_printf_common>:
 8007104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	4616      	mov	r6, r2
 800710a:	4698      	mov	r8, r3
 800710c:	688a      	ldr	r2, [r1, #8]
 800710e:	690b      	ldr	r3, [r1, #16]
 8007110:	4607      	mov	r7, r0
 8007112:	4293      	cmp	r3, r2
 8007114:	bfb8      	it	lt
 8007116:	4613      	movlt	r3, r2
 8007118:	6033      	str	r3, [r6, #0]
 800711a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800711e:	460c      	mov	r4, r1
 8007120:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007124:	b10a      	cbz	r2, 800712a <_printf_common+0x26>
 8007126:	3301      	adds	r3, #1
 8007128:	6033      	str	r3, [r6, #0]
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	0699      	lsls	r1, r3, #26
 800712e:	bf42      	ittt	mi
 8007130:	6833      	ldrmi	r3, [r6, #0]
 8007132:	3302      	addmi	r3, #2
 8007134:	6033      	strmi	r3, [r6, #0]
 8007136:	6825      	ldr	r5, [r4, #0]
 8007138:	f015 0506 	ands.w	r5, r5, #6
 800713c:	d106      	bne.n	800714c <_printf_common+0x48>
 800713e:	f104 0a19 	add.w	sl, r4, #25
 8007142:	68e3      	ldr	r3, [r4, #12]
 8007144:	6832      	ldr	r2, [r6, #0]
 8007146:	1a9b      	subs	r3, r3, r2
 8007148:	42ab      	cmp	r3, r5
 800714a:	dc2b      	bgt.n	80071a4 <_printf_common+0xa0>
 800714c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007150:	6822      	ldr	r2, [r4, #0]
 8007152:	3b00      	subs	r3, #0
 8007154:	bf18      	it	ne
 8007156:	2301      	movne	r3, #1
 8007158:	0692      	lsls	r2, r2, #26
 800715a:	d430      	bmi.n	80071be <_printf_common+0xba>
 800715c:	4641      	mov	r1, r8
 800715e:	4638      	mov	r0, r7
 8007160:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007164:	47c8      	blx	r9
 8007166:	3001      	adds	r0, #1
 8007168:	d023      	beq.n	80071b2 <_printf_common+0xae>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	6922      	ldr	r2, [r4, #16]
 800716e:	f003 0306 	and.w	r3, r3, #6
 8007172:	2b04      	cmp	r3, #4
 8007174:	bf14      	ite	ne
 8007176:	2500      	movne	r5, #0
 8007178:	6833      	ldreq	r3, [r6, #0]
 800717a:	f04f 0600 	mov.w	r6, #0
 800717e:	bf08      	it	eq
 8007180:	68e5      	ldreq	r5, [r4, #12]
 8007182:	f104 041a 	add.w	r4, r4, #26
 8007186:	bf08      	it	eq
 8007188:	1aed      	subeq	r5, r5, r3
 800718a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800718e:	bf08      	it	eq
 8007190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007194:	4293      	cmp	r3, r2
 8007196:	bfc4      	itt	gt
 8007198:	1a9b      	subgt	r3, r3, r2
 800719a:	18ed      	addgt	r5, r5, r3
 800719c:	42b5      	cmp	r5, r6
 800719e:	d11a      	bne.n	80071d6 <_printf_common+0xd2>
 80071a0:	2000      	movs	r0, #0
 80071a2:	e008      	b.n	80071b6 <_printf_common+0xb2>
 80071a4:	2301      	movs	r3, #1
 80071a6:	4652      	mov	r2, sl
 80071a8:	4641      	mov	r1, r8
 80071aa:	4638      	mov	r0, r7
 80071ac:	47c8      	blx	r9
 80071ae:	3001      	adds	r0, #1
 80071b0:	d103      	bne.n	80071ba <_printf_common+0xb6>
 80071b2:	f04f 30ff 	mov.w	r0, #4294967295
 80071b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ba:	3501      	adds	r5, #1
 80071bc:	e7c1      	b.n	8007142 <_printf_common+0x3e>
 80071be:	2030      	movs	r0, #48	@ 0x30
 80071c0:	18e1      	adds	r1, r4, r3
 80071c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071cc:	4422      	add	r2, r4
 80071ce:	3302      	adds	r3, #2
 80071d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071d4:	e7c2      	b.n	800715c <_printf_common+0x58>
 80071d6:	2301      	movs	r3, #1
 80071d8:	4622      	mov	r2, r4
 80071da:	4641      	mov	r1, r8
 80071dc:	4638      	mov	r0, r7
 80071de:	47c8      	blx	r9
 80071e0:	3001      	adds	r0, #1
 80071e2:	d0e6      	beq.n	80071b2 <_printf_common+0xae>
 80071e4:	3601      	adds	r6, #1
 80071e6:	e7d9      	b.n	800719c <_printf_common+0x98>

080071e8 <_printf_i>:
 80071e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	7e0f      	ldrb	r7, [r1, #24]
 80071ee:	4691      	mov	r9, r2
 80071f0:	2f78      	cmp	r7, #120	@ 0x78
 80071f2:	4680      	mov	r8, r0
 80071f4:	460c      	mov	r4, r1
 80071f6:	469a      	mov	sl, r3
 80071f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071fe:	d807      	bhi.n	8007210 <_printf_i+0x28>
 8007200:	2f62      	cmp	r7, #98	@ 0x62
 8007202:	d80a      	bhi.n	800721a <_printf_i+0x32>
 8007204:	2f00      	cmp	r7, #0
 8007206:	f000 80d1 	beq.w	80073ac <_printf_i+0x1c4>
 800720a:	2f58      	cmp	r7, #88	@ 0x58
 800720c:	f000 80b8 	beq.w	8007380 <_printf_i+0x198>
 8007210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007218:	e03a      	b.n	8007290 <_printf_i+0xa8>
 800721a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800721e:	2b15      	cmp	r3, #21
 8007220:	d8f6      	bhi.n	8007210 <_printf_i+0x28>
 8007222:	a101      	add	r1, pc, #4	@ (adr r1, 8007228 <_printf_i+0x40>)
 8007224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007228:	08007281 	.word	0x08007281
 800722c:	08007295 	.word	0x08007295
 8007230:	08007211 	.word	0x08007211
 8007234:	08007211 	.word	0x08007211
 8007238:	08007211 	.word	0x08007211
 800723c:	08007211 	.word	0x08007211
 8007240:	08007295 	.word	0x08007295
 8007244:	08007211 	.word	0x08007211
 8007248:	08007211 	.word	0x08007211
 800724c:	08007211 	.word	0x08007211
 8007250:	08007211 	.word	0x08007211
 8007254:	08007393 	.word	0x08007393
 8007258:	080072bf 	.word	0x080072bf
 800725c:	0800734d 	.word	0x0800734d
 8007260:	08007211 	.word	0x08007211
 8007264:	08007211 	.word	0x08007211
 8007268:	080073b5 	.word	0x080073b5
 800726c:	08007211 	.word	0x08007211
 8007270:	080072bf 	.word	0x080072bf
 8007274:	08007211 	.word	0x08007211
 8007278:	08007211 	.word	0x08007211
 800727c:	08007355 	.word	0x08007355
 8007280:	6833      	ldr	r3, [r6, #0]
 8007282:	1d1a      	adds	r2, r3, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6032      	str	r2, [r6, #0]
 8007288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800728c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007290:	2301      	movs	r3, #1
 8007292:	e09c      	b.n	80073ce <_printf_i+0x1e6>
 8007294:	6833      	ldr	r3, [r6, #0]
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	1d19      	adds	r1, r3, #4
 800729a:	6031      	str	r1, [r6, #0]
 800729c:	0606      	lsls	r6, r0, #24
 800729e:	d501      	bpl.n	80072a4 <_printf_i+0xbc>
 80072a0:	681d      	ldr	r5, [r3, #0]
 80072a2:	e003      	b.n	80072ac <_printf_i+0xc4>
 80072a4:	0645      	lsls	r5, r0, #25
 80072a6:	d5fb      	bpl.n	80072a0 <_printf_i+0xb8>
 80072a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072ac:	2d00      	cmp	r5, #0
 80072ae:	da03      	bge.n	80072b8 <_printf_i+0xd0>
 80072b0:	232d      	movs	r3, #45	@ 0x2d
 80072b2:	426d      	negs	r5, r5
 80072b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072b8:	230a      	movs	r3, #10
 80072ba:	4858      	ldr	r0, [pc, #352]	@ (800741c <_printf_i+0x234>)
 80072bc:	e011      	b.n	80072e2 <_printf_i+0xfa>
 80072be:	6821      	ldr	r1, [r4, #0]
 80072c0:	6833      	ldr	r3, [r6, #0]
 80072c2:	0608      	lsls	r0, r1, #24
 80072c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80072c8:	d402      	bmi.n	80072d0 <_printf_i+0xe8>
 80072ca:	0649      	lsls	r1, r1, #25
 80072cc:	bf48      	it	mi
 80072ce:	b2ad      	uxthmi	r5, r5
 80072d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80072d2:	6033      	str	r3, [r6, #0]
 80072d4:	bf14      	ite	ne
 80072d6:	230a      	movne	r3, #10
 80072d8:	2308      	moveq	r3, #8
 80072da:	4850      	ldr	r0, [pc, #320]	@ (800741c <_printf_i+0x234>)
 80072dc:	2100      	movs	r1, #0
 80072de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072e2:	6866      	ldr	r6, [r4, #4]
 80072e4:	2e00      	cmp	r6, #0
 80072e6:	60a6      	str	r6, [r4, #8]
 80072e8:	db05      	blt.n	80072f6 <_printf_i+0x10e>
 80072ea:	6821      	ldr	r1, [r4, #0]
 80072ec:	432e      	orrs	r6, r5
 80072ee:	f021 0104 	bic.w	r1, r1, #4
 80072f2:	6021      	str	r1, [r4, #0]
 80072f4:	d04b      	beq.n	800738e <_printf_i+0x1a6>
 80072f6:	4616      	mov	r6, r2
 80072f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80072fc:	fb03 5711 	mls	r7, r3, r1, r5
 8007300:	5dc7      	ldrb	r7, [r0, r7]
 8007302:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007306:	462f      	mov	r7, r5
 8007308:	42bb      	cmp	r3, r7
 800730a:	460d      	mov	r5, r1
 800730c:	d9f4      	bls.n	80072f8 <_printf_i+0x110>
 800730e:	2b08      	cmp	r3, #8
 8007310:	d10b      	bne.n	800732a <_printf_i+0x142>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	07df      	lsls	r7, r3, #31
 8007316:	d508      	bpl.n	800732a <_printf_i+0x142>
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	6861      	ldr	r1, [r4, #4]
 800731c:	4299      	cmp	r1, r3
 800731e:	bfde      	ittt	le
 8007320:	2330      	movle	r3, #48	@ 0x30
 8007322:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007326:	f106 36ff 	addle.w	r6, r6, #4294967295
 800732a:	1b92      	subs	r2, r2, r6
 800732c:	6122      	str	r2, [r4, #16]
 800732e:	464b      	mov	r3, r9
 8007330:	4621      	mov	r1, r4
 8007332:	4640      	mov	r0, r8
 8007334:	f8cd a000 	str.w	sl, [sp]
 8007338:	aa03      	add	r2, sp, #12
 800733a:	f7ff fee3 	bl	8007104 <_printf_common>
 800733e:	3001      	adds	r0, #1
 8007340:	d14a      	bne.n	80073d8 <_printf_i+0x1f0>
 8007342:	f04f 30ff 	mov.w	r0, #4294967295
 8007346:	b004      	add	sp, #16
 8007348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	f043 0320 	orr.w	r3, r3, #32
 8007352:	6023      	str	r3, [r4, #0]
 8007354:	2778      	movs	r7, #120	@ 0x78
 8007356:	4832      	ldr	r0, [pc, #200]	@ (8007420 <_printf_i+0x238>)
 8007358:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	6831      	ldr	r1, [r6, #0]
 8007360:	061f      	lsls	r7, r3, #24
 8007362:	f851 5b04 	ldr.w	r5, [r1], #4
 8007366:	d402      	bmi.n	800736e <_printf_i+0x186>
 8007368:	065f      	lsls	r7, r3, #25
 800736a:	bf48      	it	mi
 800736c:	b2ad      	uxthmi	r5, r5
 800736e:	6031      	str	r1, [r6, #0]
 8007370:	07d9      	lsls	r1, r3, #31
 8007372:	bf44      	itt	mi
 8007374:	f043 0320 	orrmi.w	r3, r3, #32
 8007378:	6023      	strmi	r3, [r4, #0]
 800737a:	b11d      	cbz	r5, 8007384 <_printf_i+0x19c>
 800737c:	2310      	movs	r3, #16
 800737e:	e7ad      	b.n	80072dc <_printf_i+0xf4>
 8007380:	4826      	ldr	r0, [pc, #152]	@ (800741c <_printf_i+0x234>)
 8007382:	e7e9      	b.n	8007358 <_printf_i+0x170>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	f023 0320 	bic.w	r3, r3, #32
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	e7f6      	b.n	800737c <_printf_i+0x194>
 800738e:	4616      	mov	r6, r2
 8007390:	e7bd      	b.n	800730e <_printf_i+0x126>
 8007392:	6833      	ldr	r3, [r6, #0]
 8007394:	6825      	ldr	r5, [r4, #0]
 8007396:	1d18      	adds	r0, r3, #4
 8007398:	6961      	ldr	r1, [r4, #20]
 800739a:	6030      	str	r0, [r6, #0]
 800739c:	062e      	lsls	r6, r5, #24
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	d501      	bpl.n	80073a6 <_printf_i+0x1be>
 80073a2:	6019      	str	r1, [r3, #0]
 80073a4:	e002      	b.n	80073ac <_printf_i+0x1c4>
 80073a6:	0668      	lsls	r0, r5, #25
 80073a8:	d5fb      	bpl.n	80073a2 <_printf_i+0x1ba>
 80073aa:	8019      	strh	r1, [r3, #0]
 80073ac:	2300      	movs	r3, #0
 80073ae:	4616      	mov	r6, r2
 80073b0:	6123      	str	r3, [r4, #16]
 80073b2:	e7bc      	b.n	800732e <_printf_i+0x146>
 80073b4:	6833      	ldr	r3, [r6, #0]
 80073b6:	2100      	movs	r1, #0
 80073b8:	1d1a      	adds	r2, r3, #4
 80073ba:	6032      	str	r2, [r6, #0]
 80073bc:	681e      	ldr	r6, [r3, #0]
 80073be:	6862      	ldr	r2, [r4, #4]
 80073c0:	4630      	mov	r0, r6
 80073c2:	f000 f907 	bl	80075d4 <memchr>
 80073c6:	b108      	cbz	r0, 80073cc <_printf_i+0x1e4>
 80073c8:	1b80      	subs	r0, r0, r6
 80073ca:	6060      	str	r0, [r4, #4]
 80073cc:	6863      	ldr	r3, [r4, #4]
 80073ce:	6123      	str	r3, [r4, #16]
 80073d0:	2300      	movs	r3, #0
 80073d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073d6:	e7aa      	b.n	800732e <_printf_i+0x146>
 80073d8:	4632      	mov	r2, r6
 80073da:	4649      	mov	r1, r9
 80073dc:	4640      	mov	r0, r8
 80073de:	6923      	ldr	r3, [r4, #16]
 80073e0:	47d0      	blx	sl
 80073e2:	3001      	adds	r0, #1
 80073e4:	d0ad      	beq.n	8007342 <_printf_i+0x15a>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	079b      	lsls	r3, r3, #30
 80073ea:	d413      	bmi.n	8007414 <_printf_i+0x22c>
 80073ec:	68e0      	ldr	r0, [r4, #12]
 80073ee:	9b03      	ldr	r3, [sp, #12]
 80073f0:	4298      	cmp	r0, r3
 80073f2:	bfb8      	it	lt
 80073f4:	4618      	movlt	r0, r3
 80073f6:	e7a6      	b.n	8007346 <_printf_i+0x15e>
 80073f8:	2301      	movs	r3, #1
 80073fa:	4632      	mov	r2, r6
 80073fc:	4649      	mov	r1, r9
 80073fe:	4640      	mov	r0, r8
 8007400:	47d0      	blx	sl
 8007402:	3001      	adds	r0, #1
 8007404:	d09d      	beq.n	8007342 <_printf_i+0x15a>
 8007406:	3501      	adds	r5, #1
 8007408:	68e3      	ldr	r3, [r4, #12]
 800740a:	9903      	ldr	r1, [sp, #12]
 800740c:	1a5b      	subs	r3, r3, r1
 800740e:	42ab      	cmp	r3, r5
 8007410:	dcf2      	bgt.n	80073f8 <_printf_i+0x210>
 8007412:	e7eb      	b.n	80073ec <_printf_i+0x204>
 8007414:	2500      	movs	r5, #0
 8007416:	f104 0619 	add.w	r6, r4, #25
 800741a:	e7f5      	b.n	8007408 <_printf_i+0x220>
 800741c:	08007954 	.word	0x08007954
 8007420:	08007965 	.word	0x08007965

08007424 <__swbuf_r>:
 8007424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007426:	460e      	mov	r6, r1
 8007428:	4614      	mov	r4, r2
 800742a:	4605      	mov	r5, r0
 800742c:	b118      	cbz	r0, 8007436 <__swbuf_r+0x12>
 800742e:	6a03      	ldr	r3, [r0, #32]
 8007430:	b90b      	cbnz	r3, 8007436 <__swbuf_r+0x12>
 8007432:	f7fe f9b1 	bl	8005798 <__sinit>
 8007436:	69a3      	ldr	r3, [r4, #24]
 8007438:	60a3      	str	r3, [r4, #8]
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	071a      	lsls	r2, r3, #28
 800743e:	d501      	bpl.n	8007444 <__swbuf_r+0x20>
 8007440:	6923      	ldr	r3, [r4, #16]
 8007442:	b943      	cbnz	r3, 8007456 <__swbuf_r+0x32>
 8007444:	4621      	mov	r1, r4
 8007446:	4628      	mov	r0, r5
 8007448:	f000 f82a 	bl	80074a0 <__swsetup_r>
 800744c:	b118      	cbz	r0, 8007456 <__swbuf_r+0x32>
 800744e:	f04f 37ff 	mov.w	r7, #4294967295
 8007452:	4638      	mov	r0, r7
 8007454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	6922      	ldr	r2, [r4, #16]
 800745a:	b2f6      	uxtb	r6, r6
 800745c:	1a98      	subs	r0, r3, r2
 800745e:	6963      	ldr	r3, [r4, #20]
 8007460:	4637      	mov	r7, r6
 8007462:	4283      	cmp	r3, r0
 8007464:	dc05      	bgt.n	8007472 <__swbuf_r+0x4e>
 8007466:	4621      	mov	r1, r4
 8007468:	4628      	mov	r0, r5
 800746a:	f7ff fca7 	bl	8006dbc <_fflush_r>
 800746e:	2800      	cmp	r0, #0
 8007470:	d1ed      	bne.n	800744e <__swbuf_r+0x2a>
 8007472:	68a3      	ldr	r3, [r4, #8]
 8007474:	3b01      	subs	r3, #1
 8007476:	60a3      	str	r3, [r4, #8]
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	6022      	str	r2, [r4, #0]
 800747e:	701e      	strb	r6, [r3, #0]
 8007480:	6962      	ldr	r2, [r4, #20]
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	429a      	cmp	r2, r3
 8007486:	d004      	beq.n	8007492 <__swbuf_r+0x6e>
 8007488:	89a3      	ldrh	r3, [r4, #12]
 800748a:	07db      	lsls	r3, r3, #31
 800748c:	d5e1      	bpl.n	8007452 <__swbuf_r+0x2e>
 800748e:	2e0a      	cmp	r6, #10
 8007490:	d1df      	bne.n	8007452 <__swbuf_r+0x2e>
 8007492:	4621      	mov	r1, r4
 8007494:	4628      	mov	r0, r5
 8007496:	f7ff fc91 	bl	8006dbc <_fflush_r>
 800749a:	2800      	cmp	r0, #0
 800749c:	d0d9      	beq.n	8007452 <__swbuf_r+0x2e>
 800749e:	e7d6      	b.n	800744e <__swbuf_r+0x2a>

080074a0 <__swsetup_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4b29      	ldr	r3, [pc, #164]	@ (8007548 <__swsetup_r+0xa8>)
 80074a4:	4605      	mov	r5, r0
 80074a6:	6818      	ldr	r0, [r3, #0]
 80074a8:	460c      	mov	r4, r1
 80074aa:	b118      	cbz	r0, 80074b4 <__swsetup_r+0x14>
 80074ac:	6a03      	ldr	r3, [r0, #32]
 80074ae:	b90b      	cbnz	r3, 80074b4 <__swsetup_r+0x14>
 80074b0:	f7fe f972 	bl	8005798 <__sinit>
 80074b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b8:	0719      	lsls	r1, r3, #28
 80074ba:	d422      	bmi.n	8007502 <__swsetup_r+0x62>
 80074bc:	06da      	lsls	r2, r3, #27
 80074be:	d407      	bmi.n	80074d0 <__swsetup_r+0x30>
 80074c0:	2209      	movs	r2, #9
 80074c2:	602a      	str	r2, [r5, #0]
 80074c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	e033      	b.n	8007538 <__swsetup_r+0x98>
 80074d0:	0758      	lsls	r0, r3, #29
 80074d2:	d512      	bpl.n	80074fa <__swsetup_r+0x5a>
 80074d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074d6:	b141      	cbz	r1, 80074ea <__swsetup_r+0x4a>
 80074d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074dc:	4299      	cmp	r1, r3
 80074de:	d002      	beq.n	80074e6 <__swsetup_r+0x46>
 80074e0:	4628      	mov	r0, r5
 80074e2:	f7fe faf3 	bl	8005acc <_free_r>
 80074e6:	2300      	movs	r3, #0
 80074e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074f0:	81a3      	strh	r3, [r4, #12]
 80074f2:	2300      	movs	r3, #0
 80074f4:	6063      	str	r3, [r4, #4]
 80074f6:	6923      	ldr	r3, [r4, #16]
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	f043 0308 	orr.w	r3, r3, #8
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	b94b      	cbnz	r3, 800751a <__swsetup_r+0x7a>
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800750c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007510:	d003      	beq.n	800751a <__swsetup_r+0x7a>
 8007512:	4621      	mov	r1, r4
 8007514:	4628      	mov	r0, r5
 8007516:	f000 f890 	bl	800763a <__smakebuf_r>
 800751a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751e:	f013 0201 	ands.w	r2, r3, #1
 8007522:	d00a      	beq.n	800753a <__swsetup_r+0x9a>
 8007524:	2200      	movs	r2, #0
 8007526:	60a2      	str	r2, [r4, #8]
 8007528:	6962      	ldr	r2, [r4, #20]
 800752a:	4252      	negs	r2, r2
 800752c:	61a2      	str	r2, [r4, #24]
 800752e:	6922      	ldr	r2, [r4, #16]
 8007530:	b942      	cbnz	r2, 8007544 <__swsetup_r+0xa4>
 8007532:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007536:	d1c5      	bne.n	80074c4 <__swsetup_r+0x24>
 8007538:	bd38      	pop	{r3, r4, r5, pc}
 800753a:	0799      	lsls	r1, r3, #30
 800753c:	bf58      	it	pl
 800753e:	6962      	ldrpl	r2, [r4, #20]
 8007540:	60a2      	str	r2, [r4, #8]
 8007542:	e7f4      	b.n	800752e <__swsetup_r+0x8e>
 8007544:	2000      	movs	r0, #0
 8007546:	e7f7      	b.n	8007538 <__swsetup_r+0x98>
 8007548:	20000194 	.word	0x20000194

0800754c <_raise_r>:
 800754c:	291f      	cmp	r1, #31
 800754e:	b538      	push	{r3, r4, r5, lr}
 8007550:	4605      	mov	r5, r0
 8007552:	460c      	mov	r4, r1
 8007554:	d904      	bls.n	8007560 <_raise_r+0x14>
 8007556:	2316      	movs	r3, #22
 8007558:	6003      	str	r3, [r0, #0]
 800755a:	f04f 30ff 	mov.w	r0, #4294967295
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007562:	b112      	cbz	r2, 800756a <_raise_r+0x1e>
 8007564:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007568:	b94b      	cbnz	r3, 800757e <_raise_r+0x32>
 800756a:	4628      	mov	r0, r5
 800756c:	f000 f830 	bl	80075d0 <_getpid_r>
 8007570:	4622      	mov	r2, r4
 8007572:	4601      	mov	r1, r0
 8007574:	4628      	mov	r0, r5
 8007576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800757a:	f000 b817 	b.w	80075ac <_kill_r>
 800757e:	2b01      	cmp	r3, #1
 8007580:	d00a      	beq.n	8007598 <_raise_r+0x4c>
 8007582:	1c59      	adds	r1, r3, #1
 8007584:	d103      	bne.n	800758e <_raise_r+0x42>
 8007586:	2316      	movs	r3, #22
 8007588:	6003      	str	r3, [r0, #0]
 800758a:	2001      	movs	r0, #1
 800758c:	e7e7      	b.n	800755e <_raise_r+0x12>
 800758e:	2100      	movs	r1, #0
 8007590:	4620      	mov	r0, r4
 8007592:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007596:	4798      	blx	r3
 8007598:	2000      	movs	r0, #0
 800759a:	e7e0      	b.n	800755e <_raise_r+0x12>

0800759c <raise>:
 800759c:	4b02      	ldr	r3, [pc, #8]	@ (80075a8 <raise+0xc>)
 800759e:	4601      	mov	r1, r0
 80075a0:	6818      	ldr	r0, [r3, #0]
 80075a2:	f7ff bfd3 	b.w	800754c <_raise_r>
 80075a6:	bf00      	nop
 80075a8:	20000194 	.word	0x20000194

080075ac <_kill_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	2300      	movs	r3, #0
 80075b0:	4d06      	ldr	r5, [pc, #24]	@ (80075cc <_kill_r+0x20>)
 80075b2:	4604      	mov	r4, r0
 80075b4:	4608      	mov	r0, r1
 80075b6:	4611      	mov	r1, r2
 80075b8:	602b      	str	r3, [r5, #0]
 80075ba:	f7fa fba8 	bl	8001d0e <_kill>
 80075be:	1c43      	adds	r3, r0, #1
 80075c0:	d102      	bne.n	80075c8 <_kill_r+0x1c>
 80075c2:	682b      	ldr	r3, [r5, #0]
 80075c4:	b103      	cbz	r3, 80075c8 <_kill_r+0x1c>
 80075c6:	6023      	str	r3, [r4, #0]
 80075c8:	bd38      	pop	{r3, r4, r5, pc}
 80075ca:	bf00      	nop
 80075cc:	20000464 	.word	0x20000464

080075d0 <_getpid_r>:
 80075d0:	f7fa bb96 	b.w	8001d00 <_getpid>

080075d4 <memchr>:
 80075d4:	4603      	mov	r3, r0
 80075d6:	b510      	push	{r4, lr}
 80075d8:	b2c9      	uxtb	r1, r1
 80075da:	4402      	add	r2, r0
 80075dc:	4293      	cmp	r3, r2
 80075de:	4618      	mov	r0, r3
 80075e0:	d101      	bne.n	80075e6 <memchr+0x12>
 80075e2:	2000      	movs	r0, #0
 80075e4:	e003      	b.n	80075ee <memchr+0x1a>
 80075e6:	7804      	ldrb	r4, [r0, #0]
 80075e8:	3301      	adds	r3, #1
 80075ea:	428c      	cmp	r4, r1
 80075ec:	d1f6      	bne.n	80075dc <memchr+0x8>
 80075ee:	bd10      	pop	{r4, pc}

080075f0 <__swhatbuf_r>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	460c      	mov	r4, r1
 80075f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f8:	4615      	mov	r5, r2
 80075fa:	2900      	cmp	r1, #0
 80075fc:	461e      	mov	r6, r3
 80075fe:	b096      	sub	sp, #88	@ 0x58
 8007600:	da0c      	bge.n	800761c <__swhatbuf_r+0x2c>
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	2100      	movs	r1, #0
 8007606:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800760a:	bf14      	ite	ne
 800760c:	2340      	movne	r3, #64	@ 0x40
 800760e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007612:	2000      	movs	r0, #0
 8007614:	6031      	str	r1, [r6, #0]
 8007616:	602b      	str	r3, [r5, #0]
 8007618:	b016      	add	sp, #88	@ 0x58
 800761a:	bd70      	pop	{r4, r5, r6, pc}
 800761c:	466a      	mov	r2, sp
 800761e:	f000 f849 	bl	80076b4 <_fstat_r>
 8007622:	2800      	cmp	r0, #0
 8007624:	dbed      	blt.n	8007602 <__swhatbuf_r+0x12>
 8007626:	9901      	ldr	r1, [sp, #4]
 8007628:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800762c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007630:	4259      	negs	r1, r3
 8007632:	4159      	adcs	r1, r3
 8007634:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007638:	e7eb      	b.n	8007612 <__swhatbuf_r+0x22>

0800763a <__smakebuf_r>:
 800763a:	898b      	ldrh	r3, [r1, #12]
 800763c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800763e:	079d      	lsls	r5, r3, #30
 8007640:	4606      	mov	r6, r0
 8007642:	460c      	mov	r4, r1
 8007644:	d507      	bpl.n	8007656 <__smakebuf_r+0x1c>
 8007646:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800764a:	6023      	str	r3, [r4, #0]
 800764c:	6123      	str	r3, [r4, #16]
 800764e:	2301      	movs	r3, #1
 8007650:	6163      	str	r3, [r4, #20]
 8007652:	b003      	add	sp, #12
 8007654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007656:	466a      	mov	r2, sp
 8007658:	ab01      	add	r3, sp, #4
 800765a:	f7ff ffc9 	bl	80075f0 <__swhatbuf_r>
 800765e:	9f00      	ldr	r7, [sp, #0]
 8007660:	4605      	mov	r5, r0
 8007662:	4639      	mov	r1, r7
 8007664:	4630      	mov	r0, r6
 8007666:	f7fe fddd 	bl	8006224 <_malloc_r>
 800766a:	b948      	cbnz	r0, 8007680 <__smakebuf_r+0x46>
 800766c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007670:	059a      	lsls	r2, r3, #22
 8007672:	d4ee      	bmi.n	8007652 <__smakebuf_r+0x18>
 8007674:	f023 0303 	bic.w	r3, r3, #3
 8007678:	f043 0302 	orr.w	r3, r3, #2
 800767c:	81a3      	strh	r3, [r4, #12]
 800767e:	e7e2      	b.n	8007646 <__smakebuf_r+0xc>
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800768a:	81a3      	strh	r3, [r4, #12]
 800768c:	9b01      	ldr	r3, [sp, #4]
 800768e:	6020      	str	r0, [r4, #0]
 8007690:	b15b      	cbz	r3, 80076aa <__smakebuf_r+0x70>
 8007692:	4630      	mov	r0, r6
 8007694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007698:	f000 f81e 	bl	80076d8 <_isatty_r>
 800769c:	b128      	cbz	r0, 80076aa <__smakebuf_r+0x70>
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	f023 0303 	bic.w	r3, r3, #3
 80076a4:	f043 0301 	orr.w	r3, r3, #1
 80076a8:	81a3      	strh	r3, [r4, #12]
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	431d      	orrs	r5, r3
 80076ae:	81a5      	strh	r5, [r4, #12]
 80076b0:	e7cf      	b.n	8007652 <__smakebuf_r+0x18>
	...

080076b4 <_fstat_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	2300      	movs	r3, #0
 80076b8:	4d06      	ldr	r5, [pc, #24]	@ (80076d4 <_fstat_r+0x20>)
 80076ba:	4604      	mov	r4, r0
 80076bc:	4608      	mov	r0, r1
 80076be:	4611      	mov	r1, r2
 80076c0:	602b      	str	r3, [r5, #0]
 80076c2:	f7fa fb83 	bl	8001dcc <_fstat>
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	d102      	bne.n	80076d0 <_fstat_r+0x1c>
 80076ca:	682b      	ldr	r3, [r5, #0]
 80076cc:	b103      	cbz	r3, 80076d0 <_fstat_r+0x1c>
 80076ce:	6023      	str	r3, [r4, #0]
 80076d0:	bd38      	pop	{r3, r4, r5, pc}
 80076d2:	bf00      	nop
 80076d4:	20000464 	.word	0x20000464

080076d8 <_isatty_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	2300      	movs	r3, #0
 80076dc:	4d05      	ldr	r5, [pc, #20]	@ (80076f4 <_isatty_r+0x1c>)
 80076de:	4604      	mov	r4, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	602b      	str	r3, [r5, #0]
 80076e4:	f7fa fb81 	bl	8001dea <_isatty>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d102      	bne.n	80076f2 <_isatty_r+0x1a>
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	b103      	cbz	r3, 80076f2 <_isatty_r+0x1a>
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	20000464 	.word	0x20000464

080076f8 <lroundf>:
 80076f8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80076fc:	2800      	cmp	r0, #0
 80076fe:	b510      	push	{r4, lr}
 8007700:	f1a3 047f 	sub.w	r4, r3, #127	@ 0x7f
 8007704:	bfac      	ite	ge
 8007706:	2101      	movge	r1, #1
 8007708:	f04f 31ff 	movlt.w	r1, #4294967295
 800770c:	2c1e      	cmp	r4, #30
 800770e:	dc1b      	bgt.n	8007748 <lroundf+0x50>
 8007710:	2c00      	cmp	r4, #0
 8007712:	da04      	bge.n	800771e <lroundf+0x26>
 8007714:	3401      	adds	r4, #1
 8007716:	bf18      	it	ne
 8007718:	2100      	movne	r1, #0
 800771a:	4608      	mov	r0, r1
 800771c:	bd10      	pop	{r4, pc}
 800771e:	2c16      	cmp	r4, #22
 8007720:	bfd8      	it	le
 8007722:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 8007726:	f3c0 0216 	ubfx	r2, r0, #0, #23
 800772a:	bfd8      	it	le
 800772c:	4123      	asrle	r3, r4
 800772e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8007732:	bfcd      	iteet	gt
 8007734:	3b96      	subgt	r3, #150	@ 0x96
 8007736:	189b      	addle	r3, r3, r2
 8007738:	f1c4 0417 	rsble	r4, r4, #23
 800773c:	fa02 f303 	lslgt.w	r3, r2, r3
 8007740:	bfd8      	it	le
 8007742:	40e3      	lsrle	r3, r4
 8007744:	4359      	muls	r1, r3
 8007746:	e7e8      	b.n	800771a <lroundf+0x22>
 8007748:	f7f9 fcda 	bl	8001100 <__aeabi_f2iz>
 800774c:	4601      	mov	r1, r0
 800774e:	e7e4      	b.n	800771a <lroundf+0x22>

08007750 <_init>:
 8007750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007752:	bf00      	nop
 8007754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007756:	bc08      	pop	{r3}
 8007758:	469e      	mov	lr, r3
 800775a:	4770      	bx	lr

0800775c <_fini>:
 800775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775e:	bf00      	nop
 8007760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007762:	bc08      	pop	{r3}
 8007764:	469e      	mov	lr, r3
 8007766:	4770      	bx	lr
