
servo_two.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007730  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08007840  08007840  00008840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ca8  08007ca8  000091e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007ca8  08007ca8  00008ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cb0  08007cb0  000091e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb0  08007cb0  00008cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cb4  08007cb4  00008cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08007cb8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200001e4  08007e9c  000091e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08007e9c  0000947c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6cc  00000000  00000000  0000920d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e40  00000000  00000000  000158d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00017720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1f  00000000  00000000  00018410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018961  00000000  00000000  00018e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e118  00000000  00000000  00031790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce90  00000000  00000000  0003f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc738  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a70  00000000  00000000  000cc77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d11ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007828 	.word	0x08007828

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007828 	.word	0x08007828

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_fmul>:
 8000d48:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d50:	bf1e      	ittt	ne
 8000d52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d56:	ea92 0f0c 	teqne	r2, ip
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d06f      	beq.n	8000e40 <__aeabi_fmul+0xf8>
 8000d60:	441a      	add	r2, r3
 8000d62:	ea80 0c01 	eor.w	ip, r0, r1
 8000d66:	0240      	lsls	r0, r0, #9
 8000d68:	bf18      	it	ne
 8000d6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6e:	d01e      	beq.n	8000dae <__aeabi_fmul+0x66>
 8000d70:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d84:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d88:	bf3e      	ittt	cc
 8000d8a:	0049      	lslcc	r1, r1, #1
 8000d8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d90:	005b      	lslcc	r3, r3, #1
 8000d92:	ea40 0001 	orr.w	r0, r0, r1
 8000d96:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d9a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d9c:	d81d      	bhi.n	8000dda <__aeabi_fmul+0x92>
 8000d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000da2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da6:	bf08      	it	eq
 8000da8:	f020 0001 	biceq.w	r0, r0, #1
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db6:	bf08      	it	eq
 8000db8:	0249      	lsleq	r1, r1, #9
 8000dba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc4:	bfc2      	ittt	gt
 8000dc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dce:	4770      	bxgt	lr
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	dc5d      	bgt.n	8000e98 <__aeabi_fmul+0x150>
 8000ddc:	f112 0f19 	cmn.w	r2, #25
 8000de0:	bfdc      	itt	le
 8000de2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de6:	4770      	bxle	lr
 8000de8:	f1c2 0200 	rsb	r2, r2, #0
 8000dec:	0041      	lsls	r1, r0, #1
 8000dee:	fa21 f102 	lsr.w	r1, r1, r2
 8000df2:	f1c2 0220 	rsb	r2, r2, #32
 8000df6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfe:	f140 0000 	adc.w	r0, r0, #0
 8000e02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e06:	bf08      	it	eq
 8000e08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0c:	4770      	bx	lr
 8000e0e:	f092 0f00 	teq	r2, #0
 8000e12:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0040      	lsleq	r0, r0, #1
 8000e1a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1e:	3a01      	subeq	r2, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xce>
 8000e22:	ea40 000c 	orr.w	r0, r0, ip
 8000e26:	f093 0f00 	teq	r3, #0
 8000e2a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2e:	bf02      	ittt	eq
 8000e30:	0049      	lsleq	r1, r1, #1
 8000e32:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e36:	3b01      	subeq	r3, #1
 8000e38:	d0f9      	beq.n	8000e2e <__aeabi_fmul+0xe6>
 8000e3a:	ea41 010c 	orr.w	r1, r1, ip
 8000e3e:	e78f      	b.n	8000d60 <__aeabi_fmul+0x18>
 8000e40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e44:	ea92 0f0c 	teq	r2, ip
 8000e48:	bf18      	it	ne
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d00a      	beq.n	8000e66 <__aeabi_fmul+0x11e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	d1d8      	bne.n	8000e0e <__aeabi_fmul+0xc6>
 8000e5c:	ea80 0001 	eor.w	r0, r0, r1
 8000e60:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e64:	4770      	bx	lr
 8000e66:	f090 0f00 	teq	r0, #0
 8000e6a:	bf17      	itett	ne
 8000e6c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e70:	4608      	moveq	r0, r1
 8000e72:	f091 0f00 	teqne	r1, #0
 8000e76:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e7a:	d014      	beq.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	d101      	bne.n	8000e86 <__aeabi_fmul+0x13e>
 8000e82:	0242      	lsls	r2, r0, #9
 8000e84:	d10f      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e86:	ea93 0f0c 	teq	r3, ip
 8000e8a:	d103      	bne.n	8000e94 <__aeabi_fmul+0x14c>
 8000e8c:	024b      	lsls	r3, r1, #9
 8000e8e:	bf18      	it	ne
 8000e90:	4608      	movne	r0, r1
 8000e92:	d108      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea4:	4770      	bx	lr
 8000ea6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eaa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eae:	4770      	bx	lr

08000eb0 <__aeabi_fdiv>:
 8000eb0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb8:	bf1e      	ittt	ne
 8000eba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ebe:	ea92 0f0c 	teqne	r2, ip
 8000ec2:	ea93 0f0c 	teqne	r3, ip
 8000ec6:	d069      	beq.n	8000f9c <__aeabi_fdiv+0xec>
 8000ec8:	eba2 0203 	sub.w	r2, r2, r3
 8000ecc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed0:	0249      	lsls	r1, r1, #9
 8000ed2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed6:	d037      	beq.n	8000f48 <__aeabi_fdiv+0x98>
 8000ed8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000edc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	bf38      	it	cc
 8000eec:	005b      	lslcc	r3, r3, #1
 8000eee:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ef2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	bf24      	itt	cs
 8000efa:	1a5b      	subcs	r3, r3, r1
 8000efc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f12:	bf24      	itt	cs
 8000f14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	bf18      	it	ne
 8000f2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f32:	d1e0      	bne.n	8000ef6 <__aeabi_fdiv+0x46>
 8000f34:	2afd      	cmp	r2, #253	@ 0xfd
 8000f36:	f63f af50 	bhi.w	8000dda <__aeabi_fmul+0x92>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f40:	bf08      	it	eq
 8000f42:	f020 0001 	biceq.w	r0, r0, #1
 8000f46:	4770      	bx	lr
 8000f48:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f50:	327f      	adds	r2, #127	@ 0x7f
 8000f52:	bfc2      	ittt	gt
 8000f54:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f5c:	4770      	bxgt	lr
 8000f5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	3a01      	subs	r2, #1
 8000f68:	e737      	b.n	8000dda <__aeabi_fmul+0x92>
 8000f6a:	f092 0f00 	teq	r2, #0
 8000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0040      	lsleq	r0, r0, #1
 8000f76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f7a:	3a01      	subeq	r2, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xc2>
 8000f7e:	ea40 000c 	orr.w	r0, r0, ip
 8000f82:	f093 0f00 	teq	r3, #0
 8000f86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0049      	lsleq	r1, r1, #1
 8000f8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f92:	3b01      	subeq	r3, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fdiv+0xda>
 8000f96:	ea41 010c 	orr.w	r1, r1, ip
 8000f9a:	e795      	b.n	8000ec8 <__aeabi_fdiv+0x18>
 8000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	d108      	bne.n	8000fb8 <__aeabi_fdiv+0x108>
 8000fa6:	0242      	lsls	r2, r0, #9
 8000fa8:	f47f af7d 	bne.w	8000ea6 <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	f47f af70 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e776      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	d104      	bne.n	8000fc8 <__aeabi_fdiv+0x118>
 8000fbe:	024b      	lsls	r3, r1, #9
 8000fc0:	f43f af4c 	beq.w	8000e5c <__aeabi_fmul+0x114>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e76e      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fc8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fcc:	bf18      	it	ne
 8000fce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fd2:	d1ca      	bne.n	8000f6a <__aeabi_fdiv+0xba>
 8000fd4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd8:	f47f af5c 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fdc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fe0:	f47f af3c 	bne.w	8000e5c <__aeabi_fmul+0x114>
 8000fe4:	e75f      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fe6:	bf00      	nop

08000fe8 <__gesf2>:
 8000fe8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fec:	e006      	b.n	8000ffc <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__lesf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	e002      	b.n	8000ffc <__cmpsf2+0x4>
 8000ff6:	bf00      	nop

08000ff8 <__cmpsf2>:
 8000ff8:	f04f 0c01 	mov.w	ip, #1
 8000ffc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001000:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001004:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800100c:	bf18      	it	ne
 800100e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001012:	d011      	beq.n	8001038 <__cmpsf2+0x40>
 8001014:	b001      	add	sp, #4
 8001016:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800101a:	bf18      	it	ne
 800101c:	ea90 0f01 	teqne	r0, r1
 8001020:	bf58      	it	pl
 8001022:	ebb2 0003 	subspl.w	r0, r2, r3
 8001026:	bf88      	it	hi
 8001028:	17c8      	asrhi	r0, r1, #31
 800102a:	bf38      	it	cc
 800102c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001030:	bf18      	it	ne
 8001032:	f040 0001 	orrne.w	r0, r0, #1
 8001036:	4770      	bx	lr
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__cmpsf2+0x4c>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d105      	bne.n	8001050 <__cmpsf2+0x58>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d1e4      	bne.n	8001014 <__cmpsf2+0x1c>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d0e1      	beq.n	8001014 <__cmpsf2+0x1c>
 8001050:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <__aeabi_cfrcmple>:
 8001058:	4684      	mov	ip, r0
 800105a:	4608      	mov	r0, r1
 800105c:	4661      	mov	r1, ip
 800105e:	e7ff      	b.n	8001060 <__aeabi_cfcmpeq>

08001060 <__aeabi_cfcmpeq>:
 8001060:	b50f      	push	{r0, r1, r2, r3, lr}
 8001062:	f7ff ffc9 	bl	8000ff8 <__cmpsf2>
 8001066:	2800      	cmp	r0, #0
 8001068:	bf48      	it	mi
 800106a:	f110 0f00 	cmnmi.w	r0, #0
 800106e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001070 <__aeabi_fcmpeq>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff fff4 	bl	8001060 <__aeabi_cfcmpeq>
 8001078:	bf0c      	ite	eq
 800107a:	2001      	moveq	r0, #1
 800107c:	2000      	movne	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmplt>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffea 	bl	8001060 <__aeabi_cfcmpeq>
 800108c:	bf34      	ite	cc
 800108e:	2001      	movcc	r0, #1
 8001090:	2000      	movcs	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmple>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffe0 	bl	8001060 <__aeabi_cfcmpeq>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpge>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffd2 	bl	8001058 <__aeabi_cfrcmple>
 80010b4:	bf94      	ite	ls
 80010b6:	2001      	movls	r0, #1
 80010b8:	2000      	movhi	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpgt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffc8 	bl	8001058 <__aeabi_cfrcmple>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmpun>:
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e0:	d102      	bne.n	80010e8 <__aeabi_fcmpun+0x14>
 80010e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e6:	d108      	bne.n	80010fa <__aeabi_fcmpun+0x26>
 80010e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010ec:	d102      	bne.n	80010f4 <__aeabi_fcmpun+0x20>
 80010ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010f2:	d102      	bne.n	80010fa <__aeabi_fcmpun+0x26>
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0001 	mov.w	r0, #1
 80010fe:	4770      	bx	lr

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <__aeabi_d2lz>:
 800114c:	b538      	push	{r3, r4, r5, lr}
 800114e:	2200      	movs	r2, #0
 8001150:	2300      	movs	r3, #0
 8001152:	4604      	mov	r4, r0
 8001154:	460d      	mov	r5, r1
 8001156:	f7ff fc3b 	bl	80009d0 <__aeabi_dcmplt>
 800115a:	b928      	cbnz	r0, 8001168 <__aeabi_d2lz+0x1c>
 800115c:	4620      	mov	r0, r4
 800115e:	4629      	mov	r1, r5
 8001160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001164:	f000 b80a 	b.w	800117c <__aeabi_d2ulz>
 8001168:	4620      	mov	r0, r4
 800116a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800116e:	f000 f805 	bl	800117c <__aeabi_d2ulz>
 8001172:	4240      	negs	r0, r0
 8001174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001178:	bd38      	pop	{r3, r4, r5, pc}
 800117a:	bf00      	nop

0800117c <__aeabi_d2ulz>:
 800117c:	b5d0      	push	{r4, r6, r7, lr}
 800117e:	2200      	movs	r2, #0
 8001180:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <__aeabi_d2ulz+0x34>)
 8001182:	4606      	mov	r6, r0
 8001184:	460f      	mov	r7, r1
 8001186:	f7ff f9b1 	bl	80004ec <__aeabi_dmul>
 800118a:	f7ff fc5f 	bl	8000a4c <__aeabi_d2uiz>
 800118e:	4604      	mov	r4, r0
 8001190:	f7ff f932 	bl	80003f8 <__aeabi_ui2d>
 8001194:	2200      	movs	r2, #0
 8001196:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <__aeabi_d2ulz+0x38>)
 8001198:	f7ff f9a8 	bl	80004ec <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4630      	mov	r0, r6
 80011a2:	4639      	mov	r1, r7
 80011a4:	f7fe ffea 	bl	800017c <__aeabi_dsub>
 80011a8:	f7ff fc50 	bl	8000a4c <__aeabi_d2uiz>
 80011ac:	4621      	mov	r1, r4
 80011ae:	bdd0      	pop	{r4, r6, r7, pc}
 80011b0:	3df00000 	.word	0x3df00000
 80011b4:	41f00000 	.word	0x41f00000

080011b8 <clamp_deg_int>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define CLAMP_U16(v,lo,hi) ((uint16_t)((v) < (lo) ? (lo) : ((v) > (hi) ? (hi) : (v))))
static inline uint8_t clamp_deg_int(int v){ return (uint8_t)(v<0?0:(v>180?180:v)); }
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db07      	blt.n	80011d6 <clamp_deg_int+0x1e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2bb4      	cmp	r3, #180	@ 0xb4
 80011ca:	dc02      	bgt.n	80011d2 <clamp_deg_int+0x1a>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	e002      	b.n	80011d8 <clamp_deg_int+0x20>
 80011d2:	23b4      	movs	r3, #180	@ 0xb4
 80011d4:	e000      	b.n	80011d8 <clamp_deg_int+0x20>
 80011d6:	2300      	movs	r3, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
	...

080011e4 <angle_to_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint16_t angle_to_us(uint8_t deg, uint16_t us_min, uint16_t us_max, uint8_t invert)
{
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4604      	mov	r4, r0
 80011ec:	4608      	mov	r0, r1
 80011ee:	4611      	mov	r1, r2
 80011f0:	461a      	mov	r2, r3
 80011f2:	4623      	mov	r3, r4
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	4603      	mov	r3, r0
 80011f8:	80bb      	strh	r3, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	807b      	strh	r3, [r7, #2]
 80011fe:	4613      	mov	r3, r2
 8001200:	71bb      	strb	r3, [r7, #6]
  if (deg > 180) deg = 180;
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2bb4      	cmp	r3, #180	@ 0xb4
 8001206:	d901      	bls.n	800120c <angle_to_us+0x28>
 8001208:	23b4      	movs	r3, #180	@ 0xb4
 800120a:	71fb      	strb	r3, [r7, #7]
  uint8_t d = invert ? (uint8_t)(180 - deg) : deg;
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d007      	beq.n	8001222 <angle_to_us+0x3e>
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8001218:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800121c:	33b4      	adds	r3, #180	@ 0xb4
 800121e:	b2db      	uxtb	r3, r3
 8001220:	e000      	b.n	8001224 <angle_to_us+0x40>
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	73fb      	strb	r3, [r7, #15]
  int us = us_min + (int)((us_max - us_min) * (float)d / 180.0f + 0.5f);
 8001226:	88bc      	ldrh	r4, [r7, #4]
 8001228:	887a      	ldrh	r2, [r7, #2]
 800122a:	88bb      	ldrh	r3, [r7, #4]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fd36 	bl	8000ca0 <__aeabi_i2f>
 8001234:	4605      	mov	r5, r0
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fd2d 	bl	8000c98 <__aeabi_ui2f>
 800123e:	4603      	mov	r3, r0
 8001240:	4619      	mov	r1, r3
 8001242:	4628      	mov	r0, r5
 8001244:	f7ff fd80 	bl	8000d48 <__aeabi_fmul>
 8001248:	4603      	mov	r3, r0
 800124a:	4911      	ldr	r1, [pc, #68]	@ (8001290 <angle_to_us+0xac>)
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fe2f 	bl	8000eb0 <__aeabi_fdiv>
 8001252:	4603      	mov	r3, r0
 8001254:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fc6d 	bl	8000b38 <__addsf3>
 800125e:	4603      	mov	r3, r0
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff4d 	bl	8001100 <__aeabi_f2iz>
 8001266:	4603      	mov	r3, r0
 8001268:	4423      	add	r3, r4
 800126a:	60bb      	str	r3, [r7, #8]
  return CLAMP_U16(us, us_min, us_max);
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	429a      	cmp	r2, r3
 8001272:	db08      	blt.n	8001286 <angle_to_us+0xa2>
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	429a      	cmp	r2, r3
 800127a:	dc02      	bgt.n	8001282 <angle_to_us+0x9e>
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	b29b      	uxth	r3, r3
 8001280:	e002      	b.n	8001288 <angle_to_us+0xa4>
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	e000      	b.n	8001288 <angle_to_us+0xa4>
 8001286:	88bb      	ldrh	r3, [r7, #4]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bdb0      	pop	{r4, r5, r7, pc}
 8001290:	43340000 	.word	0x43340000

08001294 <servo1_set_deg>:

static void servo1_set_deg(uint8_t deg)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,
 800129e:	79f8      	ldrb	r0, [r7, #7]
 80012a0:	2301      	movs	r3, #1
 80012a2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80012a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012aa:	f7ff ff9b 	bl	80011e4 <angle_to_us>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <servo1_set_deg+0x2c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	635a      	str	r2, [r3, #52]	@ 0x34
    angle_to_us(deg, SERVO1_MIN_US, SERVO1_MAX_US, SERVO1_INVERT));
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000200 	.word	0x20000200

080012c4 <servo2_set_deg>:

static void servo2_set_deg(uint8_t deg)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,
 80012ce:	79f8      	ldrb	r0, [r7, #7]
 80012d0:	2301      	movs	r3, #1
 80012d2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80012d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012da:	f7ff ff83 	bl	80011e4 <angle_to_us>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <servo2_set_deg+0x2c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	639a      	str	r2, [r3, #56]	@ 0x38
    angle_to_us(deg, SERVO2_MIN_US, SERVO2_MAX_US, SERVO2_INVERT));
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000200 	.word	0x20000200

080012f4 <move_toward>:

static void move_toward(float *cur, float tgt, float step_deg)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  if (*cur < tgt) { *cur += step_deg; if (*cur > tgt) *cur = tgt; }
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	68b8      	ldr	r0, [r7, #8]
 8001308:	f7ff feda 	bl	80010c0 <__aeabi_fcmpgt>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d017      	beq.n	8001342 <move_toward+0x4e>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fc0d 	bl	8000b38 <__addsf3>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4619      	mov	r1, r3
 800132c:	68b8      	ldr	r0, [r7, #8]
 800132e:	f7ff fea9 	bl	8001084 <__aeabi_fcmplt>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d100      	bne.n	800133a <move_toward+0x46>
  else if (*cur > tgt) { *cur -= step_deg; if (*cur < tgt) *cur = tgt; }
}
 8001338:	e024      	b.n	8001384 <move_toward+0x90>
  if (*cur < tgt) { *cur += step_deg; if (*cur > tgt) *cur = tgt; }
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	601a      	str	r2, [r3, #0]
}
 8001340:	e020      	b.n	8001384 <move_toward+0x90>
  else if (*cur > tgt) { *cur -= step_deg; if (*cur < tgt) *cur = tgt; }
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	68b8      	ldr	r0, [r7, #8]
 800134a:	f7ff fe9b 	bl	8001084 <__aeabi_fcmplt>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d100      	bne.n	8001356 <move_toward+0x62>
}
 8001354:	e016      	b.n	8001384 <move_toward+0x90>
  else if (*cur > tgt) { *cur -= step_deg; if (*cur < tgt) *cur = tgt; }
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fbe9 	bl	8000b34 <__aeabi_fsub>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	68b8      	ldr	r0, [r7, #8]
 8001372:	f7ff fea5 	bl	80010c0 <__aeabi_fcmpgt>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d100      	bne.n	800137e <move_toward+0x8a>
}
 800137c:	e002      	b.n	8001384 <move_toward+0x90>
  else if (*cur > tgt) { *cur -= step_deg; if (*cur < tgt) *cur = tgt; }
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <apply_default_pose>:

static void apply_default_pose(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  mode = MODE_IDLE;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <apply_default_pose+0x20>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
  pan_tgt  = PAN_DEFAULT_DEG;
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <apply_default_pose+0x24>)
 8001398:	4a06      	ldr	r2, [pc, #24]	@ (80013b4 <apply_default_pose+0x28>)
 800139a:	601a      	str	r2, [r3, #0]
  tilt_tgt = TILT_DEFAULT_DEG;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <apply_default_pose+0x2c>)
 800139e:	4a05      	ldr	r2, [pc, #20]	@ (80013b4 <apply_default_pose+0x28>)
 80013a0:	601a      	str	r2, [r3, #0]
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200002d5 	.word	0x200002d5
 80013b0:	20000004 	.word	0x20000004
 80013b4:	42b40000 	.word	0x42b40000
 80013b8:	2000000c 	.word	0x2000000c

080013bc <set_grid_cell>:

/* 1..9: 좌상(1) ~ 우하(9) */
static void set_grid_cell(uint8_t cell_1to9)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  if (cell_1to9 < 1 || cell_1to9 > 9) return;
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d02b      	beq.n	8001424 <set_grid_cell+0x68>
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b09      	cmp	r3, #9
 80013d0:	d828      	bhi.n	8001424 <set_grid_cell+0x68>
  mode = MODE_GRID;
 80013d2:	4b16      	ldr	r3, [pc, #88]	@ (800142c <set_grid_cell+0x70>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
  uint8_t idx = (uint8_t)(cell_1to9 - 1);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	3b01      	subs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
  uint8_t row = idx / 3;   /* 0=상,1=중,2=하 */
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	4a13      	ldr	r2, [pc, #76]	@ (8001430 <set_grid_cell+0x74>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	085b      	lsrs	r3, r3, #1
 80013e8:	73bb      	strb	r3, [r7, #14]
  uint8_t col = idx % 3;   /* 0=좌,1=중,2=우 */
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <set_grid_cell+0x74>)
 80013ee:	fba3 1302 	umull	r1, r3, r3, r2
 80013f2:	0859      	lsrs	r1, r3, #1
 80013f4:	460b      	mov	r3, r1
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	440b      	add	r3, r1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	737b      	strb	r3, [r7, #13]
  pan_tgt  = GRID_PAN[col];
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	4a0c      	ldr	r2, [pc, #48]	@ (8001434 <set_grid_cell+0x78>)
 8001402:	5cd3      	ldrb	r3, [r2, r3]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fc47 	bl	8000c98 <__aeabi_ui2f>
 800140a:	4603      	mov	r3, r0
 800140c:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <set_grid_cell+0x7c>)
 800140e:	6013      	str	r3, [r2, #0]
  tilt_tgt = GRID_TILT[row];
 8001410:	7bbb      	ldrb	r3, [r7, #14]
 8001412:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <set_grid_cell+0x80>)
 8001414:	5cd3      	ldrb	r3, [r2, r3]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fc3e 	bl	8000c98 <__aeabi_ui2f>
 800141c:	4603      	mov	r3, r0
 800141e:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <set_grid_cell+0x84>)
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e000      	b.n	8001426 <set_grid_cell+0x6a>
  if (cell_1to9 < 1 || cell_1to9 > 9) return;
 8001424:	bf00      	nop
}
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200002d5 	.word	0x200002d5
 8001430:	aaaaaaab 	.word	0xaaaaaaab
 8001434:	08007864 	.word	0x08007864
 8001438:	20000004 	.word	0x20000004
 800143c:	08007868 	.word	0x08007868
 8001440:	2000000c 	.word	0x2000000c

08001444 <set_track_xy>:

static void set_track_xy(float x, float y)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  if (x < 0) x = 0; if (x > 1) x = 1;
 800144e:	f04f 0100 	mov.w	r1, #0
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fe16 	bl	8001084 <__aeabi_fcmplt>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <set_track_xy+0x20>
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fe29 	bl	80010c0 <__aeabi_fcmpgt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <set_track_xy+0x36>
 8001474:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001478:	607b      	str	r3, [r7, #4]
  if (y < 0) y = 0; if (y > 1) y = 1;
 800147a:	f04f 0100 	mov.w	r1, #0
 800147e:	6838      	ldr	r0, [r7, #0]
 8001480:	f7ff fe00 	bl	8001084 <__aeabi_fcmplt>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <set_track_xy+0x4c>
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001494:	6838      	ldr	r0, [r7, #0]
 8001496:	f7ff fe13 	bl	80010c0 <__aeabi_fcmpgt>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <set_track_xy+0x62>
 80014a0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80014a4:	603b      	str	r3, [r7, #0]
  mode = MODE_TRACK;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <set_track_xy+0x9c>)
 80014a8:	2202      	movs	r2, #2
 80014aa:	701a      	strb	r2, [r3, #0]
  pan_tgt  = 180.0f * x;
 80014ac:	490d      	ldr	r1, [pc, #52]	@ (80014e4 <set_track_xy+0xa0>)
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fc4a 	bl	8000d48 <__aeabi_fmul>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <set_track_xy+0xa4>)
 80014ba:	601a      	str	r2, [r3, #0]
  tilt_tgt = 180.0f * y;
 80014bc:	4909      	ldr	r1, [pc, #36]	@ (80014e4 <set_track_xy+0xa0>)
 80014be:	6838      	ldr	r0, [r7, #0]
 80014c0:	f7ff fc42 	bl	8000d48 <__aeabi_fmul>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <set_track_xy+0xa8>)
 80014ca:	601a      	str	r2, [r3, #0]
  last_detect_ms = HAL_GetTick();
 80014cc:	f000 fdca 	bl	8002064 <HAL_GetTick>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <set_track_xy+0xac>)
 80014d4:	6013      	str	r3, [r2, #0]
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200002d5 	.word	0x200002d5
 80014e4:	43340000 	.word	0x43340000
 80014e8:	20000004 	.word	0x20000004
 80014ec:	2000000c 	.word	0x2000000c
 80014f0:	200002d8 	.word	0x200002d8

080014f4 <handle_line>:

/* 한 줄 명령: "N" / "C 5" / "T 0.45 0.62" + [WATER+] "SPRAY" */
static void handle_line(char *line)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  char *cmd = strtok(line, " \t\r\n");
 80014fc:	4935      	ldr	r1, [pc, #212]	@ (80015d4 <handle_line+0xe0>)
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f004 fa4a 	bl	8005998 <strtok>
 8001504:	6178      	str	r0, [r7, #20]
  if (!cmd) return;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d05f      	beq.n	80015cc <handle_line+0xd8>

  if (strcmp(cmd, "N") == 0) {
 800150c:	4932      	ldr	r1, [pc, #200]	@ (80015d8 <handle_line+0xe4>)
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7fe fe1e 	bl	8000150 <strcmp>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <handle_line+0x2c>
    apply_default_pose();
 800151a:	f7ff ff37 	bl	800138c <apply_default_pose>
 800151e:	e056      	b.n	80015ce <handle_line+0xda>
  } else if (strcmp(cmd, "C") == 0) {
 8001520:	492e      	ldr	r1, [pc, #184]	@ (80015dc <handle_line+0xe8>)
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7fe fe14 	bl	8000150 <strcmp>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d110      	bne.n	8001550 <handle_line+0x5c>
    char *sidx = strtok(NULL, " \t\r\n");
 800152e:	4929      	ldr	r1, [pc, #164]	@ (80015d4 <handle_line+0xe0>)
 8001530:	2000      	movs	r0, #0
 8001532:	f004 fa31 	bl	8005998 <strtok>
 8001536:	60b8      	str	r0, [r7, #8]
    if (sidx) set_grid_cell((uint8_t)atoi(sidx));
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d047      	beq.n	80015ce <handle_line+0xda>
 800153e:	68b8      	ldr	r0, [r7, #8]
 8001540:	f003 fa30 	bl	80049a4 <atoi>
 8001544:	4603      	mov	r3, r0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff37 	bl	80013bc <set_grid_cell>
 800154e:	e03e      	b.n	80015ce <handle_line+0xda>
  } else if (strcmp(cmd, "T") == 0) {
 8001550:	4923      	ldr	r1, [pc, #140]	@ (80015e0 <handle_line+0xec>)
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7fe fdfc 	bl	8000150 <strcmp>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d11e      	bne.n	800159c <handle_line+0xa8>
    char *sx = strtok(NULL, " \t\r\n");
 800155e:	491d      	ldr	r1, [pc, #116]	@ (80015d4 <handle_line+0xe0>)
 8001560:	2000      	movs	r0, #0
 8001562:	f004 fa19 	bl	8005998 <strtok>
 8001566:	6138      	str	r0, [r7, #16]
    char *sy = strtok(NULL, " \t\r\n");
 8001568:	491a      	ldr	r1, [pc, #104]	@ (80015d4 <handle_line+0xe0>)
 800156a:	2000      	movs	r0, #0
 800156c:	f004 fa14 	bl	8005998 <strtok>
 8001570:	60f8      	str	r0, [r7, #12]
    if (sx && sy) set_track_xy(strtof(sx, NULL), strtof(sy, NULL));
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d02a      	beq.n	80015ce <handle_line+0xda>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d027      	beq.n	80015ce <handle_line+0xda>
 800157e:	2100      	movs	r1, #0
 8001580:	6938      	ldr	r0, [r7, #16]
 8001582:	f004 f80d 	bl	80055a0 <strtof>
 8001586:	4604      	mov	r4, r0
 8001588:	2100      	movs	r1, #0
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f004 f808 	bl	80055a0 <strtof>
 8001590:	4603      	mov	r3, r0
 8001592:	4619      	mov	r1, r3
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff ff55 	bl	8001444 <set_track_xy>
 800159a:	e018      	b.n	80015ce <handle_line+0xda>
  }
  /* [WATER+] SPRAY: 5초간 분사 후 자동 OFF */
  else if (strcmp(cmd, "SPRAY") == 0) {
 800159c:	4911      	ldr	r1, [pc, #68]	@ (80015e4 <handle_line+0xf0>)
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7fe fdd6 	bl	8000150 <strcmp>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d111      	bne.n	80015ce <handle_line+0xda>
    WATER_ON();                               /* Active-Low: Low=ON */
 80015aa:	2200      	movs	r2, #0
 80015ac:	2180      	movs	r1, #128	@ 0x80
 80015ae:	480e      	ldr	r0, [pc, #56]	@ (80015e8 <handle_line+0xf4>)
 80015b0:	f001 f8ca 	bl	8002748 <HAL_GPIO_WritePin>
    spray_active   = 1;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <handle_line+0xf8>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
    spray_off_tick = HAL_GetTick() + 5000U;   /* 5초 */
 80015ba:	f000 fd53 	bl	8002064 <HAL_GetTick>
 80015be:	4603      	mov	r3, r0
 80015c0:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80015c4:	3308      	adds	r3, #8
 80015c6:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <handle_line+0xfc>)
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e000      	b.n	80015ce <handle_line+0xda>
  if (!cmd) return;
 80015cc:	bf00      	nop
  }
}
 80015ce:	371c      	adds	r7, #28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	08007840 	.word	0x08007840
 80015d8:	08007848 	.word	0x08007848
 80015dc:	0800784c 	.word	0x0800784c
 80015e0:	08007850 	.word	0x08007850
 80015e4:	08007854 	.word	0x08007854
 80015e8:	40010c00 	.word	0x40010c00
 80015ec:	200002dc 	.word	0x200002dc
 80015f0:	200002e0 	.word	0x200002e0

080015f4 <HAL_UART_RxCpltCallback>:

/* UART 인터럽트: 줄끝을 CR(0x0D) 또는 LF(0x0A)로 인식하도록 수정 */
// [CRLF]
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1f      	ldr	r2, [pc, #124]	@ (8001680 <HAL_UART_RxCpltCallback+0x8c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d137      	bne.n	8001676 <HAL_UART_RxCpltCallback+0x82>
    uint8_t c = rx_byte;
 8001606:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <HAL_UART_RxCpltCallback+0x90>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	73fb      	strb	r3, [r7, #15]

    if (c == '\r' || c == '\n' || rx_idx >= sizeof(rx_line) - 1) {
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b0d      	cmp	r3, #13
 8001610:	d006      	beq.n	8001620 <HAL_UART_RxCpltCallback+0x2c>
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2b0a      	cmp	r3, #10
 8001616:	d003      	beq.n	8001620 <HAL_UART_RxCpltCallback+0x2c>
 8001618:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <HAL_UART_RxCpltCallback+0x94>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b3e      	cmp	r3, #62	@ 0x3e
 800161e:	d91b      	bls.n	8001658 <HAL_UART_RxCpltCallback+0x64>
      if (rx_idx > 0) {               /* CRLF 두 번 들어와도 한 번만 처리 */
 8001620:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <HAL_UART_RxCpltCallback+0x94>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d021      	beq.n	800166c <HAL_UART_RxCpltCallback+0x78>
        rx_line[rx_idx] = '\0';
 8001628:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <HAL_UART_RxCpltCallback+0x94>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b17      	ldr	r3, [pc, #92]	@ (800168c <HAL_UART_RxCpltCallback+0x98>)
 8001630:	2100      	movs	r1, #0
 8001632:	5499      	strb	r1, [r3, r2]
        handle_line(rx_line);
 8001634:	4815      	ldr	r0, [pc, #84]	@ (800168c <HAL_UART_RxCpltCallback+0x98>)
 8001636:	f7ff ff5d 	bl	80014f4 <handle_line>
        rx_idx = 0;
 800163a:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <HAL_UART_RxCpltCallback+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]

        const char ok[] = "OK\r\n";
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <HAL_UART_RxCpltCallback+0x9c>)
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	2300      	movs	r3, #0
 8001646:	733b      	strb	r3, [r7, #12]
        HAL_UART_Transmit(&huart2, (uint8_t*)ok, sizeof(ok)-1, 10);
 8001648:	f107 0108 	add.w	r1, r7, #8
 800164c:	230a      	movs	r3, #10
 800164e:	2204      	movs	r2, #4
 8001650:	4810      	ldr	r0, [pc, #64]	@ (8001694 <HAL_UART_RxCpltCallback+0xa0>)
 8001652:	f002 faf5 	bl	8003c40 <HAL_UART_Transmit>
      if (rx_idx > 0) {               /* CRLF 두 번 들어와도 한 번만 처리 */
 8001656:	e009      	b.n	800166c <HAL_UART_RxCpltCallback+0x78>
      }
      /* else: 연속된 CR/LF는 무시 */
    } else {
      rx_line[rx_idx++] = (char)c;
 8001658:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <HAL_UART_RxCpltCallback+0x94>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	b2d1      	uxtb	r1, r2
 8001660:	4a09      	ldr	r2, [pc, #36]	@ (8001688 <HAL_UART_RxCpltCallback+0x94>)
 8001662:	7011      	strb	r1, [r2, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	4a09      	ldr	r2, [pc, #36]	@ (800168c <HAL_UART_RxCpltCallback+0x98>)
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	5453      	strb	r3, [r2, r1]
    }

    HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 800166c:	2201      	movs	r2, #1
 800166e:	4905      	ldr	r1, [pc, #20]	@ (8001684 <HAL_UART_RxCpltCallback+0x90>)
 8001670:	4808      	ldr	r0, [pc, #32]	@ (8001694 <HAL_UART_RxCpltCallback+0xa0>)
 8001672:	f002 fc07 	bl	8003e84 <HAL_UART_Receive_IT>
  }
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40004400 	.word	0x40004400
 8001684:	20000290 	.word	0x20000290
 8001688:	200002d4 	.word	0x200002d4
 800168c:	20000294 	.word	0x20000294
 8001690:	0a0d4b4f 	.word	0x0a0d4b4f
 8001694:	20000248 	.word	0x20000248

08001698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  HAL_Init();
 800169e:	f000 fc89 	bl	8001fb4 <HAL_Init>
  SystemClock_Config();
 80016a2:	f000 f91d 	bl	80018e0 <SystemClock_Config>

  MX_GPIO_Init();
 80016a6:	f000 fa0b 	bl	8001ac0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016aa:	f000 f9df 	bl	8001a6c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80016ae:	f000 f959 	bl	8001964 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  /* PWM 시작 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); /* servo1: Pan */
 80016b2:	2100      	movs	r1, #0
 80016b4:	4879      	ldr	r0, [pc, #484]	@ (800189c <main+0x204>)
 80016b6:	f001 fd39 	bl	800312c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); /* servo2: Tilt */
 80016ba:	2104      	movs	r1, #4
 80016bc:	4877      	ldr	r0, [pc, #476]	@ (800189c <main+0x204>)
 80016be:	f001 fd35 	bl	800312c <HAL_TIM_PWM_Start>

  /* Self-test */
  servo1_set_deg(90);  servo2_set_deg(90);  HAL_Delay(800);
 80016c2:	205a      	movs	r0, #90	@ 0x5a
 80016c4:	f7ff fde6 	bl	8001294 <servo1_set_deg>
 80016c8:	205a      	movs	r0, #90	@ 0x5a
 80016ca:	f7ff fdfb 	bl	80012c4 <servo2_set_deg>
 80016ce:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80016d2:	f000 fcd1 	bl	8002078 <HAL_Delay>
  servo1_set_deg(60);  servo2_set_deg(60);  HAL_Delay(800);
 80016d6:	203c      	movs	r0, #60	@ 0x3c
 80016d8:	f7ff fddc 	bl	8001294 <servo1_set_deg>
 80016dc:	203c      	movs	r0, #60	@ 0x3c
 80016de:	f7ff fdf1 	bl	80012c4 <servo2_set_deg>
 80016e2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80016e6:	f000 fcc7 	bl	8002078 <HAL_Delay>
  servo1_set_deg(120); servo2_set_deg(120); HAL_Delay(800);
 80016ea:	2078      	movs	r0, #120	@ 0x78
 80016ec:	f7ff fdd2 	bl	8001294 <servo1_set_deg>
 80016f0:	2078      	movs	r0, #120	@ 0x78
 80016f2:	f7ff fde7 	bl	80012c4 <servo2_set_deg>
 80016f6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80016fa:	f000 fcbd 	bl	8002078 <HAL_Delay>

  /* 기본 자세 */
  servo1_set_deg(PAN_DEFAULT_DEG);
 80016fe:	205a      	movs	r0, #90	@ 0x5a
 8001700:	f7ff fdc8 	bl	8001294 <servo1_set_deg>
  servo2_set_deg(TILT_DEFAULT_DEG);
 8001704:	205a      	movs	r0, #90	@ 0x5a
 8001706:	f7ff fddd 	bl	80012c4 <servo2_set_deg>

  /* [WATER+] 부팅 시 확실히 OFF */
  WATER_OFF();
 800170a:	2201      	movs	r2, #1
 800170c:	2180      	movs	r1, #128	@ 0x80
 800170e:	4864      	ldr	r0, [pc, #400]	@ (80018a0 <main+0x208>)
 8001710:	f001 f81a 	bl	8002748 <HAL_GPIO_WritePin>

  /* UART 라인 수신 시작 */
  const char *hello = "READY\r\n";
 8001714:	4b63      	ldr	r3, [pc, #396]	@ (80018a4 <main+0x20c>)
 8001716:	613b      	str	r3, [r7, #16]
  HAL_UART_Transmit(&huart2, (uint8_t*)hello, strlen(hello), 100);
 8001718:	6938      	ldr	r0, [r7, #16]
 800171a:	f7fe fd23 	bl	8000164 <strlen>
 800171e:	4603      	mov	r3, r0
 8001720:	b29a      	uxth	r2, r3
 8001722:	2364      	movs	r3, #100	@ 0x64
 8001724:	6939      	ldr	r1, [r7, #16]
 8001726:	4860      	ldr	r0, [pc, #384]	@ (80018a8 <main+0x210>)
 8001728:	f002 fa8a 	bl	8003c40 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 800172c:	2201      	movs	r2, #1
 800172e:	495f      	ldr	r1, [pc, #380]	@ (80018ac <main+0x214>)
 8001730:	485d      	ldr	r0, [pc, #372]	@ (80018a8 <main+0x210>)
 8001732:	f002 fba7 	bl	8003e84 <HAL_UART_Receive_IT>

  uint32_t t_prev = HAL_GetTick();
 8001736:	f000 fc95 	bl	8002064 <HAL_GetTick>
 800173a:	6178      	str	r0, [r7, #20]
  last_detect_ms = HAL_GetTick();
 800173c:	f000 fc92 	bl	8002064 <HAL_GetTick>
 8001740:	4603      	mov	r3, r0
 8001742:	4a5b      	ldr	r2, [pc, #364]	@ (80018b0 <main+0x218>)
 8001744:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  while (1)
  {
    /* 20 ms 주기로 스무딩 적용 */
    uint32_t now = HAL_GetTick();
 8001746:	f000 fc8d 	bl	8002064 <HAL_GetTick>
 800174a:	60f8      	str	r0, [r7, #12]
    if (now - t_prev >= CONTROL_PERIOD_MS) {
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b13      	cmp	r3, #19
 8001754:	f240 8096 	bls.w	8001884 <main+0x1ec>
      t_prev = now;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	617b      	str	r3, [r7, #20]

      /* 추적 신호 타임아웃 → 기본 자세 */
      if (mode == MODE_TRACK && (now - last_detect_ms) > DETECT_TIMEOUT_MS) {
 800175c:	4b55      	ldr	r3, [pc, #340]	@ (80018b4 <main+0x21c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d108      	bne.n	8001776 <main+0xde>
 8001764:	4b52      	ldr	r3, [pc, #328]	@ (80018b0 <main+0x218>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001770:	d901      	bls.n	8001776 <main+0xde>
        apply_default_pose();
 8001772:	f7ff fe0b 	bl	800138c <apply_default_pose>
      }

      /* [WATER+] 5초 지나면 자동 OFF */
      if (spray_active && (int32_t)(HAL_GetTick() - spray_off_tick) >= 0) {
 8001776:	4b50      	ldr	r3, [pc, #320]	@ (80018b8 <main+0x220>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00f      	beq.n	80017a0 <main+0x108>
 8001780:	f000 fc70 	bl	8002064 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	4b4d      	ldr	r3, [pc, #308]	@ (80018bc <main+0x224>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	db07      	blt.n	80017a0 <main+0x108>
        WATER_OFF();
 8001790:	2201      	movs	r2, #1
 8001792:	2180      	movs	r1, #128	@ 0x80
 8001794:	4842      	ldr	r0, [pc, #264]	@ (80018a0 <main+0x208>)
 8001796:	f000 ffd7 	bl	8002748 <HAL_GPIO_WritePin>
        spray_active = 0;
 800179a:	4b47      	ldr	r3, [pc, #284]	@ (80018b8 <main+0x220>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
      }

      /* 각도 범위 제한 & 스무딩 이동 */
      pan_tgt  = clamp_deg_int((int)lroundf(pan_tgt));
 80017a0:	4b47      	ldr	r3, [pc, #284]	@ (80018c0 <main+0x228>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f006 f813 	bl	80077d0 <lroundf>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fd03 	bl	80011b8 <clamp_deg_int>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fa6f 	bl	8000c98 <__aeabi_ui2f>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4a40      	ldr	r2, [pc, #256]	@ (80018c0 <main+0x228>)
 80017be:	6013      	str	r3, [r2, #0]
      tilt_tgt = clamp_deg_int((int)lroundf(tilt_tgt));
 80017c0:	4b40      	ldr	r3, [pc, #256]	@ (80018c4 <main+0x22c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f006 f803 	bl	80077d0 <lroundf>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fcf3 	bl	80011b8 <clamp_deg_int>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fa5f 	bl	8000c98 <__aeabi_ui2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	4a39      	ldr	r2, [pc, #228]	@ (80018c4 <main+0x22c>)
 80017de:	6013      	str	r3, [r2, #0]
      move_toward(&pan_cur,  pan_tgt,  STEP_DEG);
 80017e0:	4b37      	ldr	r3, [pc, #220]	@ (80018c0 <main+0x228>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a38      	ldr	r2, [pc, #224]	@ (80018c8 <main+0x230>)
 80017e6:	4619      	mov	r1, r3
 80017e8:	4838      	ldr	r0, [pc, #224]	@ (80018cc <main+0x234>)
 80017ea:	f7ff fd83 	bl	80012f4 <move_toward>
      move_toward(&tilt_cur, tilt_tgt, STEP_DEG);
 80017ee:	4b35      	ldr	r3, [pc, #212]	@ (80018c4 <main+0x22c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a35      	ldr	r2, [pc, #212]	@ (80018c8 <main+0x230>)
 80017f4:	4619      	mov	r1, r3
 80017f6:	4836      	ldr	r0, [pc, #216]	@ (80018d0 <main+0x238>)
 80017f8:	f7ff fd7c 	bl	80012f4 <move_toward>

      servo1_set_deg((uint8_t)lroundf(pan_cur));
 80017fc:	4b33      	ldr	r3, [pc, #204]	@ (80018cc <main+0x234>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f005 ffe5 	bl	80077d0 <lroundf>
 8001806:	4603      	mov	r3, r0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fd42 	bl	8001294 <servo1_set_deg>
      servo2_set_deg((uint8_t)lroundf(tilt_cur));
 8001810:	4b2f      	ldr	r3, [pc, #188]	@ (80018d0 <main+0x238>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f005 ffdb 	bl	80077d0 <lroundf>
 800181a:	4603      	mov	r3, r0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fd50 	bl	80012c4 <servo2_set_deg>
    }

    /* UART polling fallback (non-blocking) — CR/LF 둘 다 줄끝 처리 */
    // [CRLF]
    static char pline[64]; static uint8_t pidx=0; uint8_t ch;
    while (HAL_UART_Receive(&huart2, &ch, 1, 0) == HAL_OK) {
 8001824:	e02e      	b.n	8001884 <main+0x1ec>
      if (ch == '\r' || ch == '\n' || pidx >= sizeof(pline)-1) {
 8001826:	7afb      	ldrb	r3, [r7, #11]
 8001828:	2b0d      	cmp	r3, #13
 800182a:	d006      	beq.n	800183a <main+0x1a2>
 800182c:	7afb      	ldrb	r3, [r7, #11]
 800182e:	2b0a      	cmp	r3, #10
 8001830:	d003      	beq.n	800183a <main+0x1a2>
 8001832:	4b28      	ldr	r3, [pc, #160]	@ (80018d4 <main+0x23c>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b3e      	cmp	r3, #62	@ 0x3e
 8001838:	d91a      	bls.n	8001870 <main+0x1d8>
        if (pidx > 0) {
 800183a:	4b26      	ldr	r3, [pc, #152]	@ (80018d4 <main+0x23c>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d020      	beq.n	8001884 <main+0x1ec>
          pline[pidx] = '\0'; handle_line(pline); pidx = 0;
 8001842:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <main+0x23c>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4b23      	ldr	r3, [pc, #140]	@ (80018d8 <main+0x240>)
 800184a:	2100      	movs	r1, #0
 800184c:	5499      	strb	r1, [r3, r2]
 800184e:	4822      	ldr	r0, [pc, #136]	@ (80018d8 <main+0x240>)
 8001850:	f7ff fe50 	bl	80014f4 <handle_line>
 8001854:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <main+0x23c>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
          const char ok[]="OK\r\n"; HAL_UART_Transmit(&huart2,(uint8_t*)ok,sizeof(ok)-1,10);
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <main+0x244>)
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	2300      	movs	r3, #0
 8001860:	723b      	strb	r3, [r7, #8]
 8001862:	1d39      	adds	r1, r7, #4
 8001864:	230a      	movs	r3, #10
 8001866:	2204      	movs	r2, #4
 8001868:	480f      	ldr	r0, [pc, #60]	@ (80018a8 <main+0x210>)
 800186a:	f002 f9e9 	bl	8003c40 <HAL_UART_Transmit>
        if (pidx > 0) {
 800186e:	e009      	b.n	8001884 <main+0x1ec>
        }
      } else {
        pline[pidx++] = (char)ch;
 8001870:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <main+0x23c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	b2d1      	uxtb	r1, r2
 8001878:	4a16      	ldr	r2, [pc, #88]	@ (80018d4 <main+0x23c>)
 800187a:	7011      	strb	r1, [r2, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	7af9      	ldrb	r1, [r7, #11]
 8001880:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <main+0x240>)
 8001882:	5499      	strb	r1, [r3, r2]
    while (HAL_UART_Receive(&huart2, &ch, 1, 0) == HAL_OK) {
 8001884:	f107 010b 	add.w	r1, r7, #11
 8001888:	2300      	movs	r3, #0
 800188a:	2201      	movs	r2, #1
 800188c:	4806      	ldr	r0, [pc, #24]	@ (80018a8 <main+0x210>)
 800188e:	f002 fa62 	bl	8003d56 <HAL_UART_Receive>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0c6      	beq.n	8001826 <main+0x18e>
  {
 8001898:	e755      	b.n	8001746 <main+0xae>
 800189a:	bf00      	nop
 800189c:	20000200 	.word	0x20000200
 80018a0:	40010c00 	.word	0x40010c00
 80018a4:	0800785c 	.word	0x0800785c
 80018a8:	20000248 	.word	0x20000248
 80018ac:	20000290 	.word	0x20000290
 80018b0:	200002d8 	.word	0x200002d8
 80018b4:	200002d5 	.word	0x200002d5
 80018b8:	200002dc 	.word	0x200002dc
 80018bc:	200002e0 	.word	0x200002e0
 80018c0:	20000004 	.word	0x20000004
 80018c4:	2000000c 	.word	0x2000000c
 80018c8:	40400000 	.word	0x40400000
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000008 	.word	0x20000008
 80018d4:	200002e4 	.word	0x200002e4
 80018d8:	200002e8 	.word	0x200002e8
 80018dc:	0a0d4b4f 	.word	0x0a0d4b4f

080018e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b090      	sub	sp, #64	@ 0x40
 80018e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e6:	f107 0318 	add.w	r3, r7, #24
 80018ea:	2228      	movs	r2, #40	@ 0x28
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f004 f837 	bl	8005962 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001906:	2301      	movs	r3, #1
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800190a:	2310      	movs	r3, #16
 800190c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190e:	2302      	movs	r3, #2
 8001910:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001912:	2300      	movs	r3, #0
 8001914:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001916:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800191a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	4618      	mov	r0, r3
 8001922:	f000 ff4b 	bl	80027bc <HAL_RCC_OscConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0x50>
 800192c:	f000 f94c 	bl	8001bc8 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001930:	230f      	movs	r3, #15
 8001932:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001934:	2302      	movs	r3, #2
 8001936:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800193c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2102      	movs	r1, #2
 800194a:	4618      	mov	r0, r3
 800194c:	f001 f9b8 	bl	8002cc0 <HAL_RCC_ClockConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SystemClock_Config+0x7a>
 8001956:	f000 f937 	bl	8001bc8 <Error_Handler>
}
 800195a:	bf00      	nop
 800195c:	3740      	adds	r7, #64	@ 0x40
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08e      	sub	sp, #56	@ 0x38
 8001968:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	f107 0320 	add.w	r3, r7, #32
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	615a      	str	r2, [r3, #20]
 8001992:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001994:	4b34      	ldr	r3, [pc, #208]	@ (8001a68 <MX_TIM2_Init+0x104>)
 8001996:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800199a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800199c:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <MX_TIM2_Init+0x104>)
 800199e:	223f      	movs	r2, #63	@ 0x3f
 80019a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b31      	ldr	r3, [pc, #196]	@ (8001a68 <MX_TIM2_Init+0x104>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80019a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a68 <MX_TIM2_Init+0x104>)
 80019aa:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80019ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a68 <MX_TIM2_Init+0x104>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a68 <MX_TIM2_Init+0x104>)
 80019b8:	2280      	movs	r2, #128	@ 0x80
 80019ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) { Error_Handler(); }
 80019bc:	482a      	ldr	r0, [pc, #168]	@ (8001a68 <MX_TIM2_Init+0x104>)
 80019be:	f001 fb0d 	bl	8002fdc <HAL_TIM_Base_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0x68>
 80019c8:	f000 f8fe 	bl	8001bc8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) { Error_Handler(); }
 80019d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019d6:	4619      	mov	r1, r3
 80019d8:	4823      	ldr	r0, [pc, #140]	@ (8001a68 <MX_TIM2_Init+0x104>)
 80019da:	f001 fd0b 	bl	80033f4 <HAL_TIM_ConfigClockSource>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0x84>
 80019e4:	f000 f8f0 	bl	8001bc8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) { Error_Handler(); }
 80019e8:	481f      	ldr	r0, [pc, #124]	@ (8001a68 <MX_TIM2_Init+0x104>)
 80019ea:	f001 fb46 	bl	800307a <HAL_TIM_PWM_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM2_Init+0x94>
 80019f4:	f000 f8e8 	bl	8001bc8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) { Error_Handler(); }
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4619      	mov	r1, r3
 8001a06:	4818      	ldr	r0, [pc, #96]	@ (8001a68 <MX_TIM2_Init+0x104>)
 8001a08:	f002 f86c 	bl	8003ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM2_Init+0xb2>
 8001a12:	f000 f8d9 	bl	8001bc8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a16:	2360      	movs	r3, #96	@ 0x60
 8001a18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001a1a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) { Error_Handler(); }
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480e      	ldr	r0, [pc, #56]	@ (8001a68 <MX_TIM2_Init+0x104>)
 8001a30:	f001 fc1e 	bl	8003270 <HAL_TIM_PWM_ConfigChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM2_Init+0xda>
 8001a3a:	f000 f8c5 	bl	8001bc8 <Error_Handler>
  sConfigOC.Pulse = 500;
 8001a3e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) { Error_Handler(); }
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2204      	movs	r2, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4807      	ldr	r0, [pc, #28]	@ (8001a68 <MX_TIM2_Init+0x104>)
 8001a4c:	f001 fc10 	bl	8003270 <HAL_TIM_PWM_ConfigChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM2_Init+0xf6>
 8001a56:	f000 f8b7 	bl	8001bc8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8001a5a:	4803      	ldr	r0, [pc, #12]	@ (8001a68 <MX_TIM2_Init+0x104>)
 8001a5c:	f000 f908 	bl	8001c70 <HAL_TIM_MspPostInit>
}
 8001a60:	bf00      	nop
 8001a62:	3738      	adds	r7, #56	@ 0x38
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000200 	.word	0x20000200

08001a6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	@ (8001abc <MX_USART2_UART_Init+0x50>)
 8001a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a76:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) { Error_Handler(); }
 8001aa2:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <MX_USART2_UART_Init+0x4c>)
 8001aa4:	f002 f87c 	bl	8003ba0 <HAL_UART_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART2_UART_Init+0x46>
 8001aae:	f000 f88b 	bl	8001bc8 <Error_Handler>
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000248 	.word	0x20000248
 8001abc:	40004400 	.word	0x40004400

08001ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad4:	4b37      	ldr	r3, [pc, #220]	@ (8001bb4 <MX_GPIO_Init+0xf4>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a36      	ldr	r2, [pc, #216]	@ (8001bb4 <MX_GPIO_Init+0xf4>)
 8001ada:	f043 0310 	orr.w	r3, r3, #16
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b34      	ldr	r3, [pc, #208]	@ (8001bb4 <MX_GPIO_Init+0xf4>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aec:	4b31      	ldr	r3, [pc, #196]	@ (8001bb4 <MX_GPIO_Init+0xf4>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a30      	ldr	r2, [pc, #192]	@ (8001bb4 <MX_GPIO_Init+0xf4>)
 8001af2:	f043 0320 	orr.w	r3, r3, #32
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb4 <MX_GPIO_Init+0xf4>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <MX_GPIO_Init+0xf4>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb4 <MX_GPIO_Init+0xf4>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b28      	ldr	r3, [pc, #160]	@ (8001bb4 <MX_GPIO_Init+0xf4>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <MX_GPIO_Init+0xf4>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a24      	ldr	r2, [pc, #144]	@ (8001bb4 <MX_GPIO_Init+0xf4>)
 8001b22:	f043 0308 	orr.w	r3, r3, #8
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <MX_GPIO_Init+0xf4>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]

  /* LD2 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2120      	movs	r1, #32
 8001b38:	481f      	ldr	r0, [pc, #124]	@ (8001bb8 <MX_GPIO_Init+0xf8>)
 8001b3a:	f000 fe05 	bl	8002748 <HAL_GPIO_WritePin>

  /* water (Active-Low) — 기본 High=OFF */
  HAL_GPIO_WritePin(water_GPIO_Port, water_Pin, GPIO_PIN_SET);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	2180      	movs	r1, #128	@ 0x80
 8001b42:	481e      	ldr	r0, [pc, #120]	@ (8001bbc <MX_GPIO_Init+0xfc>)
 8001b44:	f000 fe00 	bl	8002748 <HAL_GPIO_WritePin>

  /* B1 */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc0 <MX_GPIO_Init+0x100>)
 8001b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 0310 	add.w	r3, r7, #16
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4819      	ldr	r0, [pc, #100]	@ (8001bc4 <MX_GPIO_Init+0x104>)
 8001b5e:	f000 fc6f 	bl	8002440 <HAL_GPIO_Init>

  /* LD2 */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b62:	2320      	movs	r3, #32
 8001b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	4619      	mov	r1, r3
 8001b78:	480f      	ldr	r0, [pc, #60]	@ (8001bb8 <MX_GPIO_Init+0xf8>)
 8001b7a:	f000 fc61 	bl	8002440 <HAL_GPIO_Init>

  /* water */
  GPIO_InitStruct.Pin = water_Pin;
 8001b7e:	2380      	movs	r3, #128	@ 0x80
 8001b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(water_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	4619      	mov	r1, r3
 8001b94:	4809      	ldr	r0, [pc, #36]	@ (8001bbc <MX_GPIO_Init+0xfc>)
 8001b96:	f000 fc53 	bl	8002440 <HAL_GPIO_Init>

  /* EXTI init */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2028      	movs	r0, #40	@ 0x28
 8001ba0:	f000 fb65 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ba4:	2028      	movs	r0, #40	@ 0x28
 8001ba6:	f000 fb7e 	bl	80022a6 <HAL_NVIC_EnableIRQ>
}
 8001baa:	bf00      	nop
 8001bac:	3720      	adds	r7, #32
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010800 	.word	0x40010800
 8001bbc:	40010c00 	.word	0x40010c00
 8001bc0:	10110000 	.word	0x10110000
 8001bc4:	40011000 	.word	0x40011000

08001bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bcc:	b672      	cpsid	i
}
 8001bce:	bf00      	nop
  __disable_irq();
  while (1) { }
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <Error_Handler+0x8>

08001bd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bda:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <HAL_MspInit+0x5c>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	4a14      	ldr	r2, [pc, #80]	@ (8001c30 <HAL_MspInit+0x5c>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6193      	str	r3, [r2, #24]
 8001be6:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_MspInit+0x5c>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <HAL_MspInit+0x5c>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8001c30 <HAL_MspInit+0x5c>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfc:	61d3      	str	r3, [r2, #28]
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <HAL_MspInit+0x5c>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_MspInit+0x60>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <HAL_MspInit+0x60>)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010000 	.word	0x40010000

08001c38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c48:	d10b      	bne.n	8001c62 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c4a:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <HAL_TIM_Base_MspInit+0x34>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a07      	ldr	r2, [pc, #28]	@ (8001c6c <HAL_TIM_Base_MspInit+0x34>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	61d3      	str	r3, [r2, #28]
 8001c56:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <HAL_TIM_Base_MspInit+0x34>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	40021000 	.word	0x40021000

08001c70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c8e:	d117      	bne.n	8001cc0 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <HAL_TIM_MspPostInit+0x58>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <HAL_TIM_MspPostInit+0x58>)
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	6193      	str	r3, [r2, #24]
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_TIM_MspPostInit+0x58>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = servo1_Pin|servo2_Pin;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4804      	ldr	r0, [pc, #16]	@ (8001ccc <HAL_TIM_MspPostInit+0x5c>)
 8001cbc:	f000 fbc0 	bl	8002440 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001cc0:	bf00      	nop
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a19      	ldr	r2, [pc, #100]	@ (8001d50 <HAL_UART_MspInit+0x80>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d12b      	bne.n	8001d48 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf0:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <HAL_UART_MspInit+0x84>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	4a17      	ldr	r2, [pc, #92]	@ (8001d54 <HAL_UART_MspInit+0x84>)
 8001cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cfa:	61d3      	str	r3, [r2, #28]
 8001cfc:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <HAL_UART_MspInit+0x84>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <HAL_UART_MspInit+0x84>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a11      	ldr	r2, [pc, #68]	@ (8001d54 <HAL_UART_MspInit+0x84>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <HAL_UART_MspInit+0x84>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d20:	230c      	movs	r3, #12
 8001d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4619      	mov	r1, r3
 8001d32:	4809      	ldr	r0, [pc, #36]	@ (8001d58 <HAL_UART_MspInit+0x88>)
 8001d34:	f000 fb84 	bl	8002440 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2026      	movs	r0, #38	@ 0x26
 8001d3e:	f000 fa96 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d42:	2026      	movs	r0, #38	@ 0x26
 8001d44:	f000 faaf 	bl	80022a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d48:	bf00      	nop
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40004400 	.word	0x40004400
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010800 	.word	0x40010800

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <NMI_Handler+0x4>

08001d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <HardFault_Handler+0x4>

08001d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <MemManage_Handler+0x4>

08001d74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dac:	f000 f948 	bl	8002040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001db8:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <USART2_IRQHandler+0x10>)
 8001dba:	f002 f889 	bl	8003ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000248 	.word	0x20000248

08001dc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001dcc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001dd0:	f000 fcd2 	bl	8002778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return 1;
 8001ddc:	2301      	movs	r3, #1
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <_kill>:

int _kill(int pid, int sig)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001df0:	f003 fe74 	bl	8005adc <__errno>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2216      	movs	r2, #22
 8001df8:	601a      	str	r2, [r3, #0]
  return -1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_exit>:

void _exit (int status)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ffe7 	bl	8001de6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <_exit+0x12>

08001e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	e00a      	b.n	8001e44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e2e:	f3af 8000 	nop.w
 8001e32:	4601      	mov	r1, r0
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	60ba      	str	r2, [r7, #8]
 8001e3a:	b2ca      	uxtb	r2, r1
 8001e3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbf0      	blt.n	8001e2e <_read+0x12>
  }

  return len;
 8001e4c:	687b      	ldr	r3, [r7, #4]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	e009      	b.n	8001e7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	60ba      	str	r2, [r7, #8]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	dbf1      	blt.n	8001e68 <_write+0x12>
  }
  return len;
 8001e84:	687b      	ldr	r3, [r7, #4]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_close>:

int _close(int file)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eb4:	605a      	str	r2, [r3, #4]
  return 0;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <_isatty>:

int _isatty(int file)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
	...

08001ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef8:	4a14      	ldr	r2, [pc, #80]	@ (8001f4c <_sbrk+0x5c>)
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <_sbrk+0x60>)
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f04:	4b13      	ldr	r3, [pc, #76]	@ (8001f54 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <_sbrk+0x64>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	@ (8001f58 <_sbrk+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f12:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <_sbrk+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d207      	bcs.n	8001f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f20:	f003 fddc 	bl	8005adc <__errno>
 8001f24:	4603      	mov	r3, r0
 8001f26:	220c      	movs	r2, #12
 8001f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2e:	e009      	b.n	8001f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f30:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f36:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a05      	ldr	r2, [pc, #20]	@ (8001f54 <_sbrk+0x64>)
 8001f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20005000 	.word	0x20005000
 8001f50:	00000400 	.word	0x00000400
 8001f54:	20000328 	.word	0x20000328
 8001f58:	20000480 	.word	0x20000480

08001f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f68:	f7ff fff8 	bl	8001f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f6c:	480b      	ldr	r0, [pc, #44]	@ (8001f9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f6e:	490c      	ldr	r1, [pc, #48]	@ (8001fa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f70:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f82:	4a09      	ldr	r2, [pc, #36]	@ (8001fa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f84:	4c09      	ldr	r4, [pc, #36]	@ (8001fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f92:	f003 fda9 	bl	8005ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f96:	f7ff fb7f 	bl	8001698 <main>
  bx lr
 8001f9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001fa4:	08007cb8 	.word	0x08007cb8
  ldr r2, =_sbss
 8001fa8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001fac:	2000047c 	.word	0x2000047c

08001fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC1_2_IRQHandler>
	...

08001fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb8:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <HAL_Init+0x28>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <HAL_Init+0x28>)
 8001fbe:	f043 0310 	orr.w	r3, r3, #16
 8001fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f000 f947 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f000 f808 	bl	8001fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd0:	f7ff fe00 	bl	8001bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40022000 	.word	0x40022000

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe8:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <HAL_InitTick+0x54>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <HAL_InitTick+0x58>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f95f 	bl	80022c2 <HAL_SYSTICK_Config>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00e      	b.n	800202c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d80a      	bhi.n	800202a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f000 f927 	bl	800226e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002020:	4a06      	ldr	r2, [pc, #24]	@ (800203c <HAL_InitTick+0x5c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000010 	.word	0x20000010
 8002038:	20000018 	.word	0x20000018
 800203c:	20000014 	.word	0x20000014

08002040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_IncTick+0x1c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_IncTick+0x20>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a03      	ldr	r2, [pc, #12]	@ (8002060 <HAL_IncTick+0x20>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	20000018 	.word	0x20000018
 8002060:	2000032c 	.word	0x2000032c

08002064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return uwTick;
 8002068:	4b02      	ldr	r3, [pc, #8]	@ (8002074 <HAL_GetTick+0x10>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	2000032c 	.word	0x2000032c

08002078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff fff0 	bl	8002064 <HAL_GetTick>
 8002084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d005      	beq.n	800209e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <HAL_Delay+0x44>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800209e:	bf00      	nop
 80020a0:	f7ff ffe0 	bl	8002064 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8f7      	bhi.n	80020a0 <HAL_Delay+0x28>
  {
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000018 	.word	0x20000018

080020c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db0b      	blt.n	800214e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4906      	ldr	r1, [pc, #24]	@ (8002158 <__NVIC_EnableIRQ+0x34>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2001      	movs	r0, #1
 8002146:	fa00 f202 	lsl.w	r2, r0, r2
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	@ (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	@ (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	@ 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	@ 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff90 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff2d 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff42 	bl	8002108 <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff90 	bl	80021b0 <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5f 	bl	800215c <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff35 	bl	8002124 <__NVIC_EnableIRQ>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ffa2 	bl	8002214 <SysTick_Config>
 80022d0:	4603      	mov	r3, r0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d008      	beq.n	8002304 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2204      	movs	r2, #4
 80022f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e020      	b.n	8002346 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 020e 	bic.w	r2, r2, #14
 8002312:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232c:	2101      	movs	r1, #1
 800232e:	fa01 f202 	lsl.w	r2, r1, r2
 8002332:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002344:	7bfb      	ldrb	r3, [r7, #15]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d005      	beq.n	8002374 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2204      	movs	r2, #4
 800236c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
 8002372:	e051      	b.n	8002418 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 020e 	bic.w	r2, r2, #14
 8002382:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a22      	ldr	r2, [pc, #136]	@ (8002424 <HAL_DMA_Abort_IT+0xd4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d029      	beq.n	80023f2 <HAL_DMA_Abort_IT+0xa2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a21      	ldr	r2, [pc, #132]	@ (8002428 <HAL_DMA_Abort_IT+0xd8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d022      	beq.n	80023ee <HAL_DMA_Abort_IT+0x9e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1f      	ldr	r2, [pc, #124]	@ (800242c <HAL_DMA_Abort_IT+0xdc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01a      	beq.n	80023e8 <HAL_DMA_Abort_IT+0x98>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002430 <HAL_DMA_Abort_IT+0xe0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d012      	beq.n	80023e2 <HAL_DMA_Abort_IT+0x92>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002434 <HAL_DMA_Abort_IT+0xe4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00a      	beq.n	80023dc <HAL_DMA_Abort_IT+0x8c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002438 <HAL_DMA_Abort_IT+0xe8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d102      	bne.n	80023d6 <HAL_DMA_Abort_IT+0x86>
 80023d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80023d4:	e00e      	b.n	80023f4 <HAL_DMA_Abort_IT+0xa4>
 80023d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023da:	e00b      	b.n	80023f4 <HAL_DMA_Abort_IT+0xa4>
 80023dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023e0:	e008      	b.n	80023f4 <HAL_DMA_Abort_IT+0xa4>
 80023e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023e6:	e005      	b.n	80023f4 <HAL_DMA_Abort_IT+0xa4>
 80023e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023ec:	e002      	b.n	80023f4 <HAL_DMA_Abort_IT+0xa4>
 80023ee:	2310      	movs	r3, #16
 80023f0:	e000      	b.n	80023f4 <HAL_DMA_Abort_IT+0xa4>
 80023f2:	2301      	movs	r3, #1
 80023f4:	4a11      	ldr	r2, [pc, #68]	@ (800243c <HAL_DMA_Abort_IT+0xec>)
 80023f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
    } 
  }
  return status;
 8002418:	7bfb      	ldrb	r3, [r7, #15]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40020008 	.word	0x40020008
 8002428:	4002001c 	.word	0x4002001c
 800242c:	40020030 	.word	0x40020030
 8002430:	40020044 	.word	0x40020044
 8002434:	40020058 	.word	0x40020058
 8002438:	4002006c 	.word	0x4002006c
 800243c:	40020000 	.word	0x40020000

08002440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002440:	b480      	push	{r7}
 8002442:	b08b      	sub	sp, #44	@ 0x2c
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002452:	e169      	b.n	8002728 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002454:	2201      	movs	r2, #1
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	429a      	cmp	r2, r3
 800246e:	f040 8158 	bne.w	8002722 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4a9a      	ldr	r2, [pc, #616]	@ (80026e0 <HAL_GPIO_Init+0x2a0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d05e      	beq.n	800253a <HAL_GPIO_Init+0xfa>
 800247c:	4a98      	ldr	r2, [pc, #608]	@ (80026e0 <HAL_GPIO_Init+0x2a0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d875      	bhi.n	800256e <HAL_GPIO_Init+0x12e>
 8002482:	4a98      	ldr	r2, [pc, #608]	@ (80026e4 <HAL_GPIO_Init+0x2a4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d058      	beq.n	800253a <HAL_GPIO_Init+0xfa>
 8002488:	4a96      	ldr	r2, [pc, #600]	@ (80026e4 <HAL_GPIO_Init+0x2a4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d86f      	bhi.n	800256e <HAL_GPIO_Init+0x12e>
 800248e:	4a96      	ldr	r2, [pc, #600]	@ (80026e8 <HAL_GPIO_Init+0x2a8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d052      	beq.n	800253a <HAL_GPIO_Init+0xfa>
 8002494:	4a94      	ldr	r2, [pc, #592]	@ (80026e8 <HAL_GPIO_Init+0x2a8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d869      	bhi.n	800256e <HAL_GPIO_Init+0x12e>
 800249a:	4a94      	ldr	r2, [pc, #592]	@ (80026ec <HAL_GPIO_Init+0x2ac>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d04c      	beq.n	800253a <HAL_GPIO_Init+0xfa>
 80024a0:	4a92      	ldr	r2, [pc, #584]	@ (80026ec <HAL_GPIO_Init+0x2ac>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d863      	bhi.n	800256e <HAL_GPIO_Init+0x12e>
 80024a6:	4a92      	ldr	r2, [pc, #584]	@ (80026f0 <HAL_GPIO_Init+0x2b0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d046      	beq.n	800253a <HAL_GPIO_Init+0xfa>
 80024ac:	4a90      	ldr	r2, [pc, #576]	@ (80026f0 <HAL_GPIO_Init+0x2b0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d85d      	bhi.n	800256e <HAL_GPIO_Init+0x12e>
 80024b2:	2b12      	cmp	r3, #18
 80024b4:	d82a      	bhi.n	800250c <HAL_GPIO_Init+0xcc>
 80024b6:	2b12      	cmp	r3, #18
 80024b8:	d859      	bhi.n	800256e <HAL_GPIO_Init+0x12e>
 80024ba:	a201      	add	r2, pc, #4	@ (adr r2, 80024c0 <HAL_GPIO_Init+0x80>)
 80024bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c0:	0800253b 	.word	0x0800253b
 80024c4:	08002515 	.word	0x08002515
 80024c8:	08002527 	.word	0x08002527
 80024cc:	08002569 	.word	0x08002569
 80024d0:	0800256f 	.word	0x0800256f
 80024d4:	0800256f 	.word	0x0800256f
 80024d8:	0800256f 	.word	0x0800256f
 80024dc:	0800256f 	.word	0x0800256f
 80024e0:	0800256f 	.word	0x0800256f
 80024e4:	0800256f 	.word	0x0800256f
 80024e8:	0800256f 	.word	0x0800256f
 80024ec:	0800256f 	.word	0x0800256f
 80024f0:	0800256f 	.word	0x0800256f
 80024f4:	0800256f 	.word	0x0800256f
 80024f8:	0800256f 	.word	0x0800256f
 80024fc:	0800256f 	.word	0x0800256f
 8002500:	0800256f 	.word	0x0800256f
 8002504:	0800251d 	.word	0x0800251d
 8002508:	08002531 	.word	0x08002531
 800250c:	4a79      	ldr	r2, [pc, #484]	@ (80026f4 <HAL_GPIO_Init+0x2b4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d013      	beq.n	800253a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002512:	e02c      	b.n	800256e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	623b      	str	r3, [r7, #32]
          break;
 800251a:	e029      	b.n	8002570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	3304      	adds	r3, #4
 8002522:	623b      	str	r3, [r7, #32]
          break;
 8002524:	e024      	b.n	8002570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	3308      	adds	r3, #8
 800252c:	623b      	str	r3, [r7, #32]
          break;
 800252e:	e01f      	b.n	8002570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	330c      	adds	r3, #12
 8002536:	623b      	str	r3, [r7, #32]
          break;
 8002538:	e01a      	b.n	8002570 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d102      	bne.n	8002548 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002542:	2304      	movs	r3, #4
 8002544:	623b      	str	r3, [r7, #32]
          break;
 8002546:	e013      	b.n	8002570 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d105      	bne.n	800255c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002550:	2308      	movs	r3, #8
 8002552:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	611a      	str	r2, [r3, #16]
          break;
 800255a:	e009      	b.n	8002570 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800255c:	2308      	movs	r3, #8
 800255e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	615a      	str	r2, [r3, #20]
          break;
 8002566:	e003      	b.n	8002570 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]
          break;
 800256c:	e000      	b.n	8002570 <HAL_GPIO_Init+0x130>
          break;
 800256e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2bff      	cmp	r3, #255	@ 0xff
 8002574:	d801      	bhi.n	800257a <HAL_GPIO_Init+0x13a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	e001      	b.n	800257e <HAL_GPIO_Init+0x13e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3304      	adds	r3, #4
 800257e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2bff      	cmp	r3, #255	@ 0xff
 8002584:	d802      	bhi.n	800258c <HAL_GPIO_Init+0x14c>
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	e002      	b.n	8002592 <HAL_GPIO_Init+0x152>
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	3b08      	subs	r3, #8
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	210f      	movs	r1, #15
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	401a      	ands	r2, r3
 80025a4:	6a39      	ldr	r1, [r7, #32]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	431a      	orrs	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 80b1 	beq.w	8002722 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025c0:	4b4d      	ldr	r3, [pc, #308]	@ (80026f8 <HAL_GPIO_Init+0x2b8>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	4a4c      	ldr	r2, [pc, #304]	@ (80026f8 <HAL_GPIO_Init+0x2b8>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6193      	str	r3, [r2, #24]
 80025cc:	4b4a      	ldr	r3, [pc, #296]	@ (80026f8 <HAL_GPIO_Init+0x2b8>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025d8:	4a48      	ldr	r2, [pc, #288]	@ (80026fc <HAL_GPIO_Init+0x2bc>)
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	3302      	adds	r3, #2
 80025e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	220f      	movs	r2, #15
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4013      	ands	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a40      	ldr	r2, [pc, #256]	@ (8002700 <HAL_GPIO_Init+0x2c0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d013      	beq.n	800262c <HAL_GPIO_Init+0x1ec>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a3f      	ldr	r2, [pc, #252]	@ (8002704 <HAL_GPIO_Init+0x2c4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00d      	beq.n	8002628 <HAL_GPIO_Init+0x1e8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a3e      	ldr	r2, [pc, #248]	@ (8002708 <HAL_GPIO_Init+0x2c8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d007      	beq.n	8002624 <HAL_GPIO_Init+0x1e4>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a3d      	ldr	r2, [pc, #244]	@ (800270c <HAL_GPIO_Init+0x2cc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d101      	bne.n	8002620 <HAL_GPIO_Init+0x1e0>
 800261c:	2303      	movs	r3, #3
 800261e:	e006      	b.n	800262e <HAL_GPIO_Init+0x1ee>
 8002620:	2304      	movs	r3, #4
 8002622:	e004      	b.n	800262e <HAL_GPIO_Init+0x1ee>
 8002624:	2302      	movs	r3, #2
 8002626:	e002      	b.n	800262e <HAL_GPIO_Init+0x1ee>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <HAL_GPIO_Init+0x1ee>
 800262c:	2300      	movs	r3, #0
 800262e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002630:	f002 0203 	and.w	r2, r2, #3
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	4093      	lsls	r3, r2
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800263e:	492f      	ldr	r1, [pc, #188]	@ (80026fc <HAL_GPIO_Init+0x2bc>)
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002658:	4b2d      	ldr	r3, [pc, #180]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	492c      	ldr	r1, [pc, #176]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	608b      	str	r3, [r1, #8]
 8002664:	e006      	b.n	8002674 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002666:	4b2a      	ldr	r3, [pc, #168]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	43db      	mvns	r3, r3
 800266e:	4928      	ldr	r1, [pc, #160]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 8002670:	4013      	ands	r3, r2
 8002672:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d006      	beq.n	800268e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002680:	4b23      	ldr	r3, [pc, #140]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	4922      	ldr	r1, [pc, #136]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	60cb      	str	r3, [r1, #12]
 800268c:	e006      	b.n	800269c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800268e:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	43db      	mvns	r3, r3
 8002696:	491e      	ldr	r1, [pc, #120]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 8002698:	4013      	ands	r3, r2
 800269a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d006      	beq.n	80026b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026a8:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4918      	ldr	r1, [pc, #96]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
 80026b4:	e006      	b.n	80026c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026b6:	4b16      	ldr	r3, [pc, #88]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	43db      	mvns	r3, r3
 80026be:	4914      	ldr	r1, [pc, #80]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d021      	beq.n	8002714 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	490e      	ldr	r1, [pc, #56]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
 80026dc:	e021      	b.n	8002722 <HAL_GPIO_Init+0x2e2>
 80026de:	bf00      	nop
 80026e0:	10320000 	.word	0x10320000
 80026e4:	10310000 	.word	0x10310000
 80026e8:	10220000 	.word	0x10220000
 80026ec:	10210000 	.word	0x10210000
 80026f0:	10120000 	.word	0x10120000
 80026f4:	10110000 	.word	0x10110000
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40010000 	.word	0x40010000
 8002700:	40010800 	.word	0x40010800
 8002704:	40010c00 	.word	0x40010c00
 8002708:	40011000 	.word	0x40011000
 800270c:	40011400 	.word	0x40011400
 8002710:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002714:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_GPIO_Init+0x304>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	43db      	mvns	r3, r3
 800271c:	4909      	ldr	r1, [pc, #36]	@ (8002744 <HAL_GPIO_Init+0x304>)
 800271e:	4013      	ands	r3, r2
 8002720:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	3301      	adds	r3, #1
 8002726:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	fa22 f303 	lsr.w	r3, r2, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	f47f ae8e 	bne.w	8002454 <HAL_GPIO_Init+0x14>
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	372c      	adds	r7, #44	@ 0x2c
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	40010400 	.word	0x40010400

08002748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
 8002754:	4613      	mov	r3, r2
 8002756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002764:	e003      	b.n	800276e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	041a      	lsls	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	611a      	str	r2, [r3, #16]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002782:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d006      	beq.n	800279c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800278e:	4a05      	ldr	r2, [pc, #20]	@ (80027a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f806 	bl	80027a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40010400 	.word	0x40010400

080027a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e272      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8087 	beq.w	80028ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027dc:	4b92      	ldr	r3, [pc, #584]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d00c      	beq.n	8002802 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d112      	bne.n	800281a <HAL_RCC_OscConfig+0x5e>
 80027f4:	4b8c      	ldr	r3, [pc, #560]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002800:	d10b      	bne.n	800281a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002802:	4b89      	ldr	r3, [pc, #548]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d06c      	beq.n	80028e8 <HAL_RCC_OscConfig+0x12c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d168      	bne.n	80028e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e24c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002822:	d106      	bne.n	8002832 <HAL_RCC_OscConfig+0x76>
 8002824:	4b80      	ldr	r3, [pc, #512]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a7f      	ldr	r2, [pc, #508]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800282a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	e02e      	b.n	8002890 <HAL_RCC_OscConfig+0xd4>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0x98>
 800283a:	4b7b      	ldr	r3, [pc, #492]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a7a      	ldr	r2, [pc, #488]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b78      	ldr	r3, [pc, #480]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a77      	ldr	r2, [pc, #476]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800284c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e01d      	b.n	8002890 <HAL_RCC_OscConfig+0xd4>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0xbc>
 800285e:	4b72      	ldr	r3, [pc, #456]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a71      	ldr	r2, [pc, #452]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a6e      	ldr	r2, [pc, #440]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e00b      	b.n	8002890 <HAL_RCC_OscConfig+0xd4>
 8002878:	4b6b      	ldr	r3, [pc, #428]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a6a      	ldr	r2, [pc, #424]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800287e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b68      	ldr	r3, [pc, #416]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a67      	ldr	r2, [pc, #412]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800288a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800288e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d013      	beq.n	80028c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7ff fbe4 	bl	8002064 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7ff fbe0 	bl	8002064 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	@ 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e200      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0xe4>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7ff fbd0 	bl	8002064 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c8:	f7ff fbcc 	bl	8002064 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	@ 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e1ec      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028da:	4b53      	ldr	r3, [pc, #332]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x10c>
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d063      	beq.n	80029be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00b      	beq.n	800291a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002902:	4b49      	ldr	r3, [pc, #292]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b08      	cmp	r3, #8
 800290c:	d11c      	bne.n	8002948 <HAL_RCC_OscConfig+0x18c>
 800290e:	4b46      	ldr	r3, [pc, #280]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d116      	bne.n	8002948 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	4b43      	ldr	r3, [pc, #268]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_RCC_OscConfig+0x176>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d001      	beq.n	8002932 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e1c0      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002932:	4b3d      	ldr	r3, [pc, #244]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4939      	ldr	r1, [pc, #228]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002946:	e03a      	b.n	80029be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d020      	beq.n	8002992 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002950:	4b36      	ldr	r3, [pc, #216]	@ (8002a2c <HAL_RCC_OscConfig+0x270>)
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7ff fb85 	bl	8002064 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295e:	f7ff fb81 	bl	8002064 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e1a1      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002970:	4b2d      	ldr	r3, [pc, #180]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4927      	ldr	r1, [pc, #156]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800298c:	4313      	orrs	r3, r2
 800298e:	600b      	str	r3, [r1, #0]
 8002990:	e015      	b.n	80029be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002992:	4b26      	ldr	r3, [pc, #152]	@ (8002a2c <HAL_RCC_OscConfig+0x270>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7ff fb64 	bl	8002064 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a0:	f7ff fb60 	bl	8002064 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e180      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d03a      	beq.n	8002a40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d019      	beq.n	8002a06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d2:	4b17      	ldr	r3, [pc, #92]	@ (8002a30 <HAL_RCC_OscConfig+0x274>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d8:	f7ff fb44 	bl	8002064 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e0:	f7ff fb40 	bl	8002064 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e160      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029fe:	2001      	movs	r0, #1
 8002a00:	f000 face 	bl	8002fa0 <RCC_Delay>
 8002a04:	e01c      	b.n	8002a40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a06:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <HAL_RCC_OscConfig+0x274>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0c:	f7ff fb2a 	bl	8002064 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a12:	e00f      	b.n	8002a34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a14:	f7ff fb26 	bl	8002064 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d908      	bls.n	8002a34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e146      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	42420000 	.word	0x42420000
 8002a30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	4b92      	ldr	r3, [pc, #584]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e9      	bne.n	8002a14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80a6 	beq.w	8002b9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a52:	4b8b      	ldr	r3, [pc, #556]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10d      	bne.n	8002a7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	4b88      	ldr	r3, [pc, #544]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4a87      	ldr	r2, [pc, #540]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a68:	61d3      	str	r3, [r2, #28]
 8002a6a:	4b85      	ldr	r3, [pc, #532]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a76:	2301      	movs	r3, #1
 8002a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	4b82      	ldr	r3, [pc, #520]	@ (8002c84 <HAL_RCC_OscConfig+0x4c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d118      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a86:	4b7f      	ldr	r3, [pc, #508]	@ (8002c84 <HAL_RCC_OscConfig+0x4c8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c84 <HAL_RCC_OscConfig+0x4c8>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a92:	f7ff fae7 	bl	8002064 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9a:	f7ff fae3 	bl	8002064 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b64      	cmp	r3, #100	@ 0x64
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e103      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	4b75      	ldr	r3, [pc, #468]	@ (8002c84 <HAL_RCC_OscConfig+0x4c8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x312>
 8002ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a6e      	ldr	r2, [pc, #440]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	e02d      	b.n	8002b2a <HAL_RCC_OscConfig+0x36e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x334>
 8002ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4a69      	ldr	r2, [pc, #420]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	6213      	str	r3, [r2, #32]
 8002ae2:	4b67      	ldr	r3, [pc, #412]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4a66      	ldr	r2, [pc, #408]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	f023 0304 	bic.w	r3, r3, #4
 8002aec:	6213      	str	r3, [r2, #32]
 8002aee:	e01c      	b.n	8002b2a <HAL_RCC_OscConfig+0x36e>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d10c      	bne.n	8002b12 <HAL_RCC_OscConfig+0x356>
 8002af8:	4b61      	ldr	r3, [pc, #388]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4a60      	ldr	r2, [pc, #384]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	f043 0304 	orr.w	r3, r3, #4
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	4b5e      	ldr	r3, [pc, #376]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4a5d      	ldr	r2, [pc, #372]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6213      	str	r3, [r2, #32]
 8002b10:	e00b      	b.n	8002b2a <HAL_RCC_OscConfig+0x36e>
 8002b12:	4b5b      	ldr	r3, [pc, #364]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a5a      	ldr	r2, [pc, #360]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	6213      	str	r3, [r2, #32]
 8002b1e:	4b58      	ldr	r3, [pc, #352]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4a57      	ldr	r2, [pc, #348]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	f023 0304 	bic.w	r3, r3, #4
 8002b28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d015      	beq.n	8002b5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b32:	f7ff fa97 	bl	8002064 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7ff fa93 	bl	8002064 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e0b1      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b50:	4b4b      	ldr	r3, [pc, #300]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ee      	beq.n	8002b3a <HAL_RCC_OscConfig+0x37e>
 8002b5c:	e014      	b.n	8002b88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5e:	f7ff fa81 	bl	8002064 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7ff fa7d 	bl	8002064 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e09b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7c:	4b40      	ldr	r3, [pc, #256]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1ee      	bne.n	8002b66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d105      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	4a3b      	ldr	r2, [pc, #236]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8087 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba4:	4b36      	ldr	r3, [pc, #216]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d061      	beq.n	8002c74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d146      	bne.n	8002c46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb8:	4b33      	ldr	r3, [pc, #204]	@ (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7ff fa51 	bl	8002064 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc6:	f7ff fa4d 	bl	8002064 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e06d      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd8:	4b29      	ldr	r3, [pc, #164]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bec:	d108      	bne.n	8002c00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bee:	4b24      	ldr	r3, [pc, #144]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	4921      	ldr	r1, [pc, #132]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c00:	4b1f      	ldr	r3, [pc, #124]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a19      	ldr	r1, [r3, #32]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	430b      	orrs	r3, r1
 8002c12:	491b      	ldr	r1, [pc, #108]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c18:	4b1b      	ldr	r3, [pc, #108]	@ (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7ff fa21 	bl	8002064 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c26:	f7ff fa1d 	bl	8002064 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e03d      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c38:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x46a>
 8002c44:	e035      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c46:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7ff fa0a 	bl	8002064 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c54:	f7ff fa06 	bl	8002064 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e026      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c66:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x498>
 8002c72:	e01e      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d107      	bne.n	8002c8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e019      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40007000 	.word	0x40007000
 8002c88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <HAL_RCC_OscConfig+0x500>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d106      	bne.n	8002cae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000

08002cc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0d0      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d910      	bls.n	8002d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b67      	ldr	r3, [pc, #412]	@ (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 0207 	bic.w	r2, r3, #7
 8002cea:	4965      	ldr	r1, [pc, #404]	@ (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b63      	ldr	r3, [pc, #396]	@ (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0b8      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d020      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d1c:	4b59      	ldr	r3, [pc, #356]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4a58      	ldr	r2, [pc, #352]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d34:	4b53      	ldr	r3, [pc, #332]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a52      	ldr	r2, [pc, #328]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d40:	4b50      	ldr	r3, [pc, #320]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	494d      	ldr	r1, [pc, #308]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d040      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	4b47      	ldr	r3, [pc, #284]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d115      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e07f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7e:	4b41      	ldr	r3, [pc, #260]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e073      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e06b      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d9e:	4b39      	ldr	r3, [pc, #228]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4936      	ldr	r1, [pc, #216]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db0:	f7ff f958 	bl	8002064 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db8:	f7ff f954 	bl	8002064 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e053      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	4b2d      	ldr	r3, [pc, #180]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 020c 	and.w	r2, r3, #12
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d1eb      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de0:	4b27      	ldr	r3, [pc, #156]	@ (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d210      	bcs.n	8002e10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b24      	ldr	r3, [pc, #144]	@ (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	4922      	ldr	r1, [pc, #136]	@ (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b20      	ldr	r3, [pc, #128]	@ (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e032      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1c:	4b19      	ldr	r3, [pc, #100]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4916      	ldr	r1, [pc, #88]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e3a:	4b12      	ldr	r3, [pc, #72]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	490e      	ldr	r1, [pc, #56]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e4e:	f000 f821 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b0b      	ldr	r3, [pc, #44]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	490a      	ldr	r1, [pc, #40]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e60:	5ccb      	ldrb	r3, [r1, r3]
 8002e62:	fa22 f303 	lsr.w	r3, r2, r3
 8002e66:	4a09      	ldr	r2, [pc, #36]	@ (8002e8c <HAL_RCC_ClockConfig+0x1cc>)
 8002e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e6a:	4b09      	ldr	r3, [pc, #36]	@ (8002e90 <HAL_RCC_ClockConfig+0x1d0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff f8b6 	bl	8001fe0 <HAL_InitTick>

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40022000 	.word	0x40022000
 8002e84:	40021000 	.word	0x40021000
 8002e88:	0800786c 	.word	0x0800786c
 8002e8c:	20000010 	.word	0x20000010
 8002e90:	20000014 	.word	0x20000014

08002e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eae:	4b1e      	ldr	r3, [pc, #120]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x94>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d002      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x30>
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x36>
 8002ec2:	e027      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ec4:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ec6:	613b      	str	r3, [r7, #16]
      break;
 8002ec8:	e027      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	0c9b      	lsrs	r3, r3, #18
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	4a17      	ldr	r2, [pc, #92]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ed4:	5cd3      	ldrb	r3, [r2, r3]
 8002ed6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d010      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ee2:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	0c5b      	lsrs	r3, r3, #17
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	4a11      	ldr	r2, [pc, #68]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eee:	5cd3      	ldrb	r3, [r2, r3]
 8002ef0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ef6:	fb03 f202 	mul.w	r2, r3, r2
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	e004      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a0c      	ldr	r2, [pc, #48]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	613b      	str	r3, [r7, #16]
      break;
 8002f12:	e002      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f16:	613b      	str	r3, [r7, #16]
      break;
 8002f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f1a:	693b      	ldr	r3, [r7, #16]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	007a1200 	.word	0x007a1200
 8002f30:	08007884 	.word	0x08007884
 8002f34:	08007894 	.word	0x08007894
 8002f38:	003d0900 	.word	0x003d0900

08002f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f40:	4b02      	ldr	r3, [pc, #8]	@ (8002f4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	20000010 	.word	0x20000010

08002f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f54:	f7ff fff2 	bl	8002f3c <HAL_RCC_GetHCLKFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b05      	ldr	r3, [pc, #20]	@ (8002f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4903      	ldr	r1, [pc, #12]	@ (8002f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	0800787c 	.word	0x0800787c

08002f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f7c:	f7ff ffde 	bl	8002f3c <HAL_RCC_GetHCLKFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b05      	ldr	r3, [pc, #20]	@ (8002f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	0adb      	lsrs	r3, r3, #11
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	4903      	ldr	r1, [pc, #12]	@ (8002f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	0800787c 	.word	0x0800787c

08002fa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <RCC_Delay+0x34>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd8 <RCC_Delay+0x38>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0a5b      	lsrs	r3, r3, #9
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fbc:	bf00      	nop
  }
  while (Delay --);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1e5a      	subs	r2, r3, #1
 8002fc2:	60fa      	str	r2, [r7, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f9      	bne.n	8002fbc <RCC_Delay+0x1c>
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr
 8002fd4:	20000010 	.word	0x20000010
 8002fd8:	10624dd3 	.word	0x10624dd3

08002fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e041      	b.n	8003072 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fe fe18 	bl	8001c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f000 fab2 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e041      	b.n	8003110 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d106      	bne.n	80030a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f839 	bl	8003118 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3304      	adds	r3, #4
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f000 fa63 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
	...

0800312c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <HAL_TIM_PWM_Start+0x24>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	bf14      	ite	ne
 8003148:	2301      	movne	r3, #1
 800314a:	2300      	moveq	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e022      	b.n	8003196 <HAL_TIM_PWM_Start+0x6a>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b04      	cmp	r3, #4
 8003154:	d109      	bne.n	800316a <HAL_TIM_PWM_Start+0x3e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	bf14      	ite	ne
 8003162:	2301      	movne	r3, #1
 8003164:	2300      	moveq	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	e015      	b.n	8003196 <HAL_TIM_PWM_Start+0x6a>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d109      	bne.n	8003184 <HAL_TIM_PWM_Start+0x58>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	bf14      	ite	ne
 800317c:	2301      	movne	r3, #1
 800317e:	2300      	moveq	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e008      	b.n	8003196 <HAL_TIM_PWM_Start+0x6a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	bf14      	ite	ne
 8003190:	2301      	movne	r3, #1
 8003192:	2300      	moveq	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e05e      	b.n	800325c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d104      	bne.n	80031ae <HAL_TIM_PWM_Start+0x82>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031ac:	e013      	b.n	80031d6 <HAL_TIM_PWM_Start+0xaa>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d104      	bne.n	80031be <HAL_TIM_PWM_Start+0x92>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031bc:	e00b      	b.n	80031d6 <HAL_TIM_PWM_Start+0xaa>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_PWM_Start+0xa2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031cc:	e003      	b.n	80031d6 <HAL_TIM_PWM_Start+0xaa>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2201      	movs	r2, #1
 80031dc:	6839      	ldr	r1, [r7, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fc5c 	bl	8003a9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003264 <HAL_TIM_PWM_Start+0x138>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d107      	bne.n	80031fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a18      	ldr	r2, [pc, #96]	@ (8003264 <HAL_TIM_PWM_Start+0x138>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00e      	beq.n	8003226 <HAL_TIM_PWM_Start+0xfa>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003210:	d009      	beq.n	8003226 <HAL_TIM_PWM_Start+0xfa>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a14      	ldr	r2, [pc, #80]	@ (8003268 <HAL_TIM_PWM_Start+0x13c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d004      	beq.n	8003226 <HAL_TIM_PWM_Start+0xfa>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a12      	ldr	r2, [pc, #72]	@ (800326c <HAL_TIM_PWM_Start+0x140>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d111      	bne.n	800324a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b06      	cmp	r3, #6
 8003236:	d010      	beq.n	800325a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003248:	e007      	b.n	800325a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40000400 	.word	0x40000400
 800326c:	40000800 	.word	0x40000800

08003270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800328a:	2302      	movs	r3, #2
 800328c:	e0ae      	b.n	80033ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	f200 809f 	bhi.w	80033dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800329e:	a201      	add	r2, pc, #4	@ (adr r2, 80032a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032d9 	.word	0x080032d9
 80032a8:	080033dd 	.word	0x080033dd
 80032ac:	080033dd 	.word	0x080033dd
 80032b0:	080033dd 	.word	0x080033dd
 80032b4:	08003319 	.word	0x08003319
 80032b8:	080033dd 	.word	0x080033dd
 80032bc:	080033dd 	.word	0x080033dd
 80032c0:	080033dd 	.word	0x080033dd
 80032c4:	0800335b 	.word	0x0800335b
 80032c8:	080033dd 	.word	0x080033dd
 80032cc:	080033dd 	.word	0x080033dd
 80032d0:	080033dd 	.word	0x080033dd
 80032d4:	0800339b 	.word	0x0800339b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f9be 	bl	8003660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0208 	orr.w	r2, r2, #8
 80032f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0204 	bic.w	r2, r2, #4
 8003302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6999      	ldr	r1, [r3, #24]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	619a      	str	r2, [r3, #24]
      break;
 8003316:	e064      	b.n	80033e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fa04 	bl	800372c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6999      	ldr	r1, [r3, #24]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	021a      	lsls	r2, r3, #8
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	619a      	str	r2, [r3, #24]
      break;
 8003358:	e043      	b.n	80033e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fa4d 	bl	8003800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0208 	orr.w	r2, r2, #8
 8003374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0204 	bic.w	r2, r2, #4
 8003384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69d9      	ldr	r1, [r3, #28]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	61da      	str	r2, [r3, #28]
      break;
 8003398:	e023      	b.n	80033e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fa97 	bl	80038d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69d9      	ldr	r1, [r3, #28]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	021a      	lsls	r2, r3, #8
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	61da      	str	r2, [r3, #28]
      break;
 80033da:	e002      	b.n	80033e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	75fb      	strb	r3, [r7, #23]
      break;
 80033e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_TIM_ConfigClockSource+0x1c>
 800340c:	2302      	movs	r3, #2
 800340e:	e0b4      	b.n	800357a <HAL_TIM_ConfigClockSource+0x186>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800342e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003436:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003448:	d03e      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0xd4>
 800344a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344e:	f200 8087 	bhi.w	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003456:	f000 8086 	beq.w	8003566 <HAL_TIM_ConfigClockSource+0x172>
 800345a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800345e:	d87f      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003460:	2b70      	cmp	r3, #112	@ 0x70
 8003462:	d01a      	beq.n	800349a <HAL_TIM_ConfigClockSource+0xa6>
 8003464:	2b70      	cmp	r3, #112	@ 0x70
 8003466:	d87b      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003468:	2b60      	cmp	r3, #96	@ 0x60
 800346a:	d050      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x11a>
 800346c:	2b60      	cmp	r3, #96	@ 0x60
 800346e:	d877      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b50      	cmp	r3, #80	@ 0x50
 8003472:	d03c      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0xfa>
 8003474:	2b50      	cmp	r3, #80	@ 0x50
 8003476:	d873      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b40      	cmp	r3, #64	@ 0x40
 800347a:	d058      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x13a>
 800347c:	2b40      	cmp	r3, #64	@ 0x40
 800347e:	d86f      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003480:	2b30      	cmp	r3, #48	@ 0x30
 8003482:	d064      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 8003484:	2b30      	cmp	r3, #48	@ 0x30
 8003486:	d86b      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003488:	2b20      	cmp	r3, #32
 800348a:	d060      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 800348c:	2b20      	cmp	r3, #32
 800348e:	d867      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d05c      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 8003494:	2b10      	cmp	r3, #16
 8003496:	d05a      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 8003498:	e062      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034aa:	f000 fad8 	bl	8003a5e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	609a      	str	r2, [r3, #8]
      break;
 80034c6:	e04f      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034d8:	f000 fac1 	bl	8003a5e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034ea:	609a      	str	r2, [r3, #8]
      break;
 80034ec:	e03c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fa:	461a      	mov	r2, r3
 80034fc:	f000 fa38 	bl	8003970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2150      	movs	r1, #80	@ 0x50
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fa8f 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 800350c:	e02c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800351a:	461a      	mov	r2, r3
 800351c:	f000 fa56 	bl	80039cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2160      	movs	r1, #96	@ 0x60
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fa7f 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 800352c:	e01c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800353a:	461a      	mov	r2, r3
 800353c:	f000 fa18 	bl	8003970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2140      	movs	r1, #64	@ 0x40
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fa6f 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 800354c:	e00c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f000 fa66 	bl	8003a2a <TIM_ITRx_SetConfig>
      break;
 800355e:	e003      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
      break;
 8003564:	e000      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a2f      	ldr	r2, [pc, #188]	@ (8003654 <TIM_Base_SetConfig+0xd0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00b      	beq.n	80035b4 <TIM_Base_SetConfig+0x30>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a2:	d007      	beq.n	80035b4 <TIM_Base_SetConfig+0x30>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003658 <TIM_Base_SetConfig+0xd4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d003      	beq.n	80035b4 <TIM_Base_SetConfig+0x30>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a2b      	ldr	r2, [pc, #172]	@ (800365c <TIM_Base_SetConfig+0xd8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d108      	bne.n	80035c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a22      	ldr	r2, [pc, #136]	@ (8003654 <TIM_Base_SetConfig+0xd0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00b      	beq.n	80035e6 <TIM_Base_SetConfig+0x62>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d4:	d007      	beq.n	80035e6 <TIM_Base_SetConfig+0x62>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003658 <TIM_Base_SetConfig+0xd4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <TIM_Base_SetConfig+0x62>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a1e      	ldr	r2, [pc, #120]	@ (800365c <TIM_Base_SetConfig+0xd8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d108      	bne.n	80035f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0d      	ldr	r2, [pc, #52]	@ (8003654 <TIM_Base_SetConfig+0xd0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d103      	bne.n	800362c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f023 0201 	bic.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	611a      	str	r2, [r3, #16]
  }
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr
 8003654:	40012c00 	.word	0x40012c00
 8003658:	40000400 	.word	0x40000400
 800365c:	40000800 	.word	0x40000800

08003660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f023 0201 	bic.w	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800368e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0303 	bic.w	r3, r3, #3
 8003696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f023 0302 	bic.w	r3, r3, #2
 80036a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003728 <TIM_OC1_SetConfig+0xc8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d10c      	bne.n	80036d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f023 0308 	bic.w	r3, r3, #8
 80036c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f023 0304 	bic.w	r3, r3, #4
 80036d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a13      	ldr	r2, [pc, #76]	@ (8003728 <TIM_OC1_SetConfig+0xc8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d111      	bne.n	8003702 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	621a      	str	r2, [r3, #32]
}
 800371c:	bf00      	nop
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40012c00 	.word	0x40012c00

0800372c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f023 0210 	bic.w	r2, r3, #16
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800375a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f023 0320 	bic.w	r3, r3, #32
 8003776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a1d      	ldr	r2, [pc, #116]	@ (80037fc <TIM_OC2_SetConfig+0xd0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d10d      	bne.n	80037a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a14      	ldr	r2, [pc, #80]	@ (80037fc <TIM_OC2_SetConfig+0xd0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d113      	bne.n	80037d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	621a      	str	r2, [r3, #32]
}
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	40012c00 	.word	0x40012c00

08003800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800382e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0303 	bic.w	r3, r3, #3
 8003836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a1d      	ldr	r2, [pc, #116]	@ (80038d0 <TIM_OC3_SetConfig+0xd0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d10d      	bne.n	800387a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003864:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a14      	ldr	r2, [pc, #80]	@ (80038d0 <TIM_OC3_SetConfig+0xd0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d113      	bne.n	80038aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	621a      	str	r2, [r3, #32]
}
 80038c4:	bf00      	nop
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40012c00 	.word	0x40012c00

080038d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800390a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800391e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	031b      	lsls	r3, r3, #12
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a0f      	ldr	r2, [pc, #60]	@ (800396c <TIM_OC4_SetConfig+0x98>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d109      	bne.n	8003948 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800393a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	019b      	lsls	r3, r3, #6
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	621a      	str	r2, [r3, #32]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	40012c00 	.word	0x40012c00

08003970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f023 0201 	bic.w	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800399a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f023 030a 	bic.w	r3, r3, #10
 80039ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	621a      	str	r2, [r3, #32]
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f023 0210 	bic.w	r2, r3, #16
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	031b      	lsls	r3, r3, #12
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	621a      	str	r2, [r3, #32]
}
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr

08003a2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f043 0307 	orr.w	r3, r3, #7
 8003a4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	609a      	str	r2, [r3, #8]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr

08003a5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b087      	sub	sp, #28
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	021a      	lsls	r2, r3, #8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	609a      	str	r2, [r3, #8]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f003 031f 	and.w	r3, r3, #31
 8003aae:	2201      	movs	r2, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a1a      	ldr	r2, [r3, #32]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	401a      	ands	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a1a      	ldr	r2, [r3, #32]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	621a      	str	r2, [r3, #32]
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e046      	b.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a16      	ldr	r2, [pc, #88]	@ (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b48:	d009      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a12      	ldr	r2, [pc, #72]	@ (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a10      	ldr	r2, [pc, #64]	@ (8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d10c      	bne.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr
 8003b94:	40012c00 	.word	0x40012c00
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800

08003ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e042      	b.n	8003c38 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fe f882 	bl	8001cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2224      	movs	r2, #36	@ 0x24
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 fe4f 	bl	8004888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08a      	sub	sp, #40	@ 0x28
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d175      	bne.n	8003d4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_UART_Transmit+0x2c>
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e06e      	b.n	8003d4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2221      	movs	r2, #33	@ 0x21
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c7e:	f7fe f9f1 	bl	8002064 <HAL_GetTick>
 8003c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	88fa      	ldrh	r2, [r7, #6]
 8003c88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	88fa      	ldrh	r2, [r7, #6]
 8003c8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c98:	d108      	bne.n	8003cac <HAL_UART_Transmit+0x6c>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e003      	b.n	8003cb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cb4:	e02e      	b.n	8003d14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2180      	movs	r1, #128	@ 0x80
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fbb4 	bl	800442e <UART_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e03a      	b.n	8003d4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	e007      	b.n	8003d06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	3301      	adds	r3, #1
 8003d04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1cb      	bne.n	8003cb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2200      	movs	r2, #0
 8003d26:	2140      	movs	r1, #64	@ 0x40
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fb80 	bl	800442e <UART_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e006      	b.n	8003d4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e000      	b.n	8003d4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b08a      	sub	sp, #40	@ 0x28
 8003d5a:	af02      	add	r7, sp, #8
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	4613      	mov	r3, r2
 8003d64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	f040 8081 	bne.w	8003e7a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_UART_Receive+0x2e>
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e079      	b.n	8003e7c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2222      	movs	r2, #34	@ 0x22
 8003d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d9c:	f7fe f962 	bl	8002064 <HAL_GetTick>
 8003da0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	88fa      	ldrh	r2, [r7, #6]
 8003da6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	88fa      	ldrh	r2, [r7, #6]
 8003dac:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db6:	d108      	bne.n	8003dca <HAL_UART_Receive+0x74>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	e003      	b.n	8003dd2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003dd2:	e047      	b.n	8003e64 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2120      	movs	r1, #32
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 fb25 	bl	800442e <UART_WaitOnFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e042      	b.n	8003e7c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10c      	bne.n	8003e16 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	3302      	adds	r3, #2
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	e01f      	b.n	8003e56 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e1e:	d007      	beq.n	8003e30 <HAL_UART_Receive+0xda>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <HAL_UART_Receive+0xe8>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	e008      	b.n	8003e50 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	3301      	adds	r3, #1
 8003e54:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1b2      	bne.n	8003dd4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	e000      	b.n	8003e7c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
  }
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d112      	bne.n	8003ec4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_UART_Receive_IT+0x26>
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e00b      	b.n	8003ec6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fb10 	bl	80044e0 <UART_Start_Receive_IT>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	e000      	b.n	8003ec6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b0ba      	sub	sp, #232	@ 0xe8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d009      	beq.n	8003f36 <HAL_UART_IRQHandler+0x66>
 8003f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fbec 	bl	800470c <UART_Receive_IT>
      return;
 8003f34:	e25b      	b.n	80043ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80de 	beq.w	80040fc <HAL_UART_IRQHandler+0x22c>
 8003f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d106      	bne.n	8003f5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f50:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80d1 	beq.w	80040fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_UART_IRQHandler+0xae>
 8003f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f76:	f043 0201 	orr.w	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <HAL_UART_IRQHandler+0xd2>
 8003f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9a:	f043 0202 	orr.w	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <HAL_UART_IRQHandler+0xf6>
 8003fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbe:	f043 0204 	orr.w	r2, r3, #4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d011      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x126>
 8003fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d105      	bne.n	8003fea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fee:	f043 0208 	orr.w	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 81f2 	beq.w	80043e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_UART_IRQHandler+0x14e>
 800400c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fb77 	bl	800470c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <HAL_UART_IRQHandler+0x17a>
 8004042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d04f      	beq.n	80040ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fa81 	bl	8004552 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d041      	beq.n	80040e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3314      	adds	r3, #20
 8004064:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004074:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800407c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3314      	adds	r3, #20
 8004086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800408a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800408e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80040a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1d9      	bne.n	800405e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d013      	beq.n	80040da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b6:	4a7e      	ldr	r2, [pc, #504]	@ (80042b0 <HAL_UART_IRQHandler+0x3e0>)
 80040b8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe f946 	bl	8002350 <HAL_DMA_Abort_IT>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040d4:	4610      	mov	r0, r2
 80040d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d8:	e00e      	b.n	80040f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f993 	bl	8004406 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e00a      	b.n	80040f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f98f 	bl	8004406 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	e006      	b.n	80040f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f98b 	bl	8004406 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040f6:	e175      	b.n	80043e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	bf00      	nop
    return;
 80040fa:	e173      	b.n	80043e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004100:	2b01      	cmp	r3, #1
 8004102:	f040 814f 	bne.w	80043a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 8148 	beq.w	80043a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 8141 	beq.w	80043a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 80b6 	beq.w	80042b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004154:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8145 	beq.w	80043e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004166:	429a      	cmp	r2, r3
 8004168:	f080 813e 	bcs.w	80043e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004172:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b20      	cmp	r3, #32
 800417c:	f000 8088 	beq.w	8004290 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	330c      	adds	r3, #12
 8004186:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800418e:	e853 3f00 	ldrex	r3, [r3]
 8004192:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004196:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800419a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800419e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80041ac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1d9      	bne.n	8004180 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3314      	adds	r3, #20
 80041d2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3314      	adds	r3, #20
 80041ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041f0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004202:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e1      	bne.n	80041cc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3314      	adds	r3, #20
 800420e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004218:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800421a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800421e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3314      	adds	r3, #20
 8004228:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800422c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800422e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004232:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800423a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e3      	bne.n	8004208 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800425e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004260:	f023 0310 	bic.w	r3, r3, #16
 8004264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004272:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004274:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004278:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e3      	bne.n	800424e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe f825 	bl	80022da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800429e:	b29b      	uxth	r3, r3
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	4619      	mov	r1, r3
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8b6 	bl	8004418 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042ac:	e09c      	b.n	80043e8 <HAL_UART_IRQHandler+0x518>
 80042ae:	bf00      	nop
 80042b0:	08004617 	.word	0x08004617
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042bc:	b29b      	uxth	r3, r3
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 808e 	beq.w	80043ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8089 	beq.w	80043ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	330c      	adds	r3, #12
 80042e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	330c      	adds	r3, #12
 80042fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004300:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004304:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800430c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e3      	bne.n	80042da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3314      	adds	r3, #20
 8004318:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	623b      	str	r3, [r7, #32]
   return(result);
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004336:	633a      	str	r2, [r7, #48]	@ 0x30
 8004338:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800433c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e3      	bne.n	8004312 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	60fb      	str	r3, [r7, #12]
   return(result);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0310 	bic.w	r3, r3, #16
 800436e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800437c:	61fa      	str	r2, [r7, #28]
 800437e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	69b9      	ldr	r1, [r7, #24]
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	617b      	str	r3, [r7, #20]
   return(result);
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e3      	bne.n	8004358 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004396:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800439a:	4619      	mov	r1, r3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f83b 	bl	8004418 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043a2:	e023      	b.n	80043ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d009      	beq.n	80043c4 <HAL_UART_IRQHandler+0x4f4>
 80043b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f93e 	bl	800463e <UART_Transmit_IT>
    return;
 80043c2:	e014      	b.n	80043ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00e      	beq.n	80043ee <HAL_UART_IRQHandler+0x51e>
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f97d 	bl	80046dc <UART_EndTransmit_IT>
    return;
 80043e2:	e004      	b.n	80043ee <HAL_UART_IRQHandler+0x51e>
    return;
 80043e4:	bf00      	nop
 80043e6:	e002      	b.n	80043ee <HAL_UART_IRQHandler+0x51e>
      return;
 80043e8:	bf00      	nop
 80043ea:	e000      	b.n	80043ee <HAL_UART_IRQHandler+0x51e>
      return;
 80043ec:	bf00      	nop
  }
}
 80043ee:	37e8      	adds	r7, #232	@ 0xe8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr

08004406 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr

0800442e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	4613      	mov	r3, r2
 800443c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443e:	e03b      	b.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d037      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004448:	f7fd fe0c 	bl	8002064 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	6a3a      	ldr	r2, [r7, #32]
 8004454:	429a      	cmp	r2, r3
 8004456:	d302      	bcc.n	800445e <UART_WaitOnFlagUntilTimeout+0x30>
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e03a      	b.n	80044d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d023      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b80      	cmp	r3, #128	@ 0x80
 8004474:	d020      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b40      	cmp	r3, #64	@ 0x40
 800447a:	d01d      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b08      	cmp	r3, #8
 8004488:	d116      	bne.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f856 	bl	8004552 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2208      	movs	r2, #8
 80044aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e00f      	b.n	80044d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4013      	ands	r3, r2
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d0b4      	beq.n	8004440 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	4613      	mov	r3, r2
 80044ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	88fa      	ldrh	r2, [r7, #6]
 80044f8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	88fa      	ldrh	r2, [r7, #6]
 80044fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2222      	movs	r2, #34	@ 0x22
 800450a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004524:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 0201 	orr.w	r2, r2, #1
 8004534:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0220 	orr.w	r2, r2, #32
 8004544:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr

08004552 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004552:	b480      	push	{r7}
 8004554:	b095      	sub	sp, #84	@ 0x54
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330c      	adds	r3, #12
 8004560:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004570:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	330c      	adds	r3, #12
 8004578:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800457a:	643a      	str	r2, [r7, #64]	@ 0x40
 800457c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004580:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e5      	bne.n	800455a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3314      	adds	r3, #20
 8004594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	61fb      	str	r3, [r7, #28]
   return(result);
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3314      	adds	r3, #20
 80045ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e5      	bne.n	800458e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d119      	bne.n	80045fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f023 0310 	bic.w	r3, r3, #16
 80045e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	330c      	adds	r3, #12
 80045e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045ea:	61ba      	str	r2, [r7, #24]
 80045ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6979      	ldr	r1, [r7, #20]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	613b      	str	r3, [r7, #16]
   return(result);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e5      	bne.n	80045ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800460c:	bf00      	nop
 800460e:	3754      	adds	r7, #84	@ 0x54
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr

08004616 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f7ff fee8 	bl	8004406 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004636:	bf00      	nop
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800463e:	b480      	push	{r7}
 8004640:	b085      	sub	sp, #20
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b21      	cmp	r3, #33	@ 0x21
 8004650:	d13e      	bne.n	80046d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800465a:	d114      	bne.n	8004686 <UART_Transmit_IT+0x48>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d110      	bne.n	8004686 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004678:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	1c9a      	adds	r2, r3, #2
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	621a      	str	r2, [r3, #32]
 8004684:	e008      	b.n	8004698 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	1c59      	adds	r1, r3, #1
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6211      	str	r1, [r2, #32]
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4619      	mov	r1, r3
 80046a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10f      	bne.n	80046cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e000      	b.n	80046d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff fe79 	bl	80043f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08c      	sub	sp, #48	@ 0x30
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b22      	cmp	r3, #34	@ 0x22
 800471e:	f040 80ae 	bne.w	800487e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800472a:	d117      	bne.n	800475c <UART_Receive_IT+0x50>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d113      	bne.n	800475c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004734:	2300      	movs	r3, #0
 8004736:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474a:	b29a      	uxth	r2, r3
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	1c9a      	adds	r2, r3, #2
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	629a      	str	r2, [r3, #40]	@ 0x28
 800475a:	e026      	b.n	80047aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004762:	2300      	movs	r3, #0
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800476e:	d007      	beq.n	8004780 <UART_Receive_IT+0x74>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10a      	bne.n	800478e <UART_Receive_IT+0x82>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d106      	bne.n	800478e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	b2da      	uxtb	r2, r3
 8004788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e008      	b.n	80047a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800479a:	b2da      	uxtb	r2, r3
 800479c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	4619      	mov	r1, r3
 80047b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d15d      	bne.n	800487a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0220 	bic.w	r2, r2, #32
 80047cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695a      	ldr	r2, [r3, #20]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004800:	2b01      	cmp	r3, #1
 8004802:	d135      	bne.n	8004870 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	330c      	adds	r3, #12
 8004810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	613b      	str	r3, [r7, #16]
   return(result);
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f023 0310 	bic.w	r3, r3, #16
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	330c      	adds	r3, #12
 8004828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800482a:	623a      	str	r2, [r7, #32]
 800482c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	69f9      	ldr	r1, [r7, #28]
 8004830:	6a3a      	ldr	r2, [r7, #32]
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	61bb      	str	r3, [r7, #24]
   return(result);
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e5      	bne.n	800480a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b10      	cmp	r3, #16
 800484a:	d10a      	bne.n	8004862 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff fdd5 	bl	8004418 <HAL_UARTEx_RxEventCallback>
 800486e:	e002      	b.n	8004876 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7fc febf 	bl	80015f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	e002      	b.n	8004880 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	e000      	b.n	8004880 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800487e:	2302      	movs	r3, #2
  }
}
 8004880:	4618      	mov	r0, r3
 8004882:	3730      	adds	r7, #48	@ 0x30
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80048c2:	f023 030c 	bic.w	r3, r3, #12
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	68b9      	ldr	r1, [r7, #8]
 80048cc:	430b      	orrs	r3, r1
 80048ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2c      	ldr	r2, [pc, #176]	@ (800499c <UART_SetConfig+0x114>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d103      	bne.n	80048f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048f0:	f7fe fb42 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	e002      	b.n	80048fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048f8:	f7fe fb2a 	bl	8002f50 <HAL_RCC_GetPCLK1Freq>
 80048fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	009a      	lsls	r2, r3, #2
 8004908:	441a      	add	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	4a22      	ldr	r2, [pc, #136]	@ (80049a0 <UART_SetConfig+0x118>)
 8004916:	fba2 2303 	umull	r2, r3, r2, r3
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	0119      	lsls	r1, r3, #4
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	009a      	lsls	r2, r3, #2
 8004928:	441a      	add	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	fbb2 f2f3 	udiv	r2, r2, r3
 8004934:	4b1a      	ldr	r3, [pc, #104]	@ (80049a0 <UART_SetConfig+0x118>)
 8004936:	fba3 0302 	umull	r0, r3, r3, r2
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	2064      	movs	r0, #100	@ 0x64
 800493e:	fb00 f303 	mul.w	r3, r0, r3
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	3332      	adds	r3, #50	@ 0x32
 8004948:	4a15      	ldr	r2, [pc, #84]	@ (80049a0 <UART_SetConfig+0x118>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004954:	4419      	add	r1, r3
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	009a      	lsls	r2, r3, #2
 8004960:	441a      	add	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	fbb2 f2f3 	udiv	r2, r2, r3
 800496c:	4b0c      	ldr	r3, [pc, #48]	@ (80049a0 <UART_SetConfig+0x118>)
 800496e:	fba3 0302 	umull	r0, r3, r3, r2
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2064      	movs	r0, #100	@ 0x64
 8004976:	fb00 f303 	mul.w	r3, r0, r3
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	3332      	adds	r3, #50	@ 0x32
 8004980:	4a07      	ldr	r2, [pc, #28]	@ (80049a0 <UART_SetConfig+0x118>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	f003 020f 	and.w	r2, r3, #15
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	440a      	add	r2, r1
 8004992:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40013800 	.word	0x40013800
 80049a0:	51eb851f 	.word	0x51eb851f

080049a4 <atoi>:
 80049a4:	220a      	movs	r2, #10
 80049a6:	2100      	movs	r1, #0
 80049a8:	f000 becc 	b.w	8005744 <strtol>

080049ac <sulp>:
 80049ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b0:	460f      	mov	r7, r1
 80049b2:	4690      	mov	r8, r2
 80049b4:	f002 f8ac 	bl	8006b10 <__ulp>
 80049b8:	4604      	mov	r4, r0
 80049ba:	460d      	mov	r5, r1
 80049bc:	f1b8 0f00 	cmp.w	r8, #0
 80049c0:	d011      	beq.n	80049e6 <sulp+0x3a>
 80049c2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80049c6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	dd0b      	ble.n	80049e6 <sulp+0x3a>
 80049ce:	2400      	movs	r4, #0
 80049d0:	051b      	lsls	r3, r3, #20
 80049d2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80049d6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80049da:	4622      	mov	r2, r4
 80049dc:	462b      	mov	r3, r5
 80049de:	f7fb fd85 	bl	80004ec <__aeabi_dmul>
 80049e2:	4604      	mov	r4, r0
 80049e4:	460d      	mov	r5, r1
 80049e6:	4620      	mov	r0, r4
 80049e8:	4629      	mov	r1, r5
 80049ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080049f0 <_strtod_l>:
 80049f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f4:	b09f      	sub	sp, #124	@ 0x7c
 80049f6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80049f8:	2200      	movs	r2, #0
 80049fa:	460c      	mov	r4, r1
 80049fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80049fe:	f04f 0a00 	mov.w	sl, #0
 8004a02:	f04f 0b00 	mov.w	fp, #0
 8004a06:	460a      	mov	r2, r1
 8004a08:	9005      	str	r0, [sp, #20]
 8004a0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8004a0c:	7811      	ldrb	r1, [r2, #0]
 8004a0e:	292b      	cmp	r1, #43	@ 0x2b
 8004a10:	d048      	beq.n	8004aa4 <_strtod_l+0xb4>
 8004a12:	d836      	bhi.n	8004a82 <_strtod_l+0x92>
 8004a14:	290d      	cmp	r1, #13
 8004a16:	d830      	bhi.n	8004a7a <_strtod_l+0x8a>
 8004a18:	2908      	cmp	r1, #8
 8004a1a:	d830      	bhi.n	8004a7e <_strtod_l+0x8e>
 8004a1c:	2900      	cmp	r1, #0
 8004a1e:	d039      	beq.n	8004a94 <_strtod_l+0xa4>
 8004a20:	2200      	movs	r2, #0
 8004a22:	920e      	str	r2, [sp, #56]	@ 0x38
 8004a24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004a26:	782a      	ldrb	r2, [r5, #0]
 8004a28:	2a30      	cmp	r2, #48	@ 0x30
 8004a2a:	f040 80b0 	bne.w	8004b8e <_strtod_l+0x19e>
 8004a2e:	786a      	ldrb	r2, [r5, #1]
 8004a30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004a34:	2a58      	cmp	r2, #88	@ 0x58
 8004a36:	d16c      	bne.n	8004b12 <_strtod_l+0x122>
 8004a38:	9302      	str	r3, [sp, #8]
 8004a3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a3c:	4a8f      	ldr	r2, [pc, #572]	@ (8004c7c <_strtod_l+0x28c>)
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	ab1a      	add	r3, sp, #104	@ 0x68
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	9805      	ldr	r0, [sp, #20]
 8004a46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004a48:	a919      	add	r1, sp, #100	@ 0x64
 8004a4a:	f001 f95b 	bl	8005d04 <__gethex>
 8004a4e:	f010 060f 	ands.w	r6, r0, #15
 8004a52:	4604      	mov	r4, r0
 8004a54:	d005      	beq.n	8004a62 <_strtod_l+0x72>
 8004a56:	2e06      	cmp	r6, #6
 8004a58:	d126      	bne.n	8004aa8 <_strtod_l+0xb8>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	3501      	adds	r5, #1
 8004a5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8004a60:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f040 8582 	bne.w	800556e <_strtod_l+0xb7e>
 8004a6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a6c:	b1bb      	cbz	r3, 8004a9e <_strtod_l+0xae>
 8004a6e:	4650      	mov	r0, sl
 8004a70:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8004a74:	b01f      	add	sp, #124	@ 0x7c
 8004a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7a:	2920      	cmp	r1, #32
 8004a7c:	d1d0      	bne.n	8004a20 <_strtod_l+0x30>
 8004a7e:	3201      	adds	r2, #1
 8004a80:	e7c3      	b.n	8004a0a <_strtod_l+0x1a>
 8004a82:	292d      	cmp	r1, #45	@ 0x2d
 8004a84:	d1cc      	bne.n	8004a20 <_strtod_l+0x30>
 8004a86:	2101      	movs	r1, #1
 8004a88:	910e      	str	r1, [sp, #56]	@ 0x38
 8004a8a:	1c51      	adds	r1, r2, #1
 8004a8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8004a8e:	7852      	ldrb	r2, [r2, #1]
 8004a90:	2a00      	cmp	r2, #0
 8004a92:	d1c7      	bne.n	8004a24 <_strtod_l+0x34>
 8004a94:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004a96:	9419      	str	r4, [sp, #100]	@ 0x64
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f040 8566 	bne.w	800556a <_strtod_l+0xb7a>
 8004a9e:	4650      	mov	r0, sl
 8004aa0:	4659      	mov	r1, fp
 8004aa2:	e7e7      	b.n	8004a74 <_strtod_l+0x84>
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	e7ef      	b.n	8004a88 <_strtod_l+0x98>
 8004aa8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004aaa:	b13a      	cbz	r2, 8004abc <_strtod_l+0xcc>
 8004aac:	2135      	movs	r1, #53	@ 0x35
 8004aae:	a81c      	add	r0, sp, #112	@ 0x70
 8004ab0:	f002 f91e 	bl	8006cf0 <__copybits>
 8004ab4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004ab6:	9805      	ldr	r0, [sp, #20]
 8004ab8:	f001 fcfe 	bl	80064b8 <_Bfree>
 8004abc:	3e01      	subs	r6, #1
 8004abe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004ac0:	2e04      	cmp	r6, #4
 8004ac2:	d806      	bhi.n	8004ad2 <_strtod_l+0xe2>
 8004ac4:	e8df f006 	tbb	[pc, r6]
 8004ac8:	201d0314 	.word	0x201d0314
 8004acc:	14          	.byte	0x14
 8004acd:	00          	.byte	0x00
 8004ace:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004ad2:	05e1      	lsls	r1, r4, #23
 8004ad4:	bf48      	it	mi
 8004ad6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004ada:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004ade:	0d1b      	lsrs	r3, r3, #20
 8004ae0:	051b      	lsls	r3, r3, #20
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1bd      	bne.n	8004a62 <_strtod_l+0x72>
 8004ae6:	f000 fff9 	bl	8005adc <__errno>
 8004aea:	2322      	movs	r3, #34	@ 0x22
 8004aec:	6003      	str	r3, [r0, #0]
 8004aee:	e7b8      	b.n	8004a62 <_strtod_l+0x72>
 8004af0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004af4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004af8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004afc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004b00:	e7e7      	b.n	8004ad2 <_strtod_l+0xe2>
 8004b02:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8004c80 <_strtod_l+0x290>
 8004b06:	e7e4      	b.n	8004ad2 <_strtod_l+0xe2>
 8004b08:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004b0c:	f04f 3aff 	mov.w	sl, #4294967295
 8004b10:	e7df      	b.n	8004ad2 <_strtod_l+0xe2>
 8004b12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	9219      	str	r2, [sp, #100]	@ 0x64
 8004b18:	785b      	ldrb	r3, [r3, #1]
 8004b1a:	2b30      	cmp	r3, #48	@ 0x30
 8004b1c:	d0f9      	beq.n	8004b12 <_strtod_l+0x122>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d09f      	beq.n	8004a62 <_strtod_l+0x72>
 8004b22:	2301      	movs	r3, #1
 8004b24:	2700      	movs	r7, #0
 8004b26:	220a      	movs	r2, #10
 8004b28:	46b9      	mov	r9, r7
 8004b2a:	9308      	str	r3, [sp, #32]
 8004b2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b2e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8004b30:	930c      	str	r3, [sp, #48]	@ 0x30
 8004b32:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004b34:	7805      	ldrb	r5, [r0, #0]
 8004b36:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004b3a:	b2d9      	uxtb	r1, r3
 8004b3c:	2909      	cmp	r1, #9
 8004b3e:	d928      	bls.n	8004b92 <_strtod_l+0x1a2>
 8004b40:	2201      	movs	r2, #1
 8004b42:	4950      	ldr	r1, [pc, #320]	@ (8004c84 <_strtod_l+0x294>)
 8004b44:	f000 ff15 	bl	8005972 <strncmp>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d032      	beq.n	8004bb2 <_strtod_l+0x1c2>
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	462a      	mov	r2, r5
 8004b50:	4603      	mov	r3, r0
 8004b52:	464d      	mov	r5, r9
 8004b54:	900a      	str	r0, [sp, #40]	@ 0x28
 8004b56:	2a65      	cmp	r2, #101	@ 0x65
 8004b58:	d001      	beq.n	8004b5e <_strtod_l+0x16e>
 8004b5a:	2a45      	cmp	r2, #69	@ 0x45
 8004b5c:	d114      	bne.n	8004b88 <_strtod_l+0x198>
 8004b5e:	b91d      	cbnz	r5, 8004b68 <_strtod_l+0x178>
 8004b60:	9a08      	ldr	r2, [sp, #32]
 8004b62:	4302      	orrs	r2, r0
 8004b64:	d096      	beq.n	8004a94 <_strtod_l+0xa4>
 8004b66:	2500      	movs	r5, #0
 8004b68:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004b6a:	1c62      	adds	r2, r4, #1
 8004b6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8004b6e:	7862      	ldrb	r2, [r4, #1]
 8004b70:	2a2b      	cmp	r2, #43	@ 0x2b
 8004b72:	d07a      	beq.n	8004c6a <_strtod_l+0x27a>
 8004b74:	2a2d      	cmp	r2, #45	@ 0x2d
 8004b76:	d07e      	beq.n	8004c76 <_strtod_l+0x286>
 8004b78:	f04f 0c00 	mov.w	ip, #0
 8004b7c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004b80:	2909      	cmp	r1, #9
 8004b82:	f240 8085 	bls.w	8004c90 <_strtod_l+0x2a0>
 8004b86:	9419      	str	r4, [sp, #100]	@ 0x64
 8004b88:	f04f 0800 	mov.w	r8, #0
 8004b8c:	e0a5      	b.n	8004cda <_strtod_l+0x2ea>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e7c8      	b.n	8004b24 <_strtod_l+0x134>
 8004b92:	f1b9 0f08 	cmp.w	r9, #8
 8004b96:	bfd8      	it	le
 8004b98:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8004b9a:	f100 0001 	add.w	r0, r0, #1
 8004b9e:	bfd6      	itet	le
 8004ba0:	fb02 3301 	mlale	r3, r2, r1, r3
 8004ba4:	fb02 3707 	mlagt	r7, r2, r7, r3
 8004ba8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8004baa:	f109 0901 	add.w	r9, r9, #1
 8004bae:	9019      	str	r0, [sp, #100]	@ 0x64
 8004bb0:	e7bf      	b.n	8004b32 <_strtod_l+0x142>
 8004bb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	9219      	str	r2, [sp, #100]	@ 0x64
 8004bb8:	785a      	ldrb	r2, [r3, #1]
 8004bba:	f1b9 0f00 	cmp.w	r9, #0
 8004bbe:	d03b      	beq.n	8004c38 <_strtod_l+0x248>
 8004bc0:	464d      	mov	r5, r9
 8004bc2:	900a      	str	r0, [sp, #40]	@ 0x28
 8004bc4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004bc8:	2b09      	cmp	r3, #9
 8004bca:	d912      	bls.n	8004bf2 <_strtod_l+0x202>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e7c2      	b.n	8004b56 <_strtod_l+0x166>
 8004bd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8004bd8:	785a      	ldrb	r2, [r3, #1]
 8004bda:	2a30      	cmp	r2, #48	@ 0x30
 8004bdc:	d0f8      	beq.n	8004bd0 <_strtod_l+0x1e0>
 8004bde:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	f200 84c8 	bhi.w	8005578 <_strtod_l+0xb88>
 8004be8:	900a      	str	r0, [sp, #40]	@ 0x28
 8004bea:	2000      	movs	r0, #0
 8004bec:	4605      	mov	r5, r0
 8004bee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004bf0:	930c      	str	r3, [sp, #48]	@ 0x30
 8004bf2:	3a30      	subs	r2, #48	@ 0x30
 8004bf4:	f100 0301 	add.w	r3, r0, #1
 8004bf8:	d018      	beq.n	8004c2c <_strtod_l+0x23c>
 8004bfa:	462e      	mov	r6, r5
 8004bfc:	f04f 0e0a 	mov.w	lr, #10
 8004c00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c02:	4419      	add	r1, r3
 8004c04:	910a      	str	r1, [sp, #40]	@ 0x28
 8004c06:	1c71      	adds	r1, r6, #1
 8004c08:	eba1 0c05 	sub.w	ip, r1, r5
 8004c0c:	4563      	cmp	r3, ip
 8004c0e:	dc15      	bgt.n	8004c3c <_strtod_l+0x24c>
 8004c10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004c14:	182b      	adds	r3, r5, r0
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	f105 0501 	add.w	r5, r5, #1
 8004c1c:	4405      	add	r5, r0
 8004c1e:	dc1a      	bgt.n	8004c56 <_strtod_l+0x266>
 8004c20:	230a      	movs	r3, #10
 8004c22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c24:	fb03 2301 	mla	r3, r3, r1, r2
 8004c28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004c2e:	4618      	mov	r0, r3
 8004c30:	1c51      	adds	r1, r2, #1
 8004c32:	9119      	str	r1, [sp, #100]	@ 0x64
 8004c34:	7852      	ldrb	r2, [r2, #1]
 8004c36:	e7c5      	b.n	8004bc4 <_strtod_l+0x1d4>
 8004c38:	4648      	mov	r0, r9
 8004c3a:	e7ce      	b.n	8004bda <_strtod_l+0x1ea>
 8004c3c:	2e08      	cmp	r6, #8
 8004c3e:	dc05      	bgt.n	8004c4c <_strtod_l+0x25c>
 8004c40:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004c42:	fb0e f606 	mul.w	r6, lr, r6
 8004c46:	960b      	str	r6, [sp, #44]	@ 0x2c
 8004c48:	460e      	mov	r6, r1
 8004c4a:	e7dc      	b.n	8004c06 <_strtod_l+0x216>
 8004c4c:	2910      	cmp	r1, #16
 8004c4e:	bfd8      	it	le
 8004c50:	fb0e f707 	mulle.w	r7, lr, r7
 8004c54:	e7f8      	b.n	8004c48 <_strtod_l+0x258>
 8004c56:	2b0f      	cmp	r3, #15
 8004c58:	bfdc      	itt	le
 8004c5a:	230a      	movle	r3, #10
 8004c5c:	fb03 2707 	mlale	r7, r3, r7, r2
 8004c60:	e7e3      	b.n	8004c2a <_strtod_l+0x23a>
 8004c62:	2300      	movs	r3, #0
 8004c64:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c66:	2301      	movs	r3, #1
 8004c68:	e77a      	b.n	8004b60 <_strtod_l+0x170>
 8004c6a:	f04f 0c00 	mov.w	ip, #0
 8004c6e:	1ca2      	adds	r2, r4, #2
 8004c70:	9219      	str	r2, [sp, #100]	@ 0x64
 8004c72:	78a2      	ldrb	r2, [r4, #2]
 8004c74:	e782      	b.n	8004b7c <_strtod_l+0x18c>
 8004c76:	f04f 0c01 	mov.w	ip, #1
 8004c7a:	e7f8      	b.n	8004c6e <_strtod_l+0x27e>
 8004c7c:	08007a6c 	.word	0x08007a6c
 8004c80:	7ff00000 	.word	0x7ff00000
 8004c84:	08007896 	.word	0x08007896
 8004c88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004c8a:	1c51      	adds	r1, r2, #1
 8004c8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8004c8e:	7852      	ldrb	r2, [r2, #1]
 8004c90:	2a30      	cmp	r2, #48	@ 0x30
 8004c92:	d0f9      	beq.n	8004c88 <_strtod_l+0x298>
 8004c94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004c98:	2908      	cmp	r1, #8
 8004c9a:	f63f af75 	bhi.w	8004b88 <_strtod_l+0x198>
 8004c9e:	f04f 080a 	mov.w	r8, #10
 8004ca2:	3a30      	subs	r2, #48	@ 0x30
 8004ca4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ca6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004ca8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004caa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004cac:	1c56      	adds	r6, r2, #1
 8004cae:	9619      	str	r6, [sp, #100]	@ 0x64
 8004cb0:	7852      	ldrb	r2, [r2, #1]
 8004cb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004cb6:	f1be 0f09 	cmp.w	lr, #9
 8004cba:	d939      	bls.n	8004d30 <_strtod_l+0x340>
 8004cbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004cbe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004cc2:	1a76      	subs	r6, r6, r1
 8004cc4:	2e08      	cmp	r6, #8
 8004cc6:	dc03      	bgt.n	8004cd0 <_strtod_l+0x2e0>
 8004cc8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004cca:	4588      	cmp	r8, r1
 8004ccc:	bfa8      	it	ge
 8004cce:	4688      	movge	r8, r1
 8004cd0:	f1bc 0f00 	cmp.w	ip, #0
 8004cd4:	d001      	beq.n	8004cda <_strtod_l+0x2ea>
 8004cd6:	f1c8 0800 	rsb	r8, r8, #0
 8004cda:	2d00      	cmp	r5, #0
 8004cdc:	d14e      	bne.n	8004d7c <_strtod_l+0x38c>
 8004cde:	9908      	ldr	r1, [sp, #32]
 8004ce0:	4308      	orrs	r0, r1
 8004ce2:	f47f aebe 	bne.w	8004a62 <_strtod_l+0x72>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f47f aed4 	bne.w	8004a94 <_strtod_l+0xa4>
 8004cec:	2a69      	cmp	r2, #105	@ 0x69
 8004cee:	d028      	beq.n	8004d42 <_strtod_l+0x352>
 8004cf0:	dc25      	bgt.n	8004d3e <_strtod_l+0x34e>
 8004cf2:	2a49      	cmp	r2, #73	@ 0x49
 8004cf4:	d025      	beq.n	8004d42 <_strtod_l+0x352>
 8004cf6:	2a4e      	cmp	r2, #78	@ 0x4e
 8004cf8:	f47f aecc 	bne.w	8004a94 <_strtod_l+0xa4>
 8004cfc:	4999      	ldr	r1, [pc, #612]	@ (8004f64 <_strtod_l+0x574>)
 8004cfe:	a819      	add	r0, sp, #100	@ 0x64
 8004d00:	f001 fa22 	bl	8006148 <__match>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	f43f aec5 	beq.w	8004a94 <_strtod_l+0xa4>
 8004d0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b28      	cmp	r3, #40	@ 0x28
 8004d10:	d12e      	bne.n	8004d70 <_strtod_l+0x380>
 8004d12:	4995      	ldr	r1, [pc, #596]	@ (8004f68 <_strtod_l+0x578>)
 8004d14:	aa1c      	add	r2, sp, #112	@ 0x70
 8004d16:	a819      	add	r0, sp, #100	@ 0x64
 8004d18:	f001 fa2a 	bl	8006170 <__hexnan>
 8004d1c:	2805      	cmp	r0, #5
 8004d1e:	d127      	bne.n	8004d70 <_strtod_l+0x380>
 8004d20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004d22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8004d26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004d2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004d2e:	e698      	b.n	8004a62 <_strtod_l+0x72>
 8004d30:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d32:	fb08 2101 	mla	r1, r8, r1, r2
 8004d36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004d3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d3c:	e7b5      	b.n	8004caa <_strtod_l+0x2ba>
 8004d3e:	2a6e      	cmp	r2, #110	@ 0x6e
 8004d40:	e7da      	b.n	8004cf8 <_strtod_l+0x308>
 8004d42:	498a      	ldr	r1, [pc, #552]	@ (8004f6c <_strtod_l+0x57c>)
 8004d44:	a819      	add	r0, sp, #100	@ 0x64
 8004d46:	f001 f9ff 	bl	8006148 <__match>
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	f43f aea2 	beq.w	8004a94 <_strtod_l+0xa4>
 8004d50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004d52:	4987      	ldr	r1, [pc, #540]	@ (8004f70 <_strtod_l+0x580>)
 8004d54:	3b01      	subs	r3, #1
 8004d56:	a819      	add	r0, sp, #100	@ 0x64
 8004d58:	9319      	str	r3, [sp, #100]	@ 0x64
 8004d5a:	f001 f9f5 	bl	8006148 <__match>
 8004d5e:	b910      	cbnz	r0, 8004d66 <_strtod_l+0x376>
 8004d60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004d62:	3301      	adds	r3, #1
 8004d64:	9319      	str	r3, [sp, #100]	@ 0x64
 8004d66:	f04f 0a00 	mov.w	sl, #0
 8004d6a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8004f74 <_strtod_l+0x584>
 8004d6e:	e678      	b.n	8004a62 <_strtod_l+0x72>
 8004d70:	4881      	ldr	r0, [pc, #516]	@ (8004f78 <_strtod_l+0x588>)
 8004d72:	f000 feef 	bl	8005b54 <nan>
 8004d76:	4682      	mov	sl, r0
 8004d78:	468b      	mov	fp, r1
 8004d7a:	e672      	b.n	8004a62 <_strtod_l+0x72>
 8004d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d7e:	f1b9 0f00 	cmp.w	r9, #0
 8004d82:	bf08      	it	eq
 8004d84:	46a9      	moveq	r9, r5
 8004d86:	eba8 0303 	sub.w	r3, r8, r3
 8004d8a:	2d10      	cmp	r5, #16
 8004d8c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004d8e:	462c      	mov	r4, r5
 8004d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d92:	bfa8      	it	ge
 8004d94:	2410      	movge	r4, #16
 8004d96:	f7fb fb2f 	bl	80003f8 <__aeabi_ui2d>
 8004d9a:	2d09      	cmp	r5, #9
 8004d9c:	4682      	mov	sl, r0
 8004d9e:	468b      	mov	fp, r1
 8004da0:	dc11      	bgt.n	8004dc6 <_strtod_l+0x3d6>
 8004da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f43f ae5c 	beq.w	8004a62 <_strtod_l+0x72>
 8004daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dac:	dd76      	ble.n	8004e9c <_strtod_l+0x4ac>
 8004dae:	2b16      	cmp	r3, #22
 8004db0:	dc5d      	bgt.n	8004e6e <_strtod_l+0x47e>
 8004db2:	4972      	ldr	r1, [pc, #456]	@ (8004f7c <_strtod_l+0x58c>)
 8004db4:	4652      	mov	r2, sl
 8004db6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004dba:	465b      	mov	r3, fp
 8004dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dc0:	f7fb fb94 	bl	80004ec <__aeabi_dmul>
 8004dc4:	e7d7      	b.n	8004d76 <_strtod_l+0x386>
 8004dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f7c <_strtod_l+0x58c>)
 8004dc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004dcc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004dd0:	f7fb fb8c 	bl	80004ec <__aeabi_dmul>
 8004dd4:	4682      	mov	sl, r0
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	468b      	mov	fp, r1
 8004dda:	f7fb fb0d 	bl	80003f8 <__aeabi_ui2d>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4650      	mov	r0, sl
 8004de4:	4659      	mov	r1, fp
 8004de6:	f7fb f9cb 	bl	8000180 <__adddf3>
 8004dea:	2d0f      	cmp	r5, #15
 8004dec:	4682      	mov	sl, r0
 8004dee:	468b      	mov	fp, r1
 8004df0:	ddd7      	ble.n	8004da2 <_strtod_l+0x3b2>
 8004df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004df4:	1b2c      	subs	r4, r5, r4
 8004df6:	441c      	add	r4, r3
 8004df8:	2c00      	cmp	r4, #0
 8004dfa:	f340 8093 	ble.w	8004f24 <_strtod_l+0x534>
 8004dfe:	f014 030f 	ands.w	r3, r4, #15
 8004e02:	d00a      	beq.n	8004e1a <_strtod_l+0x42a>
 8004e04:	495d      	ldr	r1, [pc, #372]	@ (8004f7c <_strtod_l+0x58c>)
 8004e06:	4652      	mov	r2, sl
 8004e08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e10:	465b      	mov	r3, fp
 8004e12:	f7fb fb6b 	bl	80004ec <__aeabi_dmul>
 8004e16:	4682      	mov	sl, r0
 8004e18:	468b      	mov	fp, r1
 8004e1a:	f034 040f 	bics.w	r4, r4, #15
 8004e1e:	d073      	beq.n	8004f08 <_strtod_l+0x518>
 8004e20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8004e24:	dd49      	ble.n	8004eba <_strtod_l+0x4ca>
 8004e26:	2400      	movs	r4, #0
 8004e28:	46a0      	mov	r8, r4
 8004e2a:	46a1      	mov	r9, r4
 8004e2c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004e2e:	2322      	movs	r3, #34	@ 0x22
 8004e30:	f04f 0a00 	mov.w	sl, #0
 8004e34:	9a05      	ldr	r2, [sp, #20]
 8004e36:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8004f74 <_strtod_l+0x584>
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f43f ae0f 	beq.w	8004a62 <_strtod_l+0x72>
 8004e44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004e46:	9805      	ldr	r0, [sp, #20]
 8004e48:	f001 fb36 	bl	80064b8 <_Bfree>
 8004e4c:	4649      	mov	r1, r9
 8004e4e:	9805      	ldr	r0, [sp, #20]
 8004e50:	f001 fb32 	bl	80064b8 <_Bfree>
 8004e54:	4641      	mov	r1, r8
 8004e56:	9805      	ldr	r0, [sp, #20]
 8004e58:	f001 fb2e 	bl	80064b8 <_Bfree>
 8004e5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e5e:	9805      	ldr	r0, [sp, #20]
 8004e60:	f001 fb2a 	bl	80064b8 <_Bfree>
 8004e64:	4621      	mov	r1, r4
 8004e66:	9805      	ldr	r0, [sp, #20]
 8004e68:	f001 fb26 	bl	80064b8 <_Bfree>
 8004e6c:	e5f9      	b.n	8004a62 <_strtod_l+0x72>
 8004e6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8004e74:	4293      	cmp	r3, r2
 8004e76:	dbbc      	blt.n	8004df2 <_strtod_l+0x402>
 8004e78:	4c40      	ldr	r4, [pc, #256]	@ (8004f7c <_strtod_l+0x58c>)
 8004e7a:	f1c5 050f 	rsb	r5, r5, #15
 8004e7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004e82:	4652      	mov	r2, sl
 8004e84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e88:	465b      	mov	r3, fp
 8004e8a:	f7fb fb2f 	bl	80004ec <__aeabi_dmul>
 8004e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e90:	1b5d      	subs	r5, r3, r5
 8004e92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004e96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004e9a:	e791      	b.n	8004dc0 <_strtod_l+0x3d0>
 8004e9c:	3316      	adds	r3, #22
 8004e9e:	dba8      	blt.n	8004df2 <_strtod_l+0x402>
 8004ea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ea2:	4650      	mov	r0, sl
 8004ea4:	eba3 0808 	sub.w	r8, r3, r8
 8004ea8:	4b34      	ldr	r3, [pc, #208]	@ (8004f7c <_strtod_l+0x58c>)
 8004eaa:	4659      	mov	r1, fp
 8004eac:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8004eb0:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004eb4:	f7fb fc44 	bl	8000740 <__aeabi_ddiv>
 8004eb8:	e75d      	b.n	8004d76 <_strtod_l+0x386>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	4650      	mov	r0, sl
 8004ebe:	4659      	mov	r1, fp
 8004ec0:	461e      	mov	r6, r3
 8004ec2:	4f2f      	ldr	r7, [pc, #188]	@ (8004f80 <_strtod_l+0x590>)
 8004ec4:	1124      	asrs	r4, r4, #4
 8004ec6:	2c01      	cmp	r4, #1
 8004ec8:	dc21      	bgt.n	8004f0e <_strtod_l+0x51e>
 8004eca:	b10b      	cbz	r3, 8004ed0 <_strtod_l+0x4e0>
 8004ecc:	4682      	mov	sl, r0
 8004ece:	468b      	mov	fp, r1
 8004ed0:	492b      	ldr	r1, [pc, #172]	@ (8004f80 <_strtod_l+0x590>)
 8004ed2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004ed6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004eda:	4652      	mov	r2, sl
 8004edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ee0:	465b      	mov	r3, fp
 8004ee2:	f7fb fb03 	bl	80004ec <__aeabi_dmul>
 8004ee6:	4b23      	ldr	r3, [pc, #140]	@ (8004f74 <_strtod_l+0x584>)
 8004ee8:	460a      	mov	r2, r1
 8004eea:	400b      	ands	r3, r1
 8004eec:	4925      	ldr	r1, [pc, #148]	@ (8004f84 <_strtod_l+0x594>)
 8004eee:	4682      	mov	sl, r0
 8004ef0:	428b      	cmp	r3, r1
 8004ef2:	d898      	bhi.n	8004e26 <_strtod_l+0x436>
 8004ef4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004ef8:	428b      	cmp	r3, r1
 8004efa:	bf86      	itte	hi
 8004efc:	f04f 3aff 	movhi.w	sl, #4294967295
 8004f00:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8004f88 <_strtod_l+0x598>
 8004f04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9308      	str	r3, [sp, #32]
 8004f0c:	e076      	b.n	8004ffc <_strtod_l+0x60c>
 8004f0e:	07e2      	lsls	r2, r4, #31
 8004f10:	d504      	bpl.n	8004f1c <_strtod_l+0x52c>
 8004f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f16:	f7fb fae9 	bl	80004ec <__aeabi_dmul>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	3601      	adds	r6, #1
 8004f1e:	1064      	asrs	r4, r4, #1
 8004f20:	3708      	adds	r7, #8
 8004f22:	e7d0      	b.n	8004ec6 <_strtod_l+0x4d6>
 8004f24:	d0f0      	beq.n	8004f08 <_strtod_l+0x518>
 8004f26:	4264      	negs	r4, r4
 8004f28:	f014 020f 	ands.w	r2, r4, #15
 8004f2c:	d00a      	beq.n	8004f44 <_strtod_l+0x554>
 8004f2e:	4b13      	ldr	r3, [pc, #76]	@ (8004f7c <_strtod_l+0x58c>)
 8004f30:	4650      	mov	r0, sl
 8004f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f36:	4659      	mov	r1, fp
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f7fb fc00 	bl	8000740 <__aeabi_ddiv>
 8004f40:	4682      	mov	sl, r0
 8004f42:	468b      	mov	fp, r1
 8004f44:	1124      	asrs	r4, r4, #4
 8004f46:	d0df      	beq.n	8004f08 <_strtod_l+0x518>
 8004f48:	2c1f      	cmp	r4, #31
 8004f4a:	dd1f      	ble.n	8004f8c <_strtod_l+0x59c>
 8004f4c:	2400      	movs	r4, #0
 8004f4e:	46a0      	mov	r8, r4
 8004f50:	46a1      	mov	r9, r4
 8004f52:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004f54:	2322      	movs	r3, #34	@ 0x22
 8004f56:	9a05      	ldr	r2, [sp, #20]
 8004f58:	f04f 0a00 	mov.w	sl, #0
 8004f5c:	f04f 0b00 	mov.w	fp, #0
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	e76b      	b.n	8004e3c <_strtod_l+0x44c>
 8004f64:	080078a1 	.word	0x080078a1
 8004f68:	08007a58 	.word	0x08007a58
 8004f6c:	08007898 	.word	0x08007898
 8004f70:	0800789b 	.word	0x0800789b
 8004f74:	7ff00000 	.word	0x7ff00000
 8004f78:	08007958 	.word	0x08007958
 8004f7c:	08007be0 	.word	0x08007be0
 8004f80:	08007bb8 	.word	0x08007bb8
 8004f84:	7ca00000 	.word	0x7ca00000
 8004f88:	7fefffff 	.word	0x7fefffff
 8004f8c:	f014 0310 	ands.w	r3, r4, #16
 8004f90:	bf18      	it	ne
 8004f92:	236a      	movne	r3, #106	@ 0x6a
 8004f94:	4650      	mov	r0, sl
 8004f96:	9308      	str	r3, [sp, #32]
 8004f98:	4659      	mov	r1, fp
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	4e77      	ldr	r6, [pc, #476]	@ (800517c <_strtod_l+0x78c>)
 8004f9e:	07e7      	lsls	r7, r4, #31
 8004fa0:	d504      	bpl.n	8004fac <_strtod_l+0x5bc>
 8004fa2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fa6:	f7fb faa1 	bl	80004ec <__aeabi_dmul>
 8004faa:	2301      	movs	r3, #1
 8004fac:	1064      	asrs	r4, r4, #1
 8004fae:	f106 0608 	add.w	r6, r6, #8
 8004fb2:	d1f4      	bne.n	8004f9e <_strtod_l+0x5ae>
 8004fb4:	b10b      	cbz	r3, 8004fba <_strtod_l+0x5ca>
 8004fb6:	4682      	mov	sl, r0
 8004fb8:	468b      	mov	fp, r1
 8004fba:	9b08      	ldr	r3, [sp, #32]
 8004fbc:	b1b3      	cbz	r3, 8004fec <_strtod_l+0x5fc>
 8004fbe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004fc2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	4659      	mov	r1, fp
 8004fca:	dd0f      	ble.n	8004fec <_strtod_l+0x5fc>
 8004fcc:	2b1f      	cmp	r3, #31
 8004fce:	dd58      	ble.n	8005082 <_strtod_l+0x692>
 8004fd0:	2b34      	cmp	r3, #52	@ 0x34
 8004fd2:	bfd8      	it	le
 8004fd4:	f04f 33ff 	movle.w	r3, #4294967295
 8004fd8:	f04f 0a00 	mov.w	sl, #0
 8004fdc:	bfcf      	iteee	gt
 8004fde:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004fe2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8004fe6:	4093      	lslle	r3, r2
 8004fe8:	ea03 0b01 	andle.w	fp, r3, r1
 8004fec:	2200      	movs	r2, #0
 8004fee:	2300      	movs	r3, #0
 8004ff0:	4650      	mov	r0, sl
 8004ff2:	4659      	mov	r1, fp
 8004ff4:	f7fb fce2 	bl	80009bc <__aeabi_dcmpeq>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d1a7      	bne.n	8004f4c <_strtod_l+0x55c>
 8004ffc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ffe:	464a      	mov	r2, r9
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005004:	462b      	mov	r3, r5
 8005006:	9805      	ldr	r0, [sp, #20]
 8005008:	f001 fabe 	bl	8006588 <__s2b>
 800500c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800500e:	2800      	cmp	r0, #0
 8005010:	f43f af09 	beq.w	8004e26 <_strtod_l+0x436>
 8005014:	2400      	movs	r4, #0
 8005016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800501a:	2a00      	cmp	r2, #0
 800501c:	eba3 0308 	sub.w	r3, r3, r8
 8005020:	bfa8      	it	ge
 8005022:	2300      	movge	r3, #0
 8005024:	46a0      	mov	r8, r4
 8005026:	9312      	str	r3, [sp, #72]	@ 0x48
 8005028:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800502c:	9316      	str	r3, [sp, #88]	@ 0x58
 800502e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005030:	9805      	ldr	r0, [sp, #20]
 8005032:	6859      	ldr	r1, [r3, #4]
 8005034:	f001 fa00 	bl	8006438 <_Balloc>
 8005038:	4681      	mov	r9, r0
 800503a:	2800      	cmp	r0, #0
 800503c:	f43f aef7 	beq.w	8004e2e <_strtod_l+0x43e>
 8005040:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005042:	300c      	adds	r0, #12
 8005044:	691a      	ldr	r2, [r3, #16]
 8005046:	f103 010c 	add.w	r1, r3, #12
 800504a:	3202      	adds	r2, #2
 800504c:	0092      	lsls	r2, r2, #2
 800504e:	f000 fd72 	bl	8005b36 <memcpy>
 8005052:	ab1c      	add	r3, sp, #112	@ 0x70
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	4652      	mov	r2, sl
 800505c:	465b      	mov	r3, fp
 800505e:	9805      	ldr	r0, [sp, #20]
 8005060:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005064:	f001 fdbc 	bl	8006be0 <__d2b>
 8005068:	901a      	str	r0, [sp, #104]	@ 0x68
 800506a:	2800      	cmp	r0, #0
 800506c:	f43f aedf 	beq.w	8004e2e <_strtod_l+0x43e>
 8005070:	2101      	movs	r1, #1
 8005072:	9805      	ldr	r0, [sp, #20]
 8005074:	f001 fb1e 	bl	80066b4 <__i2b>
 8005078:	4680      	mov	r8, r0
 800507a:	b948      	cbnz	r0, 8005090 <_strtod_l+0x6a0>
 800507c:	f04f 0800 	mov.w	r8, #0
 8005080:	e6d5      	b.n	8004e2e <_strtod_l+0x43e>
 8005082:	f04f 32ff 	mov.w	r2, #4294967295
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	ea03 0a0a 	and.w	sl, r3, sl
 800508e:	e7ad      	b.n	8004fec <_strtod_l+0x5fc>
 8005090:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005092:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005094:	2d00      	cmp	r5, #0
 8005096:	bfab      	itete	ge
 8005098:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800509a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800509c:	18ef      	addge	r7, r5, r3
 800509e:	1b5e      	sublt	r6, r3, r5
 80050a0:	9b08      	ldr	r3, [sp, #32]
 80050a2:	bfa8      	it	ge
 80050a4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80050a6:	eba5 0503 	sub.w	r5, r5, r3
 80050aa:	4415      	add	r5, r2
 80050ac:	4b34      	ldr	r3, [pc, #208]	@ (8005180 <_strtod_l+0x790>)
 80050ae:	f105 35ff 	add.w	r5, r5, #4294967295
 80050b2:	bfb8      	it	lt
 80050b4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80050b6:	429d      	cmp	r5, r3
 80050b8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80050bc:	da50      	bge.n	8005160 <_strtod_l+0x770>
 80050be:	1b5b      	subs	r3, r3, r5
 80050c0:	2b1f      	cmp	r3, #31
 80050c2:	f04f 0101 	mov.w	r1, #1
 80050c6:	eba2 0203 	sub.w	r2, r2, r3
 80050ca:	dc3d      	bgt.n	8005148 <_strtod_l+0x758>
 80050cc:	fa01 f303 	lsl.w	r3, r1, r3
 80050d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80050d2:	2300      	movs	r3, #0
 80050d4:	9310      	str	r3, [sp, #64]	@ 0x40
 80050d6:	18bd      	adds	r5, r7, r2
 80050d8:	9b08      	ldr	r3, [sp, #32]
 80050da:	42af      	cmp	r7, r5
 80050dc:	4416      	add	r6, r2
 80050de:	441e      	add	r6, r3
 80050e0:	463b      	mov	r3, r7
 80050e2:	bfa8      	it	ge
 80050e4:	462b      	movge	r3, r5
 80050e6:	42b3      	cmp	r3, r6
 80050e8:	bfa8      	it	ge
 80050ea:	4633      	movge	r3, r6
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bfc2      	ittt	gt
 80050f0:	1aed      	subgt	r5, r5, r3
 80050f2:	1af6      	subgt	r6, r6, r3
 80050f4:	1aff      	subgt	r7, r7, r3
 80050f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	dd16      	ble.n	800512a <_strtod_l+0x73a>
 80050fc:	4641      	mov	r1, r8
 80050fe:	461a      	mov	r2, r3
 8005100:	9805      	ldr	r0, [sp, #20]
 8005102:	f001 fb8f 	bl	8006824 <__pow5mult>
 8005106:	4680      	mov	r8, r0
 8005108:	2800      	cmp	r0, #0
 800510a:	d0b7      	beq.n	800507c <_strtod_l+0x68c>
 800510c:	4601      	mov	r1, r0
 800510e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005110:	9805      	ldr	r0, [sp, #20]
 8005112:	f001 fae5 	bl	80066e0 <__multiply>
 8005116:	900a      	str	r0, [sp, #40]	@ 0x28
 8005118:	2800      	cmp	r0, #0
 800511a:	f43f ae88 	beq.w	8004e2e <_strtod_l+0x43e>
 800511e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005120:	9805      	ldr	r0, [sp, #20]
 8005122:	f001 f9c9 	bl	80064b8 <_Bfree>
 8005126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005128:	931a      	str	r3, [sp, #104]	@ 0x68
 800512a:	2d00      	cmp	r5, #0
 800512c:	dc1d      	bgt.n	800516a <_strtod_l+0x77a>
 800512e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	dd27      	ble.n	8005184 <_strtod_l+0x794>
 8005134:	4649      	mov	r1, r9
 8005136:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005138:	9805      	ldr	r0, [sp, #20]
 800513a:	f001 fb73 	bl	8006824 <__pow5mult>
 800513e:	4681      	mov	r9, r0
 8005140:	bb00      	cbnz	r0, 8005184 <_strtod_l+0x794>
 8005142:	f04f 0900 	mov.w	r9, #0
 8005146:	e672      	b.n	8004e2e <_strtod_l+0x43e>
 8005148:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800514c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005150:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005154:	35e2      	adds	r5, #226	@ 0xe2
 8005156:	fa01 f305 	lsl.w	r3, r1, r5
 800515a:	9310      	str	r3, [sp, #64]	@ 0x40
 800515c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800515e:	e7ba      	b.n	80050d6 <_strtod_l+0x6e6>
 8005160:	2300      	movs	r3, #0
 8005162:	9310      	str	r3, [sp, #64]	@ 0x40
 8005164:	2301      	movs	r3, #1
 8005166:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005168:	e7b5      	b.n	80050d6 <_strtod_l+0x6e6>
 800516a:	462a      	mov	r2, r5
 800516c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800516e:	9805      	ldr	r0, [sp, #20]
 8005170:	f001 fbb2 	bl	80068d8 <__lshift>
 8005174:	901a      	str	r0, [sp, #104]	@ 0x68
 8005176:	2800      	cmp	r0, #0
 8005178:	d1d9      	bne.n	800512e <_strtod_l+0x73e>
 800517a:	e658      	b.n	8004e2e <_strtod_l+0x43e>
 800517c:	08007a80 	.word	0x08007a80
 8005180:	fffffc02 	.word	0xfffffc02
 8005184:	2e00      	cmp	r6, #0
 8005186:	dd07      	ble.n	8005198 <_strtod_l+0x7a8>
 8005188:	4649      	mov	r1, r9
 800518a:	4632      	mov	r2, r6
 800518c:	9805      	ldr	r0, [sp, #20]
 800518e:	f001 fba3 	bl	80068d8 <__lshift>
 8005192:	4681      	mov	r9, r0
 8005194:	2800      	cmp	r0, #0
 8005196:	d0d4      	beq.n	8005142 <_strtod_l+0x752>
 8005198:	2f00      	cmp	r7, #0
 800519a:	dd08      	ble.n	80051ae <_strtod_l+0x7be>
 800519c:	4641      	mov	r1, r8
 800519e:	463a      	mov	r2, r7
 80051a0:	9805      	ldr	r0, [sp, #20]
 80051a2:	f001 fb99 	bl	80068d8 <__lshift>
 80051a6:	4680      	mov	r8, r0
 80051a8:	2800      	cmp	r0, #0
 80051aa:	f43f ae40 	beq.w	8004e2e <_strtod_l+0x43e>
 80051ae:	464a      	mov	r2, r9
 80051b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80051b2:	9805      	ldr	r0, [sp, #20]
 80051b4:	f001 fc18 	bl	80069e8 <__mdiff>
 80051b8:	4604      	mov	r4, r0
 80051ba:	2800      	cmp	r0, #0
 80051bc:	f43f ae37 	beq.w	8004e2e <_strtod_l+0x43e>
 80051c0:	68c3      	ldr	r3, [r0, #12]
 80051c2:	4641      	mov	r1, r8
 80051c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80051c6:	2300      	movs	r3, #0
 80051c8:	60c3      	str	r3, [r0, #12]
 80051ca:	f001 fbf1 	bl	80069b0 <__mcmp>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	da3d      	bge.n	800524e <_strtod_l+0x85e>
 80051d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051d4:	ea53 030a 	orrs.w	r3, r3, sl
 80051d8:	d163      	bne.n	80052a2 <_strtod_l+0x8b2>
 80051da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d15f      	bne.n	80052a2 <_strtod_l+0x8b2>
 80051e2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80051e6:	0d1b      	lsrs	r3, r3, #20
 80051e8:	051b      	lsls	r3, r3, #20
 80051ea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80051ee:	d958      	bls.n	80052a2 <_strtod_l+0x8b2>
 80051f0:	6963      	ldr	r3, [r4, #20]
 80051f2:	b913      	cbnz	r3, 80051fa <_strtod_l+0x80a>
 80051f4:	6923      	ldr	r3, [r4, #16]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	dd53      	ble.n	80052a2 <_strtod_l+0x8b2>
 80051fa:	4621      	mov	r1, r4
 80051fc:	2201      	movs	r2, #1
 80051fe:	9805      	ldr	r0, [sp, #20]
 8005200:	f001 fb6a 	bl	80068d8 <__lshift>
 8005204:	4641      	mov	r1, r8
 8005206:	4604      	mov	r4, r0
 8005208:	f001 fbd2 	bl	80069b0 <__mcmp>
 800520c:	2800      	cmp	r0, #0
 800520e:	dd48      	ble.n	80052a2 <_strtod_l+0x8b2>
 8005210:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005214:	9a08      	ldr	r2, [sp, #32]
 8005216:	0d1b      	lsrs	r3, r3, #20
 8005218:	051b      	lsls	r3, r3, #20
 800521a:	2a00      	cmp	r2, #0
 800521c:	d062      	beq.n	80052e4 <_strtod_l+0x8f4>
 800521e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005222:	d85f      	bhi.n	80052e4 <_strtod_l+0x8f4>
 8005224:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005228:	f67f ae94 	bls.w	8004f54 <_strtod_l+0x564>
 800522c:	4650      	mov	r0, sl
 800522e:	4659      	mov	r1, fp
 8005230:	4ba3      	ldr	r3, [pc, #652]	@ (80054c0 <_strtod_l+0xad0>)
 8005232:	2200      	movs	r2, #0
 8005234:	f7fb f95a 	bl	80004ec <__aeabi_dmul>
 8005238:	4ba2      	ldr	r3, [pc, #648]	@ (80054c4 <_strtod_l+0xad4>)
 800523a:	4682      	mov	sl, r0
 800523c:	400b      	ands	r3, r1
 800523e:	468b      	mov	fp, r1
 8005240:	2b00      	cmp	r3, #0
 8005242:	f47f adff 	bne.w	8004e44 <_strtod_l+0x454>
 8005246:	2322      	movs	r3, #34	@ 0x22
 8005248:	9a05      	ldr	r2, [sp, #20]
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	e5fa      	b.n	8004e44 <_strtod_l+0x454>
 800524e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005252:	d165      	bne.n	8005320 <_strtod_l+0x930>
 8005254:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005256:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800525a:	b35a      	cbz	r2, 80052b4 <_strtod_l+0x8c4>
 800525c:	4a9a      	ldr	r2, [pc, #616]	@ (80054c8 <_strtod_l+0xad8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d12b      	bne.n	80052ba <_strtod_l+0x8ca>
 8005262:	9b08      	ldr	r3, [sp, #32]
 8005264:	4651      	mov	r1, sl
 8005266:	b303      	cbz	r3, 80052aa <_strtod_l+0x8ba>
 8005268:	465a      	mov	r2, fp
 800526a:	4b96      	ldr	r3, [pc, #600]	@ (80054c4 <_strtod_l+0xad4>)
 800526c:	4013      	ands	r3, r2
 800526e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005272:	f04f 32ff 	mov.w	r2, #4294967295
 8005276:	d81b      	bhi.n	80052b0 <_strtod_l+0x8c0>
 8005278:	0d1b      	lsrs	r3, r3, #20
 800527a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	4299      	cmp	r1, r3
 8005284:	d119      	bne.n	80052ba <_strtod_l+0x8ca>
 8005286:	4b91      	ldr	r3, [pc, #580]	@ (80054cc <_strtod_l+0xadc>)
 8005288:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800528a:	429a      	cmp	r2, r3
 800528c:	d102      	bne.n	8005294 <_strtod_l+0x8a4>
 800528e:	3101      	adds	r1, #1
 8005290:	f43f adcd 	beq.w	8004e2e <_strtod_l+0x43e>
 8005294:	f04f 0a00 	mov.w	sl, #0
 8005298:	4b8a      	ldr	r3, [pc, #552]	@ (80054c4 <_strtod_l+0xad4>)
 800529a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800529c:	401a      	ands	r2, r3
 800529e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80052a2:	9b08      	ldr	r3, [sp, #32]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1c1      	bne.n	800522c <_strtod_l+0x83c>
 80052a8:	e5cc      	b.n	8004e44 <_strtod_l+0x454>
 80052aa:	f04f 33ff 	mov.w	r3, #4294967295
 80052ae:	e7e8      	b.n	8005282 <_strtod_l+0x892>
 80052b0:	4613      	mov	r3, r2
 80052b2:	e7e6      	b.n	8005282 <_strtod_l+0x892>
 80052b4:	ea53 030a 	orrs.w	r3, r3, sl
 80052b8:	d0aa      	beq.n	8005210 <_strtod_l+0x820>
 80052ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80052bc:	b1db      	cbz	r3, 80052f6 <_strtod_l+0x906>
 80052be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052c0:	4213      	tst	r3, r2
 80052c2:	d0ee      	beq.n	80052a2 <_strtod_l+0x8b2>
 80052c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052c6:	4650      	mov	r0, sl
 80052c8:	4659      	mov	r1, fp
 80052ca:	9a08      	ldr	r2, [sp, #32]
 80052cc:	b1bb      	cbz	r3, 80052fe <_strtod_l+0x90e>
 80052ce:	f7ff fb6d 	bl	80049ac <sulp>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052da:	f7fa ff51 	bl	8000180 <__adddf3>
 80052de:	4682      	mov	sl, r0
 80052e0:	468b      	mov	fp, r1
 80052e2:	e7de      	b.n	80052a2 <_strtod_l+0x8b2>
 80052e4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80052e8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80052ec:	f04f 3aff 	mov.w	sl, #4294967295
 80052f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80052f4:	e7d5      	b.n	80052a2 <_strtod_l+0x8b2>
 80052f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80052f8:	ea13 0f0a 	tst.w	r3, sl
 80052fc:	e7e1      	b.n	80052c2 <_strtod_l+0x8d2>
 80052fe:	f7ff fb55 	bl	80049ac <sulp>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800530a:	f7fa ff37 	bl	800017c <__aeabi_dsub>
 800530e:	2200      	movs	r2, #0
 8005310:	2300      	movs	r3, #0
 8005312:	4682      	mov	sl, r0
 8005314:	468b      	mov	fp, r1
 8005316:	f7fb fb51 	bl	80009bc <__aeabi_dcmpeq>
 800531a:	2800      	cmp	r0, #0
 800531c:	d0c1      	beq.n	80052a2 <_strtod_l+0x8b2>
 800531e:	e619      	b.n	8004f54 <_strtod_l+0x564>
 8005320:	4641      	mov	r1, r8
 8005322:	4620      	mov	r0, r4
 8005324:	f001 fcb4 	bl	8006c90 <__ratio>
 8005328:	2200      	movs	r2, #0
 800532a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800532e:	4606      	mov	r6, r0
 8005330:	460f      	mov	r7, r1
 8005332:	f7fb fb57 	bl	80009e4 <__aeabi_dcmple>
 8005336:	2800      	cmp	r0, #0
 8005338:	d06d      	beq.n	8005416 <_strtod_l+0xa26>
 800533a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d178      	bne.n	8005432 <_strtod_l+0xa42>
 8005340:	f1ba 0f00 	cmp.w	sl, #0
 8005344:	d156      	bne.n	80053f4 <_strtod_l+0xa04>
 8005346:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800534c:	2b00      	cmp	r3, #0
 800534e:	d158      	bne.n	8005402 <_strtod_l+0xa12>
 8005350:	2200      	movs	r2, #0
 8005352:	4630      	mov	r0, r6
 8005354:	4639      	mov	r1, r7
 8005356:	4b5e      	ldr	r3, [pc, #376]	@ (80054d0 <_strtod_l+0xae0>)
 8005358:	f7fb fb3a 	bl	80009d0 <__aeabi_dcmplt>
 800535c:	2800      	cmp	r0, #0
 800535e:	d157      	bne.n	8005410 <_strtod_l+0xa20>
 8005360:	4630      	mov	r0, r6
 8005362:	4639      	mov	r1, r7
 8005364:	2200      	movs	r2, #0
 8005366:	4b5b      	ldr	r3, [pc, #364]	@ (80054d4 <_strtod_l+0xae4>)
 8005368:	f7fb f8c0 	bl	80004ec <__aeabi_dmul>
 800536c:	4606      	mov	r6, r0
 800536e:	460f      	mov	r7, r1
 8005370:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005374:	9606      	str	r6, [sp, #24]
 8005376:	9307      	str	r3, [sp, #28]
 8005378:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800537c:	4d51      	ldr	r5, [pc, #324]	@ (80054c4 <_strtod_l+0xad4>)
 800537e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005382:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005384:	401d      	ands	r5, r3
 8005386:	4b54      	ldr	r3, [pc, #336]	@ (80054d8 <_strtod_l+0xae8>)
 8005388:	429d      	cmp	r5, r3
 800538a:	f040 80ab 	bne.w	80054e4 <_strtod_l+0xaf4>
 800538e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005390:	4650      	mov	r0, sl
 8005392:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005396:	4659      	mov	r1, fp
 8005398:	f001 fbba 	bl	8006b10 <__ulp>
 800539c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053a0:	f7fb f8a4 	bl	80004ec <__aeabi_dmul>
 80053a4:	4652      	mov	r2, sl
 80053a6:	465b      	mov	r3, fp
 80053a8:	f7fa feea 	bl	8000180 <__adddf3>
 80053ac:	460b      	mov	r3, r1
 80053ae:	4945      	ldr	r1, [pc, #276]	@ (80054c4 <_strtod_l+0xad4>)
 80053b0:	4a4a      	ldr	r2, [pc, #296]	@ (80054dc <_strtod_l+0xaec>)
 80053b2:	4019      	ands	r1, r3
 80053b4:	4291      	cmp	r1, r2
 80053b6:	4682      	mov	sl, r0
 80053b8:	d942      	bls.n	8005440 <_strtod_l+0xa50>
 80053ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80053bc:	4b43      	ldr	r3, [pc, #268]	@ (80054cc <_strtod_l+0xadc>)
 80053be:	429a      	cmp	r2, r3
 80053c0:	d103      	bne.n	80053ca <_strtod_l+0x9da>
 80053c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80053c4:	3301      	adds	r3, #1
 80053c6:	f43f ad32 	beq.w	8004e2e <_strtod_l+0x43e>
 80053ca:	f04f 3aff 	mov.w	sl, #4294967295
 80053ce:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80054cc <_strtod_l+0xadc>
 80053d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80053d4:	9805      	ldr	r0, [sp, #20]
 80053d6:	f001 f86f 	bl	80064b8 <_Bfree>
 80053da:	4649      	mov	r1, r9
 80053dc:	9805      	ldr	r0, [sp, #20]
 80053de:	f001 f86b 	bl	80064b8 <_Bfree>
 80053e2:	4641      	mov	r1, r8
 80053e4:	9805      	ldr	r0, [sp, #20]
 80053e6:	f001 f867 	bl	80064b8 <_Bfree>
 80053ea:	4621      	mov	r1, r4
 80053ec:	9805      	ldr	r0, [sp, #20]
 80053ee:	f001 f863 	bl	80064b8 <_Bfree>
 80053f2:	e61c      	b.n	800502e <_strtod_l+0x63e>
 80053f4:	f1ba 0f01 	cmp.w	sl, #1
 80053f8:	d103      	bne.n	8005402 <_strtod_l+0xa12>
 80053fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f43f ada9 	beq.w	8004f54 <_strtod_l+0x564>
 8005402:	2200      	movs	r2, #0
 8005404:	4b36      	ldr	r3, [pc, #216]	@ (80054e0 <_strtod_l+0xaf0>)
 8005406:	2600      	movs	r6, #0
 8005408:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800540c:	4f30      	ldr	r7, [pc, #192]	@ (80054d0 <_strtod_l+0xae0>)
 800540e:	e7b3      	b.n	8005378 <_strtod_l+0x988>
 8005410:	2600      	movs	r6, #0
 8005412:	4f30      	ldr	r7, [pc, #192]	@ (80054d4 <_strtod_l+0xae4>)
 8005414:	e7ac      	b.n	8005370 <_strtod_l+0x980>
 8005416:	4630      	mov	r0, r6
 8005418:	4639      	mov	r1, r7
 800541a:	4b2e      	ldr	r3, [pc, #184]	@ (80054d4 <_strtod_l+0xae4>)
 800541c:	2200      	movs	r2, #0
 800541e:	f7fb f865 	bl	80004ec <__aeabi_dmul>
 8005422:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005424:	4606      	mov	r6, r0
 8005426:	460f      	mov	r7, r1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0a1      	beq.n	8005370 <_strtod_l+0x980>
 800542c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005430:	e7a2      	b.n	8005378 <_strtod_l+0x988>
 8005432:	2200      	movs	r2, #0
 8005434:	4b26      	ldr	r3, [pc, #152]	@ (80054d0 <_strtod_l+0xae0>)
 8005436:	4616      	mov	r6, r2
 8005438:	461f      	mov	r7, r3
 800543a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800543e:	e79b      	b.n	8005378 <_strtod_l+0x988>
 8005440:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005444:	9b08      	ldr	r3, [sp, #32]
 8005446:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1c1      	bne.n	80053d2 <_strtod_l+0x9e2>
 800544e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005452:	0d1b      	lsrs	r3, r3, #20
 8005454:	051b      	lsls	r3, r3, #20
 8005456:	429d      	cmp	r5, r3
 8005458:	d1bb      	bne.n	80053d2 <_strtod_l+0x9e2>
 800545a:	4630      	mov	r0, r6
 800545c:	4639      	mov	r1, r7
 800545e:	f7fb fe75 	bl	800114c <__aeabi_d2lz>
 8005462:	f7fb f815 	bl	8000490 <__aeabi_l2d>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4630      	mov	r0, r6
 800546c:	4639      	mov	r1, r7
 800546e:	f7fa fe85 	bl	800017c <__aeabi_dsub>
 8005472:	460b      	mov	r3, r1
 8005474:	4602      	mov	r2, r0
 8005476:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800547a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800547e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005480:	ea46 060a 	orr.w	r6, r6, sl
 8005484:	431e      	orrs	r6, r3
 8005486:	d06a      	beq.n	800555e <_strtod_l+0xb6e>
 8005488:	a309      	add	r3, pc, #36	@ (adr r3, 80054b0 <_strtod_l+0xac0>)
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	f7fb fa9f 	bl	80009d0 <__aeabi_dcmplt>
 8005492:	2800      	cmp	r0, #0
 8005494:	f47f acd6 	bne.w	8004e44 <_strtod_l+0x454>
 8005498:	a307      	add	r3, pc, #28	@ (adr r3, 80054b8 <_strtod_l+0xac8>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054a2:	f7fb fab3 	bl	8000a0c <__aeabi_dcmpgt>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d093      	beq.n	80053d2 <_strtod_l+0x9e2>
 80054aa:	e4cb      	b.n	8004e44 <_strtod_l+0x454>
 80054ac:	f3af 8000 	nop.w
 80054b0:	94a03595 	.word	0x94a03595
 80054b4:	3fdfffff 	.word	0x3fdfffff
 80054b8:	35afe535 	.word	0x35afe535
 80054bc:	3fe00000 	.word	0x3fe00000
 80054c0:	39500000 	.word	0x39500000
 80054c4:	7ff00000 	.word	0x7ff00000
 80054c8:	000fffff 	.word	0x000fffff
 80054cc:	7fefffff 	.word	0x7fefffff
 80054d0:	3ff00000 	.word	0x3ff00000
 80054d4:	3fe00000 	.word	0x3fe00000
 80054d8:	7fe00000 	.word	0x7fe00000
 80054dc:	7c9fffff 	.word	0x7c9fffff
 80054e0:	bff00000 	.word	0xbff00000
 80054e4:	9b08      	ldr	r3, [sp, #32]
 80054e6:	b323      	cbz	r3, 8005532 <_strtod_l+0xb42>
 80054e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80054ec:	d821      	bhi.n	8005532 <_strtod_l+0xb42>
 80054ee:	a328      	add	r3, pc, #160	@ (adr r3, 8005590 <_strtod_l+0xba0>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	4630      	mov	r0, r6
 80054f6:	4639      	mov	r1, r7
 80054f8:	f7fb fa74 	bl	80009e4 <__aeabi_dcmple>
 80054fc:	b1a0      	cbz	r0, 8005528 <_strtod_l+0xb38>
 80054fe:	4639      	mov	r1, r7
 8005500:	4630      	mov	r0, r6
 8005502:	f7fb faa3 	bl	8000a4c <__aeabi_d2uiz>
 8005506:	2801      	cmp	r0, #1
 8005508:	bf38      	it	cc
 800550a:	2001      	movcc	r0, #1
 800550c:	f7fa ff74 	bl	80003f8 <__aeabi_ui2d>
 8005510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005512:	4606      	mov	r6, r0
 8005514:	460f      	mov	r7, r1
 8005516:	b9fb      	cbnz	r3, 8005558 <_strtod_l+0xb68>
 8005518:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800551c:	9014      	str	r0, [sp, #80]	@ 0x50
 800551e:	9315      	str	r3, [sp, #84]	@ 0x54
 8005520:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005524:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005528:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800552a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800552e:	1b5b      	subs	r3, r3, r5
 8005530:	9311      	str	r3, [sp, #68]	@ 0x44
 8005532:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005536:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800553a:	f001 fae9 	bl	8006b10 <__ulp>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4650      	mov	r0, sl
 8005544:	4659      	mov	r1, fp
 8005546:	f7fa ffd1 	bl	80004ec <__aeabi_dmul>
 800554a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800554e:	f7fa fe17 	bl	8000180 <__adddf3>
 8005552:	4682      	mov	sl, r0
 8005554:	468b      	mov	fp, r1
 8005556:	e775      	b.n	8005444 <_strtod_l+0xa54>
 8005558:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800555c:	e7e0      	b.n	8005520 <_strtod_l+0xb30>
 800555e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005598 <_strtod_l+0xba8>)
 8005560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005564:	f7fb fa34 	bl	80009d0 <__aeabi_dcmplt>
 8005568:	e79d      	b.n	80054a6 <_strtod_l+0xab6>
 800556a:	2300      	movs	r3, #0
 800556c:	930e      	str	r3, [sp, #56]	@ 0x38
 800556e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005570:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	f7ff ba79 	b.w	8004a6a <_strtod_l+0x7a>
 8005578:	2a65      	cmp	r2, #101	@ 0x65
 800557a:	f43f ab72 	beq.w	8004c62 <_strtod_l+0x272>
 800557e:	2a45      	cmp	r2, #69	@ 0x45
 8005580:	f43f ab6f 	beq.w	8004c62 <_strtod_l+0x272>
 8005584:	2301      	movs	r3, #1
 8005586:	f7ff bbaa 	b.w	8004cde <_strtod_l+0x2ee>
 800558a:	bf00      	nop
 800558c:	f3af 8000 	nop.w
 8005590:	ffc00000 	.word	0xffc00000
 8005594:	41dfffff 	.word	0x41dfffff
 8005598:	94a03595 	.word	0x94a03595
 800559c:	3fcfffff 	.word	0x3fcfffff

080055a0 <strtof>:
 80055a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055a4:	4d24      	ldr	r5, [pc, #144]	@ (8005638 <strtof+0x98>)
 80055a6:	460a      	mov	r2, r1
 80055a8:	4b24      	ldr	r3, [pc, #144]	@ (800563c <strtof+0x9c>)
 80055aa:	4601      	mov	r1, r0
 80055ac:	6828      	ldr	r0, [r5, #0]
 80055ae:	f7ff fa1f 	bl	80049f0 <_strtod_l>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4606      	mov	r6, r0
 80055b8:	460f      	mov	r7, r1
 80055ba:	f7fb fa31 	bl	8000a20 <__aeabi_dcmpun>
 80055be:	b168      	cbz	r0, 80055dc <strtof+0x3c>
 80055c0:	2f00      	cmp	r7, #0
 80055c2:	481f      	ldr	r0, [pc, #124]	@ (8005640 <strtof+0xa0>)
 80055c4:	da06      	bge.n	80055d4 <strtof+0x34>
 80055c6:	f000 facb 	bl	8005b60 <nanf>
 80055ca:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80055ce:	4620      	mov	r0, r4
 80055d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055d4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055d8:	f000 bac2 	b.w	8005b60 <nanf>
 80055dc:	4639      	mov	r1, r7
 80055de:	4630      	mov	r0, r6
 80055e0:	f7fb fa54 	bl	8000a8c <__aeabi_d2f>
 80055e4:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80055e8:	4604      	mov	r4, r0
 80055ea:	4916      	ldr	r1, [pc, #88]	@ (8005644 <strtof+0xa4>)
 80055ec:	4640      	mov	r0, r8
 80055ee:	f7fb fd71 	bl	80010d4 <__aeabi_fcmpun>
 80055f2:	b9b0      	cbnz	r0, 8005622 <strtof+0x82>
 80055f4:	4640      	mov	r0, r8
 80055f6:	4913      	ldr	r1, [pc, #76]	@ (8005644 <strtof+0xa4>)
 80055f8:	f7fb fd4e 	bl	8001098 <__aeabi_fcmple>
 80055fc:	b988      	cbnz	r0, 8005622 <strtof+0x82>
 80055fe:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 8005602:	f04f 32ff 	mov.w	r2, #4294967295
 8005606:	4630      	mov	r0, r6
 8005608:	4649      	mov	r1, r9
 800560a:	4b0f      	ldr	r3, [pc, #60]	@ (8005648 <strtof+0xa8>)
 800560c:	f7fb fa08 	bl	8000a20 <__aeabi_dcmpun>
 8005610:	b970      	cbnz	r0, 8005630 <strtof+0x90>
 8005612:	f04f 32ff 	mov.w	r2, #4294967295
 8005616:	4630      	mov	r0, r6
 8005618:	4649      	mov	r1, r9
 800561a:	4b0b      	ldr	r3, [pc, #44]	@ (8005648 <strtof+0xa8>)
 800561c:	f7fb f9e2 	bl	80009e4 <__aeabi_dcmple>
 8005620:	b930      	cbnz	r0, 8005630 <strtof+0x90>
 8005622:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8005626:	d1d2      	bne.n	80055ce <strtof+0x2e>
 8005628:	4b08      	ldr	r3, [pc, #32]	@ (800564c <strtof+0xac>)
 800562a:	403b      	ands	r3, r7
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0ce      	beq.n	80055ce <strtof+0x2e>
 8005630:	2222      	movs	r2, #34	@ 0x22
 8005632:	682b      	ldr	r3, [r5, #0]
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	e7ca      	b.n	80055ce <strtof+0x2e>
 8005638:	20000194 	.word	0x20000194
 800563c:	20000028 	.word	0x20000028
 8005640:	08007958 	.word	0x08007958
 8005644:	7f7fffff 	.word	0x7f7fffff
 8005648:	7fefffff 	.word	0x7fefffff
 800564c:	7ff00000 	.word	0x7ff00000

08005650 <_strtol_l.isra.0>:
 8005650:	2b24      	cmp	r3, #36	@ 0x24
 8005652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005656:	4686      	mov	lr, r0
 8005658:	4690      	mov	r8, r2
 800565a:	d801      	bhi.n	8005660 <_strtol_l.isra.0+0x10>
 800565c:	2b01      	cmp	r3, #1
 800565e:	d106      	bne.n	800566e <_strtol_l.isra.0+0x1e>
 8005660:	f000 fa3c 	bl	8005adc <__errno>
 8005664:	2316      	movs	r3, #22
 8005666:	6003      	str	r3, [r0, #0]
 8005668:	2000      	movs	r0, #0
 800566a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566e:	460d      	mov	r5, r1
 8005670:	4833      	ldr	r0, [pc, #204]	@ (8005740 <_strtol_l.isra.0+0xf0>)
 8005672:	462a      	mov	r2, r5
 8005674:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005678:	5d06      	ldrb	r6, [r0, r4]
 800567a:	f016 0608 	ands.w	r6, r6, #8
 800567e:	d1f8      	bne.n	8005672 <_strtol_l.isra.0+0x22>
 8005680:	2c2d      	cmp	r4, #45	@ 0x2d
 8005682:	d110      	bne.n	80056a6 <_strtol_l.isra.0+0x56>
 8005684:	2601      	movs	r6, #1
 8005686:	782c      	ldrb	r4, [r5, #0]
 8005688:	1c95      	adds	r5, r2, #2
 800568a:	f033 0210 	bics.w	r2, r3, #16
 800568e:	d115      	bne.n	80056bc <_strtol_l.isra.0+0x6c>
 8005690:	2c30      	cmp	r4, #48	@ 0x30
 8005692:	d10d      	bne.n	80056b0 <_strtol_l.isra.0+0x60>
 8005694:	782a      	ldrb	r2, [r5, #0]
 8005696:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800569a:	2a58      	cmp	r2, #88	@ 0x58
 800569c:	d108      	bne.n	80056b0 <_strtol_l.isra.0+0x60>
 800569e:	786c      	ldrb	r4, [r5, #1]
 80056a0:	3502      	adds	r5, #2
 80056a2:	2310      	movs	r3, #16
 80056a4:	e00a      	b.n	80056bc <_strtol_l.isra.0+0x6c>
 80056a6:	2c2b      	cmp	r4, #43	@ 0x2b
 80056a8:	bf04      	itt	eq
 80056aa:	782c      	ldrbeq	r4, [r5, #0]
 80056ac:	1c95      	addeq	r5, r2, #2
 80056ae:	e7ec      	b.n	800568a <_strtol_l.isra.0+0x3a>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f6      	bne.n	80056a2 <_strtol_l.isra.0+0x52>
 80056b4:	2c30      	cmp	r4, #48	@ 0x30
 80056b6:	bf14      	ite	ne
 80056b8:	230a      	movne	r3, #10
 80056ba:	2308      	moveq	r3, #8
 80056bc:	2200      	movs	r2, #0
 80056be:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80056c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80056c6:	fbbc f9f3 	udiv	r9, ip, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	fb03 ca19 	mls	sl, r3, r9, ip
 80056d0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80056d4:	2f09      	cmp	r7, #9
 80056d6:	d80f      	bhi.n	80056f8 <_strtol_l.isra.0+0xa8>
 80056d8:	463c      	mov	r4, r7
 80056da:	42a3      	cmp	r3, r4
 80056dc:	dd1b      	ble.n	8005716 <_strtol_l.isra.0+0xc6>
 80056de:	1c57      	adds	r7, r2, #1
 80056e0:	d007      	beq.n	80056f2 <_strtol_l.isra.0+0xa2>
 80056e2:	4581      	cmp	r9, r0
 80056e4:	d314      	bcc.n	8005710 <_strtol_l.isra.0+0xc0>
 80056e6:	d101      	bne.n	80056ec <_strtol_l.isra.0+0x9c>
 80056e8:	45a2      	cmp	sl, r4
 80056ea:	db11      	blt.n	8005710 <_strtol_l.isra.0+0xc0>
 80056ec:	2201      	movs	r2, #1
 80056ee:	fb00 4003 	mla	r0, r0, r3, r4
 80056f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056f6:	e7eb      	b.n	80056d0 <_strtol_l.isra.0+0x80>
 80056f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80056fc:	2f19      	cmp	r7, #25
 80056fe:	d801      	bhi.n	8005704 <_strtol_l.isra.0+0xb4>
 8005700:	3c37      	subs	r4, #55	@ 0x37
 8005702:	e7ea      	b.n	80056da <_strtol_l.isra.0+0x8a>
 8005704:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005708:	2f19      	cmp	r7, #25
 800570a:	d804      	bhi.n	8005716 <_strtol_l.isra.0+0xc6>
 800570c:	3c57      	subs	r4, #87	@ 0x57
 800570e:	e7e4      	b.n	80056da <_strtol_l.isra.0+0x8a>
 8005710:	f04f 32ff 	mov.w	r2, #4294967295
 8005714:	e7ed      	b.n	80056f2 <_strtol_l.isra.0+0xa2>
 8005716:	1c53      	adds	r3, r2, #1
 8005718:	d108      	bne.n	800572c <_strtol_l.isra.0+0xdc>
 800571a:	2322      	movs	r3, #34	@ 0x22
 800571c:	4660      	mov	r0, ip
 800571e:	f8ce 3000 	str.w	r3, [lr]
 8005722:	f1b8 0f00 	cmp.w	r8, #0
 8005726:	d0a0      	beq.n	800566a <_strtol_l.isra.0+0x1a>
 8005728:	1e69      	subs	r1, r5, #1
 800572a:	e006      	b.n	800573a <_strtol_l.isra.0+0xea>
 800572c:	b106      	cbz	r6, 8005730 <_strtol_l.isra.0+0xe0>
 800572e:	4240      	negs	r0, r0
 8005730:	f1b8 0f00 	cmp.w	r8, #0
 8005734:	d099      	beq.n	800566a <_strtol_l.isra.0+0x1a>
 8005736:	2a00      	cmp	r2, #0
 8005738:	d1f6      	bne.n	8005728 <_strtol_l.isra.0+0xd8>
 800573a:	f8c8 1000 	str.w	r1, [r8]
 800573e:	e794      	b.n	800566a <_strtol_l.isra.0+0x1a>
 8005740:	08007aa9 	.word	0x08007aa9

08005744 <strtol>:
 8005744:	4613      	mov	r3, r2
 8005746:	460a      	mov	r2, r1
 8005748:	4601      	mov	r1, r0
 800574a:	4802      	ldr	r0, [pc, #8]	@ (8005754 <strtol+0x10>)
 800574c:	6800      	ldr	r0, [r0, #0]
 800574e:	f7ff bf7f 	b.w	8005650 <_strtol_l.isra.0>
 8005752:	bf00      	nop
 8005754:	20000194 	.word	0x20000194

08005758 <std>:
 8005758:	2300      	movs	r3, #0
 800575a:	b510      	push	{r4, lr}
 800575c:	4604      	mov	r4, r0
 800575e:	e9c0 3300 	strd	r3, r3, [r0]
 8005762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005766:	6083      	str	r3, [r0, #8]
 8005768:	8181      	strh	r1, [r0, #12]
 800576a:	6643      	str	r3, [r0, #100]	@ 0x64
 800576c:	81c2      	strh	r2, [r0, #14]
 800576e:	6183      	str	r3, [r0, #24]
 8005770:	4619      	mov	r1, r3
 8005772:	2208      	movs	r2, #8
 8005774:	305c      	adds	r0, #92	@ 0x5c
 8005776:	f000 f8f4 	bl	8005962 <memset>
 800577a:	4b0d      	ldr	r3, [pc, #52]	@ (80057b0 <std+0x58>)
 800577c:	6224      	str	r4, [r4, #32]
 800577e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005780:	4b0c      	ldr	r3, [pc, #48]	@ (80057b4 <std+0x5c>)
 8005782:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005784:	4b0c      	ldr	r3, [pc, #48]	@ (80057b8 <std+0x60>)
 8005786:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005788:	4b0c      	ldr	r3, [pc, #48]	@ (80057bc <std+0x64>)
 800578a:	6323      	str	r3, [r4, #48]	@ 0x30
 800578c:	4b0c      	ldr	r3, [pc, #48]	@ (80057c0 <std+0x68>)
 800578e:	429c      	cmp	r4, r3
 8005790:	d006      	beq.n	80057a0 <std+0x48>
 8005792:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005796:	4294      	cmp	r4, r2
 8005798:	d002      	beq.n	80057a0 <std+0x48>
 800579a:	33d0      	adds	r3, #208	@ 0xd0
 800579c:	429c      	cmp	r4, r3
 800579e:	d105      	bne.n	80057ac <std+0x54>
 80057a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057a8:	f000 b9c2 	b.w	8005b30 <__retarget_lock_init_recursive>
 80057ac:	bd10      	pop	{r4, pc}
 80057ae:	bf00      	nop
 80057b0:	080058dd 	.word	0x080058dd
 80057b4:	080058ff 	.word	0x080058ff
 80057b8:	08005937 	.word	0x08005937
 80057bc:	0800595b 	.word	0x0800595b
 80057c0:	20000330 	.word	0x20000330

080057c4 <stdio_exit_handler>:
 80057c4:	4a02      	ldr	r2, [pc, #8]	@ (80057d0 <stdio_exit_handler+0xc>)
 80057c6:	4903      	ldr	r1, [pc, #12]	@ (80057d4 <stdio_exit_handler+0x10>)
 80057c8:	4803      	ldr	r0, [pc, #12]	@ (80057d8 <stdio_exit_handler+0x14>)
 80057ca:	f000 b869 	b.w	80058a0 <_fwalk_sglue>
 80057ce:	bf00      	nop
 80057d0:	2000001c 	.word	0x2000001c
 80057d4:	08006e95 	.word	0x08006e95
 80057d8:	20000198 	.word	0x20000198

080057dc <cleanup_stdio>:
 80057dc:	6841      	ldr	r1, [r0, #4]
 80057de:	4b0c      	ldr	r3, [pc, #48]	@ (8005810 <cleanup_stdio+0x34>)
 80057e0:	b510      	push	{r4, lr}
 80057e2:	4299      	cmp	r1, r3
 80057e4:	4604      	mov	r4, r0
 80057e6:	d001      	beq.n	80057ec <cleanup_stdio+0x10>
 80057e8:	f001 fb54 	bl	8006e94 <_fflush_r>
 80057ec:	68a1      	ldr	r1, [r4, #8]
 80057ee:	4b09      	ldr	r3, [pc, #36]	@ (8005814 <cleanup_stdio+0x38>)
 80057f0:	4299      	cmp	r1, r3
 80057f2:	d002      	beq.n	80057fa <cleanup_stdio+0x1e>
 80057f4:	4620      	mov	r0, r4
 80057f6:	f001 fb4d 	bl	8006e94 <_fflush_r>
 80057fa:	68e1      	ldr	r1, [r4, #12]
 80057fc:	4b06      	ldr	r3, [pc, #24]	@ (8005818 <cleanup_stdio+0x3c>)
 80057fe:	4299      	cmp	r1, r3
 8005800:	d004      	beq.n	800580c <cleanup_stdio+0x30>
 8005802:	4620      	mov	r0, r4
 8005804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005808:	f001 bb44 	b.w	8006e94 <_fflush_r>
 800580c:	bd10      	pop	{r4, pc}
 800580e:	bf00      	nop
 8005810:	20000330 	.word	0x20000330
 8005814:	20000398 	.word	0x20000398
 8005818:	20000400 	.word	0x20000400

0800581c <global_stdio_init.part.0>:
 800581c:	b510      	push	{r4, lr}
 800581e:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <global_stdio_init.part.0+0x30>)
 8005820:	4c0b      	ldr	r4, [pc, #44]	@ (8005850 <global_stdio_init.part.0+0x34>)
 8005822:	4a0c      	ldr	r2, [pc, #48]	@ (8005854 <global_stdio_init.part.0+0x38>)
 8005824:	4620      	mov	r0, r4
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	2104      	movs	r1, #4
 800582a:	2200      	movs	r2, #0
 800582c:	f7ff ff94 	bl	8005758 <std>
 8005830:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005834:	2201      	movs	r2, #1
 8005836:	2109      	movs	r1, #9
 8005838:	f7ff ff8e 	bl	8005758 <std>
 800583c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005840:	2202      	movs	r2, #2
 8005842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005846:	2112      	movs	r1, #18
 8005848:	f7ff bf86 	b.w	8005758 <std>
 800584c:	20000468 	.word	0x20000468
 8005850:	20000330 	.word	0x20000330
 8005854:	080057c5 	.word	0x080057c5

08005858 <__sfp_lock_acquire>:
 8005858:	4801      	ldr	r0, [pc, #4]	@ (8005860 <__sfp_lock_acquire+0x8>)
 800585a:	f000 b96a 	b.w	8005b32 <__retarget_lock_acquire_recursive>
 800585e:	bf00      	nop
 8005860:	20000471 	.word	0x20000471

08005864 <__sfp_lock_release>:
 8005864:	4801      	ldr	r0, [pc, #4]	@ (800586c <__sfp_lock_release+0x8>)
 8005866:	f000 b965 	b.w	8005b34 <__retarget_lock_release_recursive>
 800586a:	bf00      	nop
 800586c:	20000471 	.word	0x20000471

08005870 <__sinit>:
 8005870:	b510      	push	{r4, lr}
 8005872:	4604      	mov	r4, r0
 8005874:	f7ff fff0 	bl	8005858 <__sfp_lock_acquire>
 8005878:	6a23      	ldr	r3, [r4, #32]
 800587a:	b11b      	cbz	r3, 8005884 <__sinit+0x14>
 800587c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005880:	f7ff bff0 	b.w	8005864 <__sfp_lock_release>
 8005884:	4b04      	ldr	r3, [pc, #16]	@ (8005898 <__sinit+0x28>)
 8005886:	6223      	str	r3, [r4, #32]
 8005888:	4b04      	ldr	r3, [pc, #16]	@ (800589c <__sinit+0x2c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1f5      	bne.n	800587c <__sinit+0xc>
 8005890:	f7ff ffc4 	bl	800581c <global_stdio_init.part.0>
 8005894:	e7f2      	b.n	800587c <__sinit+0xc>
 8005896:	bf00      	nop
 8005898:	080057dd 	.word	0x080057dd
 800589c:	20000468 	.word	0x20000468

080058a0 <_fwalk_sglue>:
 80058a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058a4:	4607      	mov	r7, r0
 80058a6:	4688      	mov	r8, r1
 80058a8:	4614      	mov	r4, r2
 80058aa:	2600      	movs	r6, #0
 80058ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058b0:	f1b9 0901 	subs.w	r9, r9, #1
 80058b4:	d505      	bpl.n	80058c2 <_fwalk_sglue+0x22>
 80058b6:	6824      	ldr	r4, [r4, #0]
 80058b8:	2c00      	cmp	r4, #0
 80058ba:	d1f7      	bne.n	80058ac <_fwalk_sglue+0xc>
 80058bc:	4630      	mov	r0, r6
 80058be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058c2:	89ab      	ldrh	r3, [r5, #12]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d907      	bls.n	80058d8 <_fwalk_sglue+0x38>
 80058c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058cc:	3301      	adds	r3, #1
 80058ce:	d003      	beq.n	80058d8 <_fwalk_sglue+0x38>
 80058d0:	4629      	mov	r1, r5
 80058d2:	4638      	mov	r0, r7
 80058d4:	47c0      	blx	r8
 80058d6:	4306      	orrs	r6, r0
 80058d8:	3568      	adds	r5, #104	@ 0x68
 80058da:	e7e9      	b.n	80058b0 <_fwalk_sglue+0x10>

080058dc <__sread>:
 80058dc:	b510      	push	{r4, lr}
 80058de:	460c      	mov	r4, r1
 80058e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e4:	f000 f8d6 	bl	8005a94 <_read_r>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	bfab      	itete	ge
 80058ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058ee:	89a3      	ldrhlt	r3, [r4, #12]
 80058f0:	181b      	addge	r3, r3, r0
 80058f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058f6:	bfac      	ite	ge
 80058f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058fa:	81a3      	strhlt	r3, [r4, #12]
 80058fc:	bd10      	pop	{r4, pc}

080058fe <__swrite>:
 80058fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005902:	461f      	mov	r7, r3
 8005904:	898b      	ldrh	r3, [r1, #12]
 8005906:	4605      	mov	r5, r0
 8005908:	05db      	lsls	r3, r3, #23
 800590a:	460c      	mov	r4, r1
 800590c:	4616      	mov	r6, r2
 800590e:	d505      	bpl.n	800591c <__swrite+0x1e>
 8005910:	2302      	movs	r3, #2
 8005912:	2200      	movs	r2, #0
 8005914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005918:	f000 f8aa 	bl	8005a70 <_lseek_r>
 800591c:	89a3      	ldrh	r3, [r4, #12]
 800591e:	4632      	mov	r2, r6
 8005920:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005924:	81a3      	strh	r3, [r4, #12]
 8005926:	4628      	mov	r0, r5
 8005928:	463b      	mov	r3, r7
 800592a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800592e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005932:	f000 b8c1 	b.w	8005ab8 <_write_r>

08005936 <__sseek>:
 8005936:	b510      	push	{r4, lr}
 8005938:	460c      	mov	r4, r1
 800593a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800593e:	f000 f897 	bl	8005a70 <_lseek_r>
 8005942:	1c43      	adds	r3, r0, #1
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	bf15      	itete	ne
 8005948:	6560      	strne	r0, [r4, #84]	@ 0x54
 800594a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800594e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005952:	81a3      	strheq	r3, [r4, #12]
 8005954:	bf18      	it	ne
 8005956:	81a3      	strhne	r3, [r4, #12]
 8005958:	bd10      	pop	{r4, pc}

0800595a <__sclose>:
 800595a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800595e:	f000 b877 	b.w	8005a50 <_close_r>

08005962 <memset>:
 8005962:	4603      	mov	r3, r0
 8005964:	4402      	add	r2, r0
 8005966:	4293      	cmp	r3, r2
 8005968:	d100      	bne.n	800596c <memset+0xa>
 800596a:	4770      	bx	lr
 800596c:	f803 1b01 	strb.w	r1, [r3], #1
 8005970:	e7f9      	b.n	8005966 <memset+0x4>

08005972 <strncmp>:
 8005972:	b510      	push	{r4, lr}
 8005974:	b16a      	cbz	r2, 8005992 <strncmp+0x20>
 8005976:	3901      	subs	r1, #1
 8005978:	1884      	adds	r4, r0, r2
 800597a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800597e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005982:	429a      	cmp	r2, r3
 8005984:	d103      	bne.n	800598e <strncmp+0x1c>
 8005986:	42a0      	cmp	r0, r4
 8005988:	d001      	beq.n	800598e <strncmp+0x1c>
 800598a:	2a00      	cmp	r2, #0
 800598c:	d1f5      	bne.n	800597a <strncmp+0x8>
 800598e:	1ad0      	subs	r0, r2, r3
 8005990:	bd10      	pop	{r4, pc}
 8005992:	4610      	mov	r0, r2
 8005994:	e7fc      	b.n	8005990 <strncmp+0x1e>
	...

08005998 <strtok>:
 8005998:	4b16      	ldr	r3, [pc, #88]	@ (80059f4 <strtok+0x5c>)
 800599a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800599e:	681f      	ldr	r7, [r3, #0]
 80059a0:	4605      	mov	r5, r0
 80059a2:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80059a4:	460e      	mov	r6, r1
 80059a6:	b9ec      	cbnz	r4, 80059e4 <strtok+0x4c>
 80059a8:	2050      	movs	r0, #80	@ 0x50
 80059aa:	f000 fc7d 	bl	80062a8 <malloc>
 80059ae:	4602      	mov	r2, r0
 80059b0:	6478      	str	r0, [r7, #68]	@ 0x44
 80059b2:	b920      	cbnz	r0, 80059be <strtok+0x26>
 80059b4:	215b      	movs	r1, #91	@ 0x5b
 80059b6:	4b10      	ldr	r3, [pc, #64]	@ (80059f8 <strtok+0x60>)
 80059b8:	4810      	ldr	r0, [pc, #64]	@ (80059fc <strtok+0x64>)
 80059ba:	f000 f8d5 	bl	8005b68 <__assert_func>
 80059be:	e9c0 4400 	strd	r4, r4, [r0]
 80059c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80059c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80059ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80059ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80059d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80059d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80059da:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80059de:	6184      	str	r4, [r0, #24]
 80059e0:	7704      	strb	r4, [r0, #28]
 80059e2:	6244      	str	r4, [r0, #36]	@ 0x24
 80059e4:	4631      	mov	r1, r6
 80059e6:	4628      	mov	r0, r5
 80059e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059ea:	2301      	movs	r3, #1
 80059ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059f0:	f000 b806 	b.w	8005a00 <__strtok_r>
 80059f4:	20000194 	.word	0x20000194
 80059f8:	080078a4 	.word	0x080078a4
 80059fc:	080078bb 	.word	0x080078bb

08005a00 <__strtok_r>:
 8005a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a02:	4604      	mov	r4, r0
 8005a04:	b908      	cbnz	r0, 8005a0a <__strtok_r+0xa>
 8005a06:	6814      	ldr	r4, [r2, #0]
 8005a08:	b144      	cbz	r4, 8005a1c <__strtok_r+0x1c>
 8005a0a:	460f      	mov	r7, r1
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005a12:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005a16:	b91e      	cbnz	r6, 8005a20 <__strtok_r+0x20>
 8005a18:	b965      	cbnz	r5, 8005a34 <__strtok_r+0x34>
 8005a1a:	6015      	str	r5, [r2, #0]
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	e005      	b.n	8005a2c <__strtok_r+0x2c>
 8005a20:	42b5      	cmp	r5, r6
 8005a22:	d1f6      	bne.n	8005a12 <__strtok_r+0x12>
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f0      	bne.n	8005a0a <__strtok_r+0xa>
 8005a28:	6014      	str	r4, [r2, #0]
 8005a2a:	7003      	strb	r3, [r0, #0]
 8005a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a2e:	461c      	mov	r4, r3
 8005a30:	e00c      	b.n	8005a4c <__strtok_r+0x4c>
 8005a32:	b91d      	cbnz	r5, 8005a3c <__strtok_r+0x3c>
 8005a34:	460e      	mov	r6, r1
 8005a36:	4627      	mov	r7, r4
 8005a38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a3c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005a40:	42ab      	cmp	r3, r5
 8005a42:	d1f6      	bne.n	8005a32 <__strtok_r+0x32>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0f2      	beq.n	8005a2e <__strtok_r+0x2e>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	703b      	strb	r3, [r7, #0]
 8005a4c:	6014      	str	r4, [r2, #0]
 8005a4e:	e7ed      	b.n	8005a2c <__strtok_r+0x2c>

08005a50 <_close_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	2300      	movs	r3, #0
 8005a54:	4d05      	ldr	r5, [pc, #20]	@ (8005a6c <_close_r+0x1c>)
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	f7fc fa17 	bl	8001e8e <_close>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_close_r+0x1a>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_close_r+0x1a>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	2000046c 	.word	0x2000046c

08005a70 <_lseek_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4604      	mov	r4, r0
 8005a74:	4608      	mov	r0, r1
 8005a76:	4611      	mov	r1, r2
 8005a78:	2200      	movs	r2, #0
 8005a7a:	4d05      	ldr	r5, [pc, #20]	@ (8005a90 <_lseek_r+0x20>)
 8005a7c:	602a      	str	r2, [r5, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f7fc fa29 	bl	8001ed6 <_lseek>
 8005a84:	1c43      	adds	r3, r0, #1
 8005a86:	d102      	bne.n	8005a8e <_lseek_r+0x1e>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	b103      	cbz	r3, 8005a8e <_lseek_r+0x1e>
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
 8005a90:	2000046c 	.word	0x2000046c

08005a94 <_read_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4604      	mov	r4, r0
 8005a98:	4608      	mov	r0, r1
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	4d05      	ldr	r5, [pc, #20]	@ (8005ab4 <_read_r+0x20>)
 8005aa0:	602a      	str	r2, [r5, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f7fc f9ba 	bl	8001e1c <_read>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_read_r+0x1e>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_read_r+0x1e>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	2000046c 	.word	0x2000046c

08005ab8 <_write_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4604      	mov	r4, r0
 8005abc:	4608      	mov	r0, r1
 8005abe:	4611      	mov	r1, r2
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4d05      	ldr	r5, [pc, #20]	@ (8005ad8 <_write_r+0x20>)
 8005ac4:	602a      	str	r2, [r5, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f7fc f9c5 	bl	8001e56 <_write>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_write_r+0x1e>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_write_r+0x1e>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	2000046c 	.word	0x2000046c

08005adc <__errno>:
 8005adc:	4b01      	ldr	r3, [pc, #4]	@ (8005ae4 <__errno+0x8>)
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20000194 	.word	0x20000194

08005ae8 <__libc_init_array>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	2600      	movs	r6, #0
 8005aec:	4d0c      	ldr	r5, [pc, #48]	@ (8005b20 <__libc_init_array+0x38>)
 8005aee:	4c0d      	ldr	r4, [pc, #52]	@ (8005b24 <__libc_init_array+0x3c>)
 8005af0:	1b64      	subs	r4, r4, r5
 8005af2:	10a4      	asrs	r4, r4, #2
 8005af4:	42a6      	cmp	r6, r4
 8005af6:	d109      	bne.n	8005b0c <__libc_init_array+0x24>
 8005af8:	f001 fe96 	bl	8007828 <_init>
 8005afc:	2600      	movs	r6, #0
 8005afe:	4d0a      	ldr	r5, [pc, #40]	@ (8005b28 <__libc_init_array+0x40>)
 8005b00:	4c0a      	ldr	r4, [pc, #40]	@ (8005b2c <__libc_init_array+0x44>)
 8005b02:	1b64      	subs	r4, r4, r5
 8005b04:	10a4      	asrs	r4, r4, #2
 8005b06:	42a6      	cmp	r6, r4
 8005b08:	d105      	bne.n	8005b16 <__libc_init_array+0x2e>
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b10:	4798      	blx	r3
 8005b12:	3601      	adds	r6, #1
 8005b14:	e7ee      	b.n	8005af4 <__libc_init_array+0xc>
 8005b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1a:	4798      	blx	r3
 8005b1c:	3601      	adds	r6, #1
 8005b1e:	e7f2      	b.n	8005b06 <__libc_init_array+0x1e>
 8005b20:	08007cb0 	.word	0x08007cb0
 8005b24:	08007cb0 	.word	0x08007cb0
 8005b28:	08007cb0 	.word	0x08007cb0
 8005b2c:	08007cb4 	.word	0x08007cb4

08005b30 <__retarget_lock_init_recursive>:
 8005b30:	4770      	bx	lr

08005b32 <__retarget_lock_acquire_recursive>:
 8005b32:	4770      	bx	lr

08005b34 <__retarget_lock_release_recursive>:
 8005b34:	4770      	bx	lr

08005b36 <memcpy>:
 8005b36:	440a      	add	r2, r1
 8005b38:	4291      	cmp	r1, r2
 8005b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b3e:	d100      	bne.n	8005b42 <memcpy+0xc>
 8005b40:	4770      	bx	lr
 8005b42:	b510      	push	{r4, lr}
 8005b44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b48:	4291      	cmp	r1, r2
 8005b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b4e:	d1f9      	bne.n	8005b44 <memcpy+0xe>
 8005b50:	bd10      	pop	{r4, pc}
	...

08005b54 <nan>:
 8005b54:	2000      	movs	r0, #0
 8005b56:	4901      	ldr	r1, [pc, #4]	@ (8005b5c <nan+0x8>)
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	7ff80000 	.word	0x7ff80000

08005b60 <nanf>:
 8005b60:	4800      	ldr	r0, [pc, #0]	@ (8005b64 <nanf+0x4>)
 8005b62:	4770      	bx	lr
 8005b64:	7fc00000 	.word	0x7fc00000

08005b68 <__assert_func>:
 8005b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b6a:	4614      	mov	r4, r2
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	4b09      	ldr	r3, [pc, #36]	@ (8005b94 <__assert_func+0x2c>)
 8005b70:	4605      	mov	r5, r0
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68d8      	ldr	r0, [r3, #12]
 8005b76:	b14c      	cbz	r4, 8005b8c <__assert_func+0x24>
 8005b78:	4b07      	ldr	r3, [pc, #28]	@ (8005b98 <__assert_func+0x30>)
 8005b7a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b7e:	9100      	str	r1, [sp, #0]
 8005b80:	462b      	mov	r3, r5
 8005b82:	4906      	ldr	r1, [pc, #24]	@ (8005b9c <__assert_func+0x34>)
 8005b84:	f001 f9ae 	bl	8006ee4 <fiprintf>
 8005b88:	f001 f9ce 	bl	8006f28 <abort>
 8005b8c:	4b04      	ldr	r3, [pc, #16]	@ (8005ba0 <__assert_func+0x38>)
 8005b8e:	461c      	mov	r4, r3
 8005b90:	e7f3      	b.n	8005b7a <__assert_func+0x12>
 8005b92:	bf00      	nop
 8005b94:	20000194 	.word	0x20000194
 8005b98:	0800791d 	.word	0x0800791d
 8005b9c:	0800792a 	.word	0x0800792a
 8005ba0:	08007958 	.word	0x08007958

08005ba4 <_free_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4605      	mov	r5, r0
 8005ba8:	2900      	cmp	r1, #0
 8005baa:	d040      	beq.n	8005c2e <_free_r+0x8a>
 8005bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bb0:	1f0c      	subs	r4, r1, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	bfb8      	it	lt
 8005bb6:	18e4      	addlt	r4, r4, r3
 8005bb8:	f000 fc32 	bl	8006420 <__malloc_lock>
 8005bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005c30 <_free_r+0x8c>)
 8005bbe:	6813      	ldr	r3, [r2, #0]
 8005bc0:	b933      	cbnz	r3, 8005bd0 <_free_r+0x2c>
 8005bc2:	6063      	str	r3, [r4, #4]
 8005bc4:	6014      	str	r4, [r2, #0]
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bcc:	f000 bc2e 	b.w	800642c <__malloc_unlock>
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	d908      	bls.n	8005be6 <_free_r+0x42>
 8005bd4:	6820      	ldr	r0, [r4, #0]
 8005bd6:	1821      	adds	r1, r4, r0
 8005bd8:	428b      	cmp	r3, r1
 8005bda:	bf01      	itttt	eq
 8005bdc:	6819      	ldreq	r1, [r3, #0]
 8005bde:	685b      	ldreq	r3, [r3, #4]
 8005be0:	1809      	addeq	r1, r1, r0
 8005be2:	6021      	streq	r1, [r4, #0]
 8005be4:	e7ed      	b.n	8005bc2 <_free_r+0x1e>
 8005be6:	461a      	mov	r2, r3
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	b10b      	cbz	r3, 8005bf0 <_free_r+0x4c>
 8005bec:	42a3      	cmp	r3, r4
 8005bee:	d9fa      	bls.n	8005be6 <_free_r+0x42>
 8005bf0:	6811      	ldr	r1, [r2, #0]
 8005bf2:	1850      	adds	r0, r2, r1
 8005bf4:	42a0      	cmp	r0, r4
 8005bf6:	d10b      	bne.n	8005c10 <_free_r+0x6c>
 8005bf8:	6820      	ldr	r0, [r4, #0]
 8005bfa:	4401      	add	r1, r0
 8005bfc:	1850      	adds	r0, r2, r1
 8005bfe:	4283      	cmp	r3, r0
 8005c00:	6011      	str	r1, [r2, #0]
 8005c02:	d1e0      	bne.n	8005bc6 <_free_r+0x22>
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	4408      	add	r0, r1
 8005c0a:	6010      	str	r0, [r2, #0]
 8005c0c:	6053      	str	r3, [r2, #4]
 8005c0e:	e7da      	b.n	8005bc6 <_free_r+0x22>
 8005c10:	d902      	bls.n	8005c18 <_free_r+0x74>
 8005c12:	230c      	movs	r3, #12
 8005c14:	602b      	str	r3, [r5, #0]
 8005c16:	e7d6      	b.n	8005bc6 <_free_r+0x22>
 8005c18:	6820      	ldr	r0, [r4, #0]
 8005c1a:	1821      	adds	r1, r4, r0
 8005c1c:	428b      	cmp	r3, r1
 8005c1e:	bf01      	itttt	eq
 8005c20:	6819      	ldreq	r1, [r3, #0]
 8005c22:	685b      	ldreq	r3, [r3, #4]
 8005c24:	1809      	addeq	r1, r1, r0
 8005c26:	6021      	streq	r1, [r4, #0]
 8005c28:	6063      	str	r3, [r4, #4]
 8005c2a:	6054      	str	r4, [r2, #4]
 8005c2c:	e7cb      	b.n	8005bc6 <_free_r+0x22>
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	20000478 	.word	0x20000478

08005c34 <rshift>:
 8005c34:	6903      	ldr	r3, [r0, #16]
 8005c36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005c3e:	f100 0414 	add.w	r4, r0, #20
 8005c42:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005c46:	dd46      	ble.n	8005cd6 <rshift+0xa2>
 8005c48:	f011 011f 	ands.w	r1, r1, #31
 8005c4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005c50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005c54:	d10c      	bne.n	8005c70 <rshift+0x3c>
 8005c56:	4629      	mov	r1, r5
 8005c58:	f100 0710 	add.w	r7, r0, #16
 8005c5c:	42b1      	cmp	r1, r6
 8005c5e:	d335      	bcc.n	8005ccc <rshift+0x98>
 8005c60:	1a9b      	subs	r3, r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	1eea      	subs	r2, r5, #3
 8005c66:	4296      	cmp	r6, r2
 8005c68:	bf38      	it	cc
 8005c6a:	2300      	movcc	r3, #0
 8005c6c:	4423      	add	r3, r4
 8005c6e:	e015      	b.n	8005c9c <rshift+0x68>
 8005c70:	46a1      	mov	r9, r4
 8005c72:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005c76:	f1c1 0820 	rsb	r8, r1, #32
 8005c7a:	40cf      	lsrs	r7, r1
 8005c7c:	f105 0e04 	add.w	lr, r5, #4
 8005c80:	4576      	cmp	r6, lr
 8005c82:	46f4      	mov	ip, lr
 8005c84:	d816      	bhi.n	8005cb4 <rshift+0x80>
 8005c86:	1a9a      	subs	r2, r3, r2
 8005c88:	0092      	lsls	r2, r2, #2
 8005c8a:	3a04      	subs	r2, #4
 8005c8c:	3501      	adds	r5, #1
 8005c8e:	42ae      	cmp	r6, r5
 8005c90:	bf38      	it	cc
 8005c92:	2200      	movcc	r2, #0
 8005c94:	18a3      	adds	r3, r4, r2
 8005c96:	50a7      	str	r7, [r4, r2]
 8005c98:	b107      	cbz	r7, 8005c9c <rshift+0x68>
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	eba3 0204 	sub.w	r2, r3, r4
 8005ca2:	bf08      	it	eq
 8005ca4:	2300      	moveq	r3, #0
 8005ca6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005caa:	6102      	str	r2, [r0, #16]
 8005cac:	bf08      	it	eq
 8005cae:	6143      	streq	r3, [r0, #20]
 8005cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cb4:	f8dc c000 	ldr.w	ip, [ip]
 8005cb8:	fa0c fc08 	lsl.w	ip, ip, r8
 8005cbc:	ea4c 0707 	orr.w	r7, ip, r7
 8005cc0:	f849 7b04 	str.w	r7, [r9], #4
 8005cc4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005cc8:	40cf      	lsrs	r7, r1
 8005cca:	e7d9      	b.n	8005c80 <rshift+0x4c>
 8005ccc:	f851 cb04 	ldr.w	ip, [r1], #4
 8005cd0:	f847 cf04 	str.w	ip, [r7, #4]!
 8005cd4:	e7c2      	b.n	8005c5c <rshift+0x28>
 8005cd6:	4623      	mov	r3, r4
 8005cd8:	e7e0      	b.n	8005c9c <rshift+0x68>

08005cda <__hexdig_fun>:
 8005cda:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8005cde:	2b09      	cmp	r3, #9
 8005ce0:	d802      	bhi.n	8005ce8 <__hexdig_fun+0xe>
 8005ce2:	3820      	subs	r0, #32
 8005ce4:	b2c0      	uxtb	r0, r0
 8005ce6:	4770      	bx	lr
 8005ce8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8005cec:	2b05      	cmp	r3, #5
 8005cee:	d801      	bhi.n	8005cf4 <__hexdig_fun+0x1a>
 8005cf0:	3847      	subs	r0, #71	@ 0x47
 8005cf2:	e7f7      	b.n	8005ce4 <__hexdig_fun+0xa>
 8005cf4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8005cf8:	2b05      	cmp	r3, #5
 8005cfa:	d801      	bhi.n	8005d00 <__hexdig_fun+0x26>
 8005cfc:	3827      	subs	r0, #39	@ 0x27
 8005cfe:	e7f1      	b.n	8005ce4 <__hexdig_fun+0xa>
 8005d00:	2000      	movs	r0, #0
 8005d02:	4770      	bx	lr

08005d04 <__gethex>:
 8005d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d08:	468a      	mov	sl, r1
 8005d0a:	4690      	mov	r8, r2
 8005d0c:	b085      	sub	sp, #20
 8005d0e:	9302      	str	r3, [sp, #8]
 8005d10:	680b      	ldr	r3, [r1, #0]
 8005d12:	9001      	str	r0, [sp, #4]
 8005d14:	1c9c      	adds	r4, r3, #2
 8005d16:	46a1      	mov	r9, r4
 8005d18:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005d1c:	2830      	cmp	r0, #48	@ 0x30
 8005d1e:	d0fa      	beq.n	8005d16 <__gethex+0x12>
 8005d20:	eba9 0303 	sub.w	r3, r9, r3
 8005d24:	f1a3 0b02 	sub.w	fp, r3, #2
 8005d28:	f7ff ffd7 	bl	8005cda <__hexdig_fun>
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d168      	bne.n	8005e04 <__gethex+0x100>
 8005d32:	2201      	movs	r2, #1
 8005d34:	4648      	mov	r0, r9
 8005d36:	499f      	ldr	r1, [pc, #636]	@ (8005fb4 <__gethex+0x2b0>)
 8005d38:	f7ff fe1b 	bl	8005972 <strncmp>
 8005d3c:	4607      	mov	r7, r0
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d167      	bne.n	8005e12 <__gethex+0x10e>
 8005d42:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005d46:	4626      	mov	r6, r4
 8005d48:	f7ff ffc7 	bl	8005cda <__hexdig_fun>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d062      	beq.n	8005e16 <__gethex+0x112>
 8005d50:	4623      	mov	r3, r4
 8005d52:	7818      	ldrb	r0, [r3, #0]
 8005d54:	4699      	mov	r9, r3
 8005d56:	2830      	cmp	r0, #48	@ 0x30
 8005d58:	f103 0301 	add.w	r3, r3, #1
 8005d5c:	d0f9      	beq.n	8005d52 <__gethex+0x4e>
 8005d5e:	f7ff ffbc 	bl	8005cda <__hexdig_fun>
 8005d62:	fab0 f580 	clz	r5, r0
 8005d66:	f04f 0b01 	mov.w	fp, #1
 8005d6a:	096d      	lsrs	r5, r5, #5
 8005d6c:	464a      	mov	r2, r9
 8005d6e:	4616      	mov	r6, r2
 8005d70:	7830      	ldrb	r0, [r6, #0]
 8005d72:	3201      	adds	r2, #1
 8005d74:	f7ff ffb1 	bl	8005cda <__hexdig_fun>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	d1f8      	bne.n	8005d6e <__gethex+0x6a>
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	4630      	mov	r0, r6
 8005d80:	498c      	ldr	r1, [pc, #560]	@ (8005fb4 <__gethex+0x2b0>)
 8005d82:	f7ff fdf6 	bl	8005972 <strncmp>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d13f      	bne.n	8005e0a <__gethex+0x106>
 8005d8a:	b944      	cbnz	r4, 8005d9e <__gethex+0x9a>
 8005d8c:	1c74      	adds	r4, r6, #1
 8005d8e:	4622      	mov	r2, r4
 8005d90:	4616      	mov	r6, r2
 8005d92:	7830      	ldrb	r0, [r6, #0]
 8005d94:	3201      	adds	r2, #1
 8005d96:	f7ff ffa0 	bl	8005cda <__hexdig_fun>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d1f8      	bne.n	8005d90 <__gethex+0x8c>
 8005d9e:	1ba4      	subs	r4, r4, r6
 8005da0:	00a7      	lsls	r7, r4, #2
 8005da2:	7833      	ldrb	r3, [r6, #0]
 8005da4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005da8:	2b50      	cmp	r3, #80	@ 0x50
 8005daa:	d13e      	bne.n	8005e2a <__gethex+0x126>
 8005dac:	7873      	ldrb	r3, [r6, #1]
 8005dae:	2b2b      	cmp	r3, #43	@ 0x2b
 8005db0:	d033      	beq.n	8005e1a <__gethex+0x116>
 8005db2:	2b2d      	cmp	r3, #45	@ 0x2d
 8005db4:	d034      	beq.n	8005e20 <__gethex+0x11c>
 8005db6:	2400      	movs	r4, #0
 8005db8:	1c71      	adds	r1, r6, #1
 8005dba:	7808      	ldrb	r0, [r1, #0]
 8005dbc:	f7ff ff8d 	bl	8005cda <__hexdig_fun>
 8005dc0:	1e43      	subs	r3, r0, #1
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b18      	cmp	r3, #24
 8005dc6:	d830      	bhi.n	8005e2a <__gethex+0x126>
 8005dc8:	f1a0 0210 	sub.w	r2, r0, #16
 8005dcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005dd0:	f7ff ff83 	bl	8005cda <__hexdig_fun>
 8005dd4:	f100 3cff 	add.w	ip, r0, #4294967295
 8005dd8:	fa5f fc8c 	uxtb.w	ip, ip
 8005ddc:	f1bc 0f18 	cmp.w	ip, #24
 8005de0:	f04f 030a 	mov.w	r3, #10
 8005de4:	d91e      	bls.n	8005e24 <__gethex+0x120>
 8005de6:	b104      	cbz	r4, 8005dea <__gethex+0xe6>
 8005de8:	4252      	negs	r2, r2
 8005dea:	4417      	add	r7, r2
 8005dec:	f8ca 1000 	str.w	r1, [sl]
 8005df0:	b1ed      	cbz	r5, 8005e2e <__gethex+0x12a>
 8005df2:	f1bb 0f00 	cmp.w	fp, #0
 8005df6:	bf0c      	ite	eq
 8005df8:	2506      	moveq	r5, #6
 8005dfa:	2500      	movne	r5, #0
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	b005      	add	sp, #20
 8005e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e04:	2500      	movs	r5, #0
 8005e06:	462c      	mov	r4, r5
 8005e08:	e7b0      	b.n	8005d6c <__gethex+0x68>
 8005e0a:	2c00      	cmp	r4, #0
 8005e0c:	d1c7      	bne.n	8005d9e <__gethex+0x9a>
 8005e0e:	4627      	mov	r7, r4
 8005e10:	e7c7      	b.n	8005da2 <__gethex+0x9e>
 8005e12:	464e      	mov	r6, r9
 8005e14:	462f      	mov	r7, r5
 8005e16:	2501      	movs	r5, #1
 8005e18:	e7c3      	b.n	8005da2 <__gethex+0x9e>
 8005e1a:	2400      	movs	r4, #0
 8005e1c:	1cb1      	adds	r1, r6, #2
 8005e1e:	e7cc      	b.n	8005dba <__gethex+0xb6>
 8005e20:	2401      	movs	r4, #1
 8005e22:	e7fb      	b.n	8005e1c <__gethex+0x118>
 8005e24:	fb03 0002 	mla	r0, r3, r2, r0
 8005e28:	e7ce      	b.n	8005dc8 <__gethex+0xc4>
 8005e2a:	4631      	mov	r1, r6
 8005e2c:	e7de      	b.n	8005dec <__gethex+0xe8>
 8005e2e:	4629      	mov	r1, r5
 8005e30:	eba6 0309 	sub.w	r3, r6, r9
 8005e34:	3b01      	subs	r3, #1
 8005e36:	2b07      	cmp	r3, #7
 8005e38:	dc0a      	bgt.n	8005e50 <__gethex+0x14c>
 8005e3a:	9801      	ldr	r0, [sp, #4]
 8005e3c:	f000 fafc 	bl	8006438 <_Balloc>
 8005e40:	4604      	mov	r4, r0
 8005e42:	b940      	cbnz	r0, 8005e56 <__gethex+0x152>
 8005e44:	4602      	mov	r2, r0
 8005e46:	21e4      	movs	r1, #228	@ 0xe4
 8005e48:	4b5b      	ldr	r3, [pc, #364]	@ (8005fb8 <__gethex+0x2b4>)
 8005e4a:	485c      	ldr	r0, [pc, #368]	@ (8005fbc <__gethex+0x2b8>)
 8005e4c:	f7ff fe8c 	bl	8005b68 <__assert_func>
 8005e50:	3101      	adds	r1, #1
 8005e52:	105b      	asrs	r3, r3, #1
 8005e54:	e7ef      	b.n	8005e36 <__gethex+0x132>
 8005e56:	2300      	movs	r3, #0
 8005e58:	f100 0a14 	add.w	sl, r0, #20
 8005e5c:	4655      	mov	r5, sl
 8005e5e:	469b      	mov	fp, r3
 8005e60:	45b1      	cmp	r9, r6
 8005e62:	d337      	bcc.n	8005ed4 <__gethex+0x1d0>
 8005e64:	f845 bb04 	str.w	fp, [r5], #4
 8005e68:	eba5 050a 	sub.w	r5, r5, sl
 8005e6c:	10ad      	asrs	r5, r5, #2
 8005e6e:	6125      	str	r5, [r4, #16]
 8005e70:	4658      	mov	r0, fp
 8005e72:	f000 fbd3 	bl	800661c <__hi0bits>
 8005e76:	016d      	lsls	r5, r5, #5
 8005e78:	f8d8 6000 	ldr.w	r6, [r8]
 8005e7c:	1a2d      	subs	r5, r5, r0
 8005e7e:	42b5      	cmp	r5, r6
 8005e80:	dd54      	ble.n	8005f2c <__gethex+0x228>
 8005e82:	1bad      	subs	r5, r5, r6
 8005e84:	4629      	mov	r1, r5
 8005e86:	4620      	mov	r0, r4
 8005e88:	f000 ff55 	bl	8006d36 <__any_on>
 8005e8c:	4681      	mov	r9, r0
 8005e8e:	b178      	cbz	r0, 8005eb0 <__gethex+0x1ac>
 8005e90:	f04f 0901 	mov.w	r9, #1
 8005e94:	1e6b      	subs	r3, r5, #1
 8005e96:	1159      	asrs	r1, r3, #5
 8005e98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005e9c:	f003 021f 	and.w	r2, r3, #31
 8005ea0:	fa09 f202 	lsl.w	r2, r9, r2
 8005ea4:	420a      	tst	r2, r1
 8005ea6:	d003      	beq.n	8005eb0 <__gethex+0x1ac>
 8005ea8:	454b      	cmp	r3, r9
 8005eaa:	dc36      	bgt.n	8005f1a <__gethex+0x216>
 8005eac:	f04f 0902 	mov.w	r9, #2
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f7ff febe 	bl	8005c34 <rshift>
 8005eb8:	442f      	add	r7, r5
 8005eba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ebe:	42bb      	cmp	r3, r7
 8005ec0:	da42      	bge.n	8005f48 <__gethex+0x244>
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	9801      	ldr	r0, [sp, #4]
 8005ec6:	f000 faf7 	bl	80064b8 <_Bfree>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ece:	25a3      	movs	r5, #163	@ 0xa3
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	e793      	b.n	8005dfc <__gethex+0xf8>
 8005ed4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005ed8:	2a2e      	cmp	r2, #46	@ 0x2e
 8005eda:	d012      	beq.n	8005f02 <__gethex+0x1fe>
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d104      	bne.n	8005eea <__gethex+0x1e6>
 8005ee0:	f845 bb04 	str.w	fp, [r5], #4
 8005ee4:	f04f 0b00 	mov.w	fp, #0
 8005ee8:	465b      	mov	r3, fp
 8005eea:	7830      	ldrb	r0, [r6, #0]
 8005eec:	9303      	str	r3, [sp, #12]
 8005eee:	f7ff fef4 	bl	8005cda <__hexdig_fun>
 8005ef2:	9b03      	ldr	r3, [sp, #12]
 8005ef4:	f000 000f 	and.w	r0, r0, #15
 8005ef8:	4098      	lsls	r0, r3
 8005efa:	ea4b 0b00 	orr.w	fp, fp, r0
 8005efe:	3304      	adds	r3, #4
 8005f00:	e7ae      	b.n	8005e60 <__gethex+0x15c>
 8005f02:	45b1      	cmp	r9, r6
 8005f04:	d8ea      	bhi.n	8005edc <__gethex+0x1d8>
 8005f06:	2201      	movs	r2, #1
 8005f08:	4630      	mov	r0, r6
 8005f0a:	492a      	ldr	r1, [pc, #168]	@ (8005fb4 <__gethex+0x2b0>)
 8005f0c:	9303      	str	r3, [sp, #12]
 8005f0e:	f7ff fd30 	bl	8005972 <strncmp>
 8005f12:	9b03      	ldr	r3, [sp, #12]
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d1e1      	bne.n	8005edc <__gethex+0x1d8>
 8005f18:	e7a2      	b.n	8005e60 <__gethex+0x15c>
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	1ea9      	subs	r1, r5, #2
 8005f1e:	f000 ff0a 	bl	8006d36 <__any_on>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d0c2      	beq.n	8005eac <__gethex+0x1a8>
 8005f26:	f04f 0903 	mov.w	r9, #3
 8005f2a:	e7c1      	b.n	8005eb0 <__gethex+0x1ac>
 8005f2c:	da09      	bge.n	8005f42 <__gethex+0x23e>
 8005f2e:	1b75      	subs	r5, r6, r5
 8005f30:	4621      	mov	r1, r4
 8005f32:	462a      	mov	r2, r5
 8005f34:	9801      	ldr	r0, [sp, #4]
 8005f36:	f000 fccf 	bl	80068d8 <__lshift>
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	1b7f      	subs	r7, r7, r5
 8005f3e:	f100 0a14 	add.w	sl, r0, #20
 8005f42:	f04f 0900 	mov.w	r9, #0
 8005f46:	e7b8      	b.n	8005eba <__gethex+0x1b6>
 8005f48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005f4c:	42bd      	cmp	r5, r7
 8005f4e:	dd6f      	ble.n	8006030 <__gethex+0x32c>
 8005f50:	1bed      	subs	r5, r5, r7
 8005f52:	42ae      	cmp	r6, r5
 8005f54:	dc34      	bgt.n	8005fc0 <__gethex+0x2bc>
 8005f56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d022      	beq.n	8005fa4 <__gethex+0x2a0>
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d024      	beq.n	8005fac <__gethex+0x2a8>
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d115      	bne.n	8005f92 <__gethex+0x28e>
 8005f66:	42ae      	cmp	r6, r5
 8005f68:	d113      	bne.n	8005f92 <__gethex+0x28e>
 8005f6a:	2e01      	cmp	r6, #1
 8005f6c:	d10b      	bne.n	8005f86 <__gethex+0x282>
 8005f6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005f72:	9a02      	ldr	r2, [sp, #8]
 8005f74:	2562      	movs	r5, #98	@ 0x62
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	2301      	movs	r3, #1
 8005f7a:	6123      	str	r3, [r4, #16]
 8005f7c:	f8ca 3000 	str.w	r3, [sl]
 8005f80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f82:	601c      	str	r4, [r3, #0]
 8005f84:	e73a      	b.n	8005dfc <__gethex+0xf8>
 8005f86:	4620      	mov	r0, r4
 8005f88:	1e71      	subs	r1, r6, #1
 8005f8a:	f000 fed4 	bl	8006d36 <__any_on>
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d1ed      	bne.n	8005f6e <__gethex+0x26a>
 8005f92:	4621      	mov	r1, r4
 8005f94:	9801      	ldr	r0, [sp, #4]
 8005f96:	f000 fa8f 	bl	80064b8 <_Bfree>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f9e:	2550      	movs	r5, #80	@ 0x50
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	e72b      	b.n	8005dfc <__gethex+0xf8>
 8005fa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f3      	bne.n	8005f92 <__gethex+0x28e>
 8005faa:	e7e0      	b.n	8005f6e <__gethex+0x26a>
 8005fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1dd      	bne.n	8005f6e <__gethex+0x26a>
 8005fb2:	e7ee      	b.n	8005f92 <__gethex+0x28e>
 8005fb4:	08007896 	.word	0x08007896
 8005fb8:	08007959 	.word	0x08007959
 8005fbc:	0800796a 	.word	0x0800796a
 8005fc0:	1e6f      	subs	r7, r5, #1
 8005fc2:	f1b9 0f00 	cmp.w	r9, #0
 8005fc6:	d130      	bne.n	800602a <__gethex+0x326>
 8005fc8:	b127      	cbz	r7, 8005fd4 <__gethex+0x2d0>
 8005fca:	4639      	mov	r1, r7
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f000 feb2 	bl	8006d36 <__any_on>
 8005fd2:	4681      	mov	r9, r0
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	1b76      	subs	r6, r6, r5
 8005fda:	2502      	movs	r5, #2
 8005fdc:	117a      	asrs	r2, r7, #5
 8005fde:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005fe2:	f007 071f 	and.w	r7, r7, #31
 8005fe6:	40bb      	lsls	r3, r7
 8005fe8:	4213      	tst	r3, r2
 8005fea:	4620      	mov	r0, r4
 8005fec:	bf18      	it	ne
 8005fee:	f049 0902 	orrne.w	r9, r9, #2
 8005ff2:	f7ff fe1f 	bl	8005c34 <rshift>
 8005ff6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8005ffa:	f1b9 0f00 	cmp.w	r9, #0
 8005ffe:	d047      	beq.n	8006090 <__gethex+0x38c>
 8006000:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d015      	beq.n	8006034 <__gethex+0x330>
 8006008:	2b03      	cmp	r3, #3
 800600a:	d017      	beq.n	800603c <__gethex+0x338>
 800600c:	2b01      	cmp	r3, #1
 800600e:	d109      	bne.n	8006024 <__gethex+0x320>
 8006010:	f019 0f02 	tst.w	r9, #2
 8006014:	d006      	beq.n	8006024 <__gethex+0x320>
 8006016:	f8da 3000 	ldr.w	r3, [sl]
 800601a:	ea49 0903 	orr.w	r9, r9, r3
 800601e:	f019 0f01 	tst.w	r9, #1
 8006022:	d10e      	bne.n	8006042 <__gethex+0x33e>
 8006024:	f045 0510 	orr.w	r5, r5, #16
 8006028:	e032      	b.n	8006090 <__gethex+0x38c>
 800602a:	f04f 0901 	mov.w	r9, #1
 800602e:	e7d1      	b.n	8005fd4 <__gethex+0x2d0>
 8006030:	2501      	movs	r5, #1
 8006032:	e7e2      	b.n	8005ffa <__gethex+0x2f6>
 8006034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006036:	f1c3 0301 	rsb	r3, r3, #1
 800603a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800603c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0f0      	beq.n	8006024 <__gethex+0x320>
 8006042:	f04f 0c00 	mov.w	ip, #0
 8006046:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800604a:	f104 0314 	add.w	r3, r4, #20
 800604e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006052:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006056:	4618      	mov	r0, r3
 8006058:	f853 2b04 	ldr.w	r2, [r3], #4
 800605c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006060:	d01b      	beq.n	800609a <__gethex+0x396>
 8006062:	3201      	adds	r2, #1
 8006064:	6002      	str	r2, [r0, #0]
 8006066:	2d02      	cmp	r5, #2
 8006068:	f104 0314 	add.w	r3, r4, #20
 800606c:	d13c      	bne.n	80060e8 <__gethex+0x3e4>
 800606e:	f8d8 2000 	ldr.w	r2, [r8]
 8006072:	3a01      	subs	r2, #1
 8006074:	42b2      	cmp	r2, r6
 8006076:	d109      	bne.n	800608c <__gethex+0x388>
 8006078:	2201      	movs	r2, #1
 800607a:	1171      	asrs	r1, r6, #5
 800607c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006080:	f006 061f 	and.w	r6, r6, #31
 8006084:	fa02 f606 	lsl.w	r6, r2, r6
 8006088:	421e      	tst	r6, r3
 800608a:	d13a      	bne.n	8006102 <__gethex+0x3fe>
 800608c:	f045 0520 	orr.w	r5, r5, #32
 8006090:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006092:	601c      	str	r4, [r3, #0]
 8006094:	9b02      	ldr	r3, [sp, #8]
 8006096:	601f      	str	r7, [r3, #0]
 8006098:	e6b0      	b.n	8005dfc <__gethex+0xf8>
 800609a:	4299      	cmp	r1, r3
 800609c:	f843 cc04 	str.w	ip, [r3, #-4]
 80060a0:	d8d9      	bhi.n	8006056 <__gethex+0x352>
 80060a2:	68a3      	ldr	r3, [r4, #8]
 80060a4:	459b      	cmp	fp, r3
 80060a6:	db17      	blt.n	80060d8 <__gethex+0x3d4>
 80060a8:	6861      	ldr	r1, [r4, #4]
 80060aa:	9801      	ldr	r0, [sp, #4]
 80060ac:	3101      	adds	r1, #1
 80060ae:	f000 f9c3 	bl	8006438 <_Balloc>
 80060b2:	4681      	mov	r9, r0
 80060b4:	b918      	cbnz	r0, 80060be <__gethex+0x3ba>
 80060b6:	4602      	mov	r2, r0
 80060b8:	2184      	movs	r1, #132	@ 0x84
 80060ba:	4b19      	ldr	r3, [pc, #100]	@ (8006120 <__gethex+0x41c>)
 80060bc:	e6c5      	b.n	8005e4a <__gethex+0x146>
 80060be:	6922      	ldr	r2, [r4, #16]
 80060c0:	f104 010c 	add.w	r1, r4, #12
 80060c4:	3202      	adds	r2, #2
 80060c6:	0092      	lsls	r2, r2, #2
 80060c8:	300c      	adds	r0, #12
 80060ca:	f7ff fd34 	bl	8005b36 <memcpy>
 80060ce:	4621      	mov	r1, r4
 80060d0:	9801      	ldr	r0, [sp, #4]
 80060d2:	f000 f9f1 	bl	80064b8 <_Bfree>
 80060d6:	464c      	mov	r4, r9
 80060d8:	6923      	ldr	r3, [r4, #16]
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	6122      	str	r2, [r4, #16]
 80060de:	2201      	movs	r2, #1
 80060e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060e4:	615a      	str	r2, [r3, #20]
 80060e6:	e7be      	b.n	8006066 <__gethex+0x362>
 80060e8:	6922      	ldr	r2, [r4, #16]
 80060ea:	455a      	cmp	r2, fp
 80060ec:	dd0b      	ble.n	8006106 <__gethex+0x402>
 80060ee:	2101      	movs	r1, #1
 80060f0:	4620      	mov	r0, r4
 80060f2:	f7ff fd9f 	bl	8005c34 <rshift>
 80060f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060fa:	3701      	adds	r7, #1
 80060fc:	42bb      	cmp	r3, r7
 80060fe:	f6ff aee0 	blt.w	8005ec2 <__gethex+0x1be>
 8006102:	2501      	movs	r5, #1
 8006104:	e7c2      	b.n	800608c <__gethex+0x388>
 8006106:	f016 061f 	ands.w	r6, r6, #31
 800610a:	d0fa      	beq.n	8006102 <__gethex+0x3fe>
 800610c:	4453      	add	r3, sl
 800610e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006112:	f000 fa83 	bl	800661c <__hi0bits>
 8006116:	f1c6 0620 	rsb	r6, r6, #32
 800611a:	42b0      	cmp	r0, r6
 800611c:	dbe7      	blt.n	80060ee <__gethex+0x3ea>
 800611e:	e7f0      	b.n	8006102 <__gethex+0x3fe>
 8006120:	08007959 	.word	0x08007959

08006124 <L_shift>:
 8006124:	f1c2 0208 	rsb	r2, r2, #8
 8006128:	0092      	lsls	r2, r2, #2
 800612a:	b570      	push	{r4, r5, r6, lr}
 800612c:	f1c2 0620 	rsb	r6, r2, #32
 8006130:	6843      	ldr	r3, [r0, #4]
 8006132:	6804      	ldr	r4, [r0, #0]
 8006134:	fa03 f506 	lsl.w	r5, r3, r6
 8006138:	432c      	orrs	r4, r5
 800613a:	40d3      	lsrs	r3, r2
 800613c:	6004      	str	r4, [r0, #0]
 800613e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006142:	4288      	cmp	r0, r1
 8006144:	d3f4      	bcc.n	8006130 <L_shift+0xc>
 8006146:	bd70      	pop	{r4, r5, r6, pc}

08006148 <__match>:
 8006148:	b530      	push	{r4, r5, lr}
 800614a:	6803      	ldr	r3, [r0, #0]
 800614c:	3301      	adds	r3, #1
 800614e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006152:	b914      	cbnz	r4, 800615a <__match+0x12>
 8006154:	6003      	str	r3, [r0, #0]
 8006156:	2001      	movs	r0, #1
 8006158:	bd30      	pop	{r4, r5, pc}
 800615a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800615e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006162:	2d19      	cmp	r5, #25
 8006164:	bf98      	it	ls
 8006166:	3220      	addls	r2, #32
 8006168:	42a2      	cmp	r2, r4
 800616a:	d0f0      	beq.n	800614e <__match+0x6>
 800616c:	2000      	movs	r0, #0
 800616e:	e7f3      	b.n	8006158 <__match+0x10>

08006170 <__hexnan>:
 8006170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	2500      	movs	r5, #0
 8006176:	680b      	ldr	r3, [r1, #0]
 8006178:	4682      	mov	sl, r0
 800617a:	115e      	asrs	r6, r3, #5
 800617c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006180:	f013 031f 	ands.w	r3, r3, #31
 8006184:	bf18      	it	ne
 8006186:	3604      	addne	r6, #4
 8006188:	1f37      	subs	r7, r6, #4
 800618a:	4690      	mov	r8, r2
 800618c:	46b9      	mov	r9, r7
 800618e:	463c      	mov	r4, r7
 8006190:	46ab      	mov	fp, r5
 8006192:	b087      	sub	sp, #28
 8006194:	6801      	ldr	r1, [r0, #0]
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	f846 5c04 	str.w	r5, [r6, #-4]
 800619c:	9502      	str	r5, [sp, #8]
 800619e:	784a      	ldrb	r2, [r1, #1]
 80061a0:	1c4b      	adds	r3, r1, #1
 80061a2:	9303      	str	r3, [sp, #12]
 80061a4:	b342      	cbz	r2, 80061f8 <__hexnan+0x88>
 80061a6:	4610      	mov	r0, r2
 80061a8:	9105      	str	r1, [sp, #20]
 80061aa:	9204      	str	r2, [sp, #16]
 80061ac:	f7ff fd95 	bl	8005cda <__hexdig_fun>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d151      	bne.n	8006258 <__hexnan+0xe8>
 80061b4:	9a04      	ldr	r2, [sp, #16]
 80061b6:	9905      	ldr	r1, [sp, #20]
 80061b8:	2a20      	cmp	r2, #32
 80061ba:	d818      	bhi.n	80061ee <__hexnan+0x7e>
 80061bc:	9b02      	ldr	r3, [sp, #8]
 80061be:	459b      	cmp	fp, r3
 80061c0:	dd13      	ble.n	80061ea <__hexnan+0x7a>
 80061c2:	454c      	cmp	r4, r9
 80061c4:	d206      	bcs.n	80061d4 <__hexnan+0x64>
 80061c6:	2d07      	cmp	r5, #7
 80061c8:	dc04      	bgt.n	80061d4 <__hexnan+0x64>
 80061ca:	462a      	mov	r2, r5
 80061cc:	4649      	mov	r1, r9
 80061ce:	4620      	mov	r0, r4
 80061d0:	f7ff ffa8 	bl	8006124 <L_shift>
 80061d4:	4544      	cmp	r4, r8
 80061d6:	d952      	bls.n	800627e <__hexnan+0x10e>
 80061d8:	2300      	movs	r3, #0
 80061da:	f1a4 0904 	sub.w	r9, r4, #4
 80061de:	f844 3c04 	str.w	r3, [r4, #-4]
 80061e2:	461d      	mov	r5, r3
 80061e4:	464c      	mov	r4, r9
 80061e6:	f8cd b008 	str.w	fp, [sp, #8]
 80061ea:	9903      	ldr	r1, [sp, #12]
 80061ec:	e7d7      	b.n	800619e <__hexnan+0x2e>
 80061ee:	2a29      	cmp	r2, #41	@ 0x29
 80061f0:	d157      	bne.n	80062a2 <__hexnan+0x132>
 80061f2:	3102      	adds	r1, #2
 80061f4:	f8ca 1000 	str.w	r1, [sl]
 80061f8:	f1bb 0f00 	cmp.w	fp, #0
 80061fc:	d051      	beq.n	80062a2 <__hexnan+0x132>
 80061fe:	454c      	cmp	r4, r9
 8006200:	d206      	bcs.n	8006210 <__hexnan+0xa0>
 8006202:	2d07      	cmp	r5, #7
 8006204:	dc04      	bgt.n	8006210 <__hexnan+0xa0>
 8006206:	462a      	mov	r2, r5
 8006208:	4649      	mov	r1, r9
 800620a:	4620      	mov	r0, r4
 800620c:	f7ff ff8a 	bl	8006124 <L_shift>
 8006210:	4544      	cmp	r4, r8
 8006212:	d936      	bls.n	8006282 <__hexnan+0x112>
 8006214:	4623      	mov	r3, r4
 8006216:	f1a8 0204 	sub.w	r2, r8, #4
 800621a:	f853 1b04 	ldr.w	r1, [r3], #4
 800621e:	429f      	cmp	r7, r3
 8006220:	f842 1f04 	str.w	r1, [r2, #4]!
 8006224:	d2f9      	bcs.n	800621a <__hexnan+0xaa>
 8006226:	1b3b      	subs	r3, r7, r4
 8006228:	f023 0303 	bic.w	r3, r3, #3
 800622c:	3304      	adds	r3, #4
 800622e:	3401      	adds	r4, #1
 8006230:	3e03      	subs	r6, #3
 8006232:	42b4      	cmp	r4, r6
 8006234:	bf88      	it	hi
 8006236:	2304      	movhi	r3, #4
 8006238:	2200      	movs	r2, #0
 800623a:	4443      	add	r3, r8
 800623c:	f843 2b04 	str.w	r2, [r3], #4
 8006240:	429f      	cmp	r7, r3
 8006242:	d2fb      	bcs.n	800623c <__hexnan+0xcc>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	b91b      	cbnz	r3, 8006250 <__hexnan+0xe0>
 8006248:	4547      	cmp	r7, r8
 800624a:	d128      	bne.n	800629e <__hexnan+0x12e>
 800624c:	2301      	movs	r3, #1
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	2005      	movs	r0, #5
 8006252:	b007      	add	sp, #28
 8006254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006258:	3501      	adds	r5, #1
 800625a:	2d08      	cmp	r5, #8
 800625c:	f10b 0b01 	add.w	fp, fp, #1
 8006260:	dd06      	ble.n	8006270 <__hexnan+0x100>
 8006262:	4544      	cmp	r4, r8
 8006264:	d9c1      	bls.n	80061ea <__hexnan+0x7a>
 8006266:	2300      	movs	r3, #0
 8006268:	2501      	movs	r5, #1
 800626a:	f844 3c04 	str.w	r3, [r4, #-4]
 800626e:	3c04      	subs	r4, #4
 8006270:	6822      	ldr	r2, [r4, #0]
 8006272:	f000 000f 	and.w	r0, r0, #15
 8006276:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800627a:	6020      	str	r0, [r4, #0]
 800627c:	e7b5      	b.n	80061ea <__hexnan+0x7a>
 800627e:	2508      	movs	r5, #8
 8006280:	e7b3      	b.n	80061ea <__hexnan+0x7a>
 8006282:	9b01      	ldr	r3, [sp, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0dd      	beq.n	8006244 <__hexnan+0xd4>
 8006288:	f04f 32ff 	mov.w	r2, #4294967295
 800628c:	f1c3 0320 	rsb	r3, r3, #32
 8006290:	40da      	lsrs	r2, r3
 8006292:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006296:	4013      	ands	r3, r2
 8006298:	f846 3c04 	str.w	r3, [r6, #-4]
 800629c:	e7d2      	b.n	8006244 <__hexnan+0xd4>
 800629e:	3f04      	subs	r7, #4
 80062a0:	e7d0      	b.n	8006244 <__hexnan+0xd4>
 80062a2:	2004      	movs	r0, #4
 80062a4:	e7d5      	b.n	8006252 <__hexnan+0xe2>
	...

080062a8 <malloc>:
 80062a8:	4b02      	ldr	r3, [pc, #8]	@ (80062b4 <malloc+0xc>)
 80062aa:	4601      	mov	r1, r0
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	f000 b825 	b.w	80062fc <_malloc_r>
 80062b2:	bf00      	nop
 80062b4:	20000194 	.word	0x20000194

080062b8 <sbrk_aligned>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	4e0f      	ldr	r6, [pc, #60]	@ (80062f8 <sbrk_aligned+0x40>)
 80062bc:	460c      	mov	r4, r1
 80062be:	6831      	ldr	r1, [r6, #0]
 80062c0:	4605      	mov	r5, r0
 80062c2:	b911      	cbnz	r1, 80062ca <sbrk_aligned+0x12>
 80062c4:	f000 fe20 	bl	8006f08 <_sbrk_r>
 80062c8:	6030      	str	r0, [r6, #0]
 80062ca:	4621      	mov	r1, r4
 80062cc:	4628      	mov	r0, r5
 80062ce:	f000 fe1b 	bl	8006f08 <_sbrk_r>
 80062d2:	1c43      	adds	r3, r0, #1
 80062d4:	d103      	bne.n	80062de <sbrk_aligned+0x26>
 80062d6:	f04f 34ff 	mov.w	r4, #4294967295
 80062da:	4620      	mov	r0, r4
 80062dc:	bd70      	pop	{r4, r5, r6, pc}
 80062de:	1cc4      	adds	r4, r0, #3
 80062e0:	f024 0403 	bic.w	r4, r4, #3
 80062e4:	42a0      	cmp	r0, r4
 80062e6:	d0f8      	beq.n	80062da <sbrk_aligned+0x22>
 80062e8:	1a21      	subs	r1, r4, r0
 80062ea:	4628      	mov	r0, r5
 80062ec:	f000 fe0c 	bl	8006f08 <_sbrk_r>
 80062f0:	3001      	adds	r0, #1
 80062f2:	d1f2      	bne.n	80062da <sbrk_aligned+0x22>
 80062f4:	e7ef      	b.n	80062d6 <sbrk_aligned+0x1e>
 80062f6:	bf00      	nop
 80062f8:	20000474 	.word	0x20000474

080062fc <_malloc_r>:
 80062fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006300:	1ccd      	adds	r5, r1, #3
 8006302:	f025 0503 	bic.w	r5, r5, #3
 8006306:	3508      	adds	r5, #8
 8006308:	2d0c      	cmp	r5, #12
 800630a:	bf38      	it	cc
 800630c:	250c      	movcc	r5, #12
 800630e:	2d00      	cmp	r5, #0
 8006310:	4606      	mov	r6, r0
 8006312:	db01      	blt.n	8006318 <_malloc_r+0x1c>
 8006314:	42a9      	cmp	r1, r5
 8006316:	d904      	bls.n	8006322 <_malloc_r+0x26>
 8006318:	230c      	movs	r3, #12
 800631a:	6033      	str	r3, [r6, #0]
 800631c:	2000      	movs	r0, #0
 800631e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063f8 <_malloc_r+0xfc>
 8006326:	f000 f87b 	bl	8006420 <__malloc_lock>
 800632a:	f8d8 3000 	ldr.w	r3, [r8]
 800632e:	461c      	mov	r4, r3
 8006330:	bb44      	cbnz	r4, 8006384 <_malloc_r+0x88>
 8006332:	4629      	mov	r1, r5
 8006334:	4630      	mov	r0, r6
 8006336:	f7ff ffbf 	bl	80062b8 <sbrk_aligned>
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	4604      	mov	r4, r0
 800633e:	d158      	bne.n	80063f2 <_malloc_r+0xf6>
 8006340:	f8d8 4000 	ldr.w	r4, [r8]
 8006344:	4627      	mov	r7, r4
 8006346:	2f00      	cmp	r7, #0
 8006348:	d143      	bne.n	80063d2 <_malloc_r+0xd6>
 800634a:	2c00      	cmp	r4, #0
 800634c:	d04b      	beq.n	80063e6 <_malloc_r+0xea>
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	4639      	mov	r1, r7
 8006352:	4630      	mov	r0, r6
 8006354:	eb04 0903 	add.w	r9, r4, r3
 8006358:	f000 fdd6 	bl	8006f08 <_sbrk_r>
 800635c:	4581      	cmp	r9, r0
 800635e:	d142      	bne.n	80063e6 <_malloc_r+0xea>
 8006360:	6821      	ldr	r1, [r4, #0]
 8006362:	4630      	mov	r0, r6
 8006364:	1a6d      	subs	r5, r5, r1
 8006366:	4629      	mov	r1, r5
 8006368:	f7ff ffa6 	bl	80062b8 <sbrk_aligned>
 800636c:	3001      	adds	r0, #1
 800636e:	d03a      	beq.n	80063e6 <_malloc_r+0xea>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	442b      	add	r3, r5
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	f8d8 3000 	ldr.w	r3, [r8]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	bb62      	cbnz	r2, 80063d8 <_malloc_r+0xdc>
 800637e:	f8c8 7000 	str.w	r7, [r8]
 8006382:	e00f      	b.n	80063a4 <_malloc_r+0xa8>
 8006384:	6822      	ldr	r2, [r4, #0]
 8006386:	1b52      	subs	r2, r2, r5
 8006388:	d420      	bmi.n	80063cc <_malloc_r+0xd0>
 800638a:	2a0b      	cmp	r2, #11
 800638c:	d917      	bls.n	80063be <_malloc_r+0xc2>
 800638e:	1961      	adds	r1, r4, r5
 8006390:	42a3      	cmp	r3, r4
 8006392:	6025      	str	r5, [r4, #0]
 8006394:	bf18      	it	ne
 8006396:	6059      	strne	r1, [r3, #4]
 8006398:	6863      	ldr	r3, [r4, #4]
 800639a:	bf08      	it	eq
 800639c:	f8c8 1000 	streq.w	r1, [r8]
 80063a0:	5162      	str	r2, [r4, r5]
 80063a2:	604b      	str	r3, [r1, #4]
 80063a4:	4630      	mov	r0, r6
 80063a6:	f000 f841 	bl	800642c <__malloc_unlock>
 80063aa:	f104 000b 	add.w	r0, r4, #11
 80063ae:	1d23      	adds	r3, r4, #4
 80063b0:	f020 0007 	bic.w	r0, r0, #7
 80063b4:	1ac2      	subs	r2, r0, r3
 80063b6:	bf1c      	itt	ne
 80063b8:	1a1b      	subne	r3, r3, r0
 80063ba:	50a3      	strne	r3, [r4, r2]
 80063bc:	e7af      	b.n	800631e <_malloc_r+0x22>
 80063be:	6862      	ldr	r2, [r4, #4]
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	bf0c      	ite	eq
 80063c4:	f8c8 2000 	streq.w	r2, [r8]
 80063c8:	605a      	strne	r2, [r3, #4]
 80063ca:	e7eb      	b.n	80063a4 <_malloc_r+0xa8>
 80063cc:	4623      	mov	r3, r4
 80063ce:	6864      	ldr	r4, [r4, #4]
 80063d0:	e7ae      	b.n	8006330 <_malloc_r+0x34>
 80063d2:	463c      	mov	r4, r7
 80063d4:	687f      	ldr	r7, [r7, #4]
 80063d6:	e7b6      	b.n	8006346 <_malloc_r+0x4a>
 80063d8:	461a      	mov	r2, r3
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	42a3      	cmp	r3, r4
 80063de:	d1fb      	bne.n	80063d8 <_malloc_r+0xdc>
 80063e0:	2300      	movs	r3, #0
 80063e2:	6053      	str	r3, [r2, #4]
 80063e4:	e7de      	b.n	80063a4 <_malloc_r+0xa8>
 80063e6:	230c      	movs	r3, #12
 80063e8:	4630      	mov	r0, r6
 80063ea:	6033      	str	r3, [r6, #0]
 80063ec:	f000 f81e 	bl	800642c <__malloc_unlock>
 80063f0:	e794      	b.n	800631c <_malloc_r+0x20>
 80063f2:	6005      	str	r5, [r0, #0]
 80063f4:	e7d6      	b.n	80063a4 <_malloc_r+0xa8>
 80063f6:	bf00      	nop
 80063f8:	20000478 	.word	0x20000478

080063fc <__ascii_mbtowc>:
 80063fc:	b082      	sub	sp, #8
 80063fe:	b901      	cbnz	r1, 8006402 <__ascii_mbtowc+0x6>
 8006400:	a901      	add	r1, sp, #4
 8006402:	b142      	cbz	r2, 8006416 <__ascii_mbtowc+0x1a>
 8006404:	b14b      	cbz	r3, 800641a <__ascii_mbtowc+0x1e>
 8006406:	7813      	ldrb	r3, [r2, #0]
 8006408:	600b      	str	r3, [r1, #0]
 800640a:	7812      	ldrb	r2, [r2, #0]
 800640c:	1e10      	subs	r0, r2, #0
 800640e:	bf18      	it	ne
 8006410:	2001      	movne	r0, #1
 8006412:	b002      	add	sp, #8
 8006414:	4770      	bx	lr
 8006416:	4610      	mov	r0, r2
 8006418:	e7fb      	b.n	8006412 <__ascii_mbtowc+0x16>
 800641a:	f06f 0001 	mvn.w	r0, #1
 800641e:	e7f8      	b.n	8006412 <__ascii_mbtowc+0x16>

08006420 <__malloc_lock>:
 8006420:	4801      	ldr	r0, [pc, #4]	@ (8006428 <__malloc_lock+0x8>)
 8006422:	f7ff bb86 	b.w	8005b32 <__retarget_lock_acquire_recursive>
 8006426:	bf00      	nop
 8006428:	20000470 	.word	0x20000470

0800642c <__malloc_unlock>:
 800642c:	4801      	ldr	r0, [pc, #4]	@ (8006434 <__malloc_unlock+0x8>)
 800642e:	f7ff bb81 	b.w	8005b34 <__retarget_lock_release_recursive>
 8006432:	bf00      	nop
 8006434:	20000470 	.word	0x20000470

08006438 <_Balloc>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	69c6      	ldr	r6, [r0, #28]
 800643c:	4604      	mov	r4, r0
 800643e:	460d      	mov	r5, r1
 8006440:	b976      	cbnz	r6, 8006460 <_Balloc+0x28>
 8006442:	2010      	movs	r0, #16
 8006444:	f7ff ff30 	bl	80062a8 <malloc>
 8006448:	4602      	mov	r2, r0
 800644a:	61e0      	str	r0, [r4, #28]
 800644c:	b920      	cbnz	r0, 8006458 <_Balloc+0x20>
 800644e:	216b      	movs	r1, #107	@ 0x6b
 8006450:	4b17      	ldr	r3, [pc, #92]	@ (80064b0 <_Balloc+0x78>)
 8006452:	4818      	ldr	r0, [pc, #96]	@ (80064b4 <_Balloc+0x7c>)
 8006454:	f7ff fb88 	bl	8005b68 <__assert_func>
 8006458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800645c:	6006      	str	r6, [r0, #0]
 800645e:	60c6      	str	r6, [r0, #12]
 8006460:	69e6      	ldr	r6, [r4, #28]
 8006462:	68f3      	ldr	r3, [r6, #12]
 8006464:	b183      	cbz	r3, 8006488 <_Balloc+0x50>
 8006466:	69e3      	ldr	r3, [r4, #28]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800646e:	b9b8      	cbnz	r0, 80064a0 <_Balloc+0x68>
 8006470:	2101      	movs	r1, #1
 8006472:	fa01 f605 	lsl.w	r6, r1, r5
 8006476:	1d72      	adds	r2, r6, #5
 8006478:	4620      	mov	r0, r4
 800647a:	0092      	lsls	r2, r2, #2
 800647c:	f000 fd5b 	bl	8006f36 <_calloc_r>
 8006480:	b160      	cbz	r0, 800649c <_Balloc+0x64>
 8006482:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006486:	e00e      	b.n	80064a6 <_Balloc+0x6e>
 8006488:	2221      	movs	r2, #33	@ 0x21
 800648a:	2104      	movs	r1, #4
 800648c:	4620      	mov	r0, r4
 800648e:	f000 fd52 	bl	8006f36 <_calloc_r>
 8006492:	69e3      	ldr	r3, [r4, #28]
 8006494:	60f0      	str	r0, [r6, #12]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e4      	bne.n	8006466 <_Balloc+0x2e>
 800649c:	2000      	movs	r0, #0
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	6802      	ldr	r2, [r0, #0]
 80064a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064a6:	2300      	movs	r3, #0
 80064a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064ac:	e7f7      	b.n	800649e <_Balloc+0x66>
 80064ae:	bf00      	nop
 80064b0:	080078a4 	.word	0x080078a4
 80064b4:	080079ca 	.word	0x080079ca

080064b8 <_Bfree>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	69c6      	ldr	r6, [r0, #28]
 80064bc:	4605      	mov	r5, r0
 80064be:	460c      	mov	r4, r1
 80064c0:	b976      	cbnz	r6, 80064e0 <_Bfree+0x28>
 80064c2:	2010      	movs	r0, #16
 80064c4:	f7ff fef0 	bl	80062a8 <malloc>
 80064c8:	4602      	mov	r2, r0
 80064ca:	61e8      	str	r0, [r5, #28]
 80064cc:	b920      	cbnz	r0, 80064d8 <_Bfree+0x20>
 80064ce:	218f      	movs	r1, #143	@ 0x8f
 80064d0:	4b08      	ldr	r3, [pc, #32]	@ (80064f4 <_Bfree+0x3c>)
 80064d2:	4809      	ldr	r0, [pc, #36]	@ (80064f8 <_Bfree+0x40>)
 80064d4:	f7ff fb48 	bl	8005b68 <__assert_func>
 80064d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064dc:	6006      	str	r6, [r0, #0]
 80064de:	60c6      	str	r6, [r0, #12]
 80064e0:	b13c      	cbz	r4, 80064f2 <_Bfree+0x3a>
 80064e2:	69eb      	ldr	r3, [r5, #28]
 80064e4:	6862      	ldr	r2, [r4, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064ec:	6021      	str	r1, [r4, #0]
 80064ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
 80064f4:	080078a4 	.word	0x080078a4
 80064f8:	080079ca 	.word	0x080079ca

080064fc <__multadd>:
 80064fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006500:	4607      	mov	r7, r0
 8006502:	460c      	mov	r4, r1
 8006504:	461e      	mov	r6, r3
 8006506:	2000      	movs	r0, #0
 8006508:	690d      	ldr	r5, [r1, #16]
 800650a:	f101 0c14 	add.w	ip, r1, #20
 800650e:	f8dc 3000 	ldr.w	r3, [ip]
 8006512:	3001      	adds	r0, #1
 8006514:	b299      	uxth	r1, r3
 8006516:	fb02 6101 	mla	r1, r2, r1, r6
 800651a:	0c1e      	lsrs	r6, r3, #16
 800651c:	0c0b      	lsrs	r3, r1, #16
 800651e:	fb02 3306 	mla	r3, r2, r6, r3
 8006522:	b289      	uxth	r1, r1
 8006524:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006528:	4285      	cmp	r5, r0
 800652a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800652e:	f84c 1b04 	str.w	r1, [ip], #4
 8006532:	dcec      	bgt.n	800650e <__multadd+0x12>
 8006534:	b30e      	cbz	r6, 800657a <__multadd+0x7e>
 8006536:	68a3      	ldr	r3, [r4, #8]
 8006538:	42ab      	cmp	r3, r5
 800653a:	dc19      	bgt.n	8006570 <__multadd+0x74>
 800653c:	6861      	ldr	r1, [r4, #4]
 800653e:	4638      	mov	r0, r7
 8006540:	3101      	adds	r1, #1
 8006542:	f7ff ff79 	bl	8006438 <_Balloc>
 8006546:	4680      	mov	r8, r0
 8006548:	b928      	cbnz	r0, 8006556 <__multadd+0x5a>
 800654a:	4602      	mov	r2, r0
 800654c:	21ba      	movs	r1, #186	@ 0xba
 800654e:	4b0c      	ldr	r3, [pc, #48]	@ (8006580 <__multadd+0x84>)
 8006550:	480c      	ldr	r0, [pc, #48]	@ (8006584 <__multadd+0x88>)
 8006552:	f7ff fb09 	bl	8005b68 <__assert_func>
 8006556:	6922      	ldr	r2, [r4, #16]
 8006558:	f104 010c 	add.w	r1, r4, #12
 800655c:	3202      	adds	r2, #2
 800655e:	0092      	lsls	r2, r2, #2
 8006560:	300c      	adds	r0, #12
 8006562:	f7ff fae8 	bl	8005b36 <memcpy>
 8006566:	4621      	mov	r1, r4
 8006568:	4638      	mov	r0, r7
 800656a:	f7ff ffa5 	bl	80064b8 <_Bfree>
 800656e:	4644      	mov	r4, r8
 8006570:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006574:	3501      	adds	r5, #1
 8006576:	615e      	str	r6, [r3, #20]
 8006578:	6125      	str	r5, [r4, #16]
 800657a:	4620      	mov	r0, r4
 800657c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006580:	08007959 	.word	0x08007959
 8006584:	080079ca 	.word	0x080079ca

08006588 <__s2b>:
 8006588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800658c:	4615      	mov	r5, r2
 800658e:	2209      	movs	r2, #9
 8006590:	461f      	mov	r7, r3
 8006592:	3308      	adds	r3, #8
 8006594:	460c      	mov	r4, r1
 8006596:	fb93 f3f2 	sdiv	r3, r3, r2
 800659a:	4606      	mov	r6, r0
 800659c:	2201      	movs	r2, #1
 800659e:	2100      	movs	r1, #0
 80065a0:	429a      	cmp	r2, r3
 80065a2:	db09      	blt.n	80065b8 <__s2b+0x30>
 80065a4:	4630      	mov	r0, r6
 80065a6:	f7ff ff47 	bl	8006438 <_Balloc>
 80065aa:	b940      	cbnz	r0, 80065be <__s2b+0x36>
 80065ac:	4602      	mov	r2, r0
 80065ae:	21d3      	movs	r1, #211	@ 0xd3
 80065b0:	4b18      	ldr	r3, [pc, #96]	@ (8006614 <__s2b+0x8c>)
 80065b2:	4819      	ldr	r0, [pc, #100]	@ (8006618 <__s2b+0x90>)
 80065b4:	f7ff fad8 	bl	8005b68 <__assert_func>
 80065b8:	0052      	lsls	r2, r2, #1
 80065ba:	3101      	adds	r1, #1
 80065bc:	e7f0      	b.n	80065a0 <__s2b+0x18>
 80065be:	9b08      	ldr	r3, [sp, #32]
 80065c0:	2d09      	cmp	r5, #9
 80065c2:	6143      	str	r3, [r0, #20]
 80065c4:	f04f 0301 	mov.w	r3, #1
 80065c8:	6103      	str	r3, [r0, #16]
 80065ca:	dd16      	ble.n	80065fa <__s2b+0x72>
 80065cc:	f104 0909 	add.w	r9, r4, #9
 80065d0:	46c8      	mov	r8, r9
 80065d2:	442c      	add	r4, r5
 80065d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80065d8:	4601      	mov	r1, r0
 80065da:	220a      	movs	r2, #10
 80065dc:	4630      	mov	r0, r6
 80065de:	3b30      	subs	r3, #48	@ 0x30
 80065e0:	f7ff ff8c 	bl	80064fc <__multadd>
 80065e4:	45a0      	cmp	r8, r4
 80065e6:	d1f5      	bne.n	80065d4 <__s2b+0x4c>
 80065e8:	f1a5 0408 	sub.w	r4, r5, #8
 80065ec:	444c      	add	r4, r9
 80065ee:	1b2d      	subs	r5, r5, r4
 80065f0:	1963      	adds	r3, r4, r5
 80065f2:	42bb      	cmp	r3, r7
 80065f4:	db04      	blt.n	8006600 <__s2b+0x78>
 80065f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065fa:	2509      	movs	r5, #9
 80065fc:	340a      	adds	r4, #10
 80065fe:	e7f6      	b.n	80065ee <__s2b+0x66>
 8006600:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006604:	4601      	mov	r1, r0
 8006606:	220a      	movs	r2, #10
 8006608:	4630      	mov	r0, r6
 800660a:	3b30      	subs	r3, #48	@ 0x30
 800660c:	f7ff ff76 	bl	80064fc <__multadd>
 8006610:	e7ee      	b.n	80065f0 <__s2b+0x68>
 8006612:	bf00      	nop
 8006614:	08007959 	.word	0x08007959
 8006618:	080079ca 	.word	0x080079ca

0800661c <__hi0bits>:
 800661c:	4603      	mov	r3, r0
 800661e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006622:	bf3a      	itte	cc
 8006624:	0403      	lslcc	r3, r0, #16
 8006626:	2010      	movcc	r0, #16
 8006628:	2000      	movcs	r0, #0
 800662a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800662e:	bf3c      	itt	cc
 8006630:	021b      	lslcc	r3, r3, #8
 8006632:	3008      	addcc	r0, #8
 8006634:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006638:	bf3c      	itt	cc
 800663a:	011b      	lslcc	r3, r3, #4
 800663c:	3004      	addcc	r0, #4
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006642:	bf3c      	itt	cc
 8006644:	009b      	lslcc	r3, r3, #2
 8006646:	3002      	addcc	r0, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	db05      	blt.n	8006658 <__hi0bits+0x3c>
 800664c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006650:	f100 0001 	add.w	r0, r0, #1
 8006654:	bf08      	it	eq
 8006656:	2020      	moveq	r0, #32
 8006658:	4770      	bx	lr

0800665a <__lo0bits>:
 800665a:	6803      	ldr	r3, [r0, #0]
 800665c:	4602      	mov	r2, r0
 800665e:	f013 0007 	ands.w	r0, r3, #7
 8006662:	d00b      	beq.n	800667c <__lo0bits+0x22>
 8006664:	07d9      	lsls	r1, r3, #31
 8006666:	d421      	bmi.n	80066ac <__lo0bits+0x52>
 8006668:	0798      	lsls	r0, r3, #30
 800666a:	bf49      	itett	mi
 800666c:	085b      	lsrmi	r3, r3, #1
 800666e:	089b      	lsrpl	r3, r3, #2
 8006670:	2001      	movmi	r0, #1
 8006672:	6013      	strmi	r3, [r2, #0]
 8006674:	bf5c      	itt	pl
 8006676:	2002      	movpl	r0, #2
 8006678:	6013      	strpl	r3, [r2, #0]
 800667a:	4770      	bx	lr
 800667c:	b299      	uxth	r1, r3
 800667e:	b909      	cbnz	r1, 8006684 <__lo0bits+0x2a>
 8006680:	2010      	movs	r0, #16
 8006682:	0c1b      	lsrs	r3, r3, #16
 8006684:	b2d9      	uxtb	r1, r3
 8006686:	b909      	cbnz	r1, 800668c <__lo0bits+0x32>
 8006688:	3008      	adds	r0, #8
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	0719      	lsls	r1, r3, #28
 800668e:	bf04      	itt	eq
 8006690:	091b      	lsreq	r3, r3, #4
 8006692:	3004      	addeq	r0, #4
 8006694:	0799      	lsls	r1, r3, #30
 8006696:	bf04      	itt	eq
 8006698:	089b      	lsreq	r3, r3, #2
 800669a:	3002      	addeq	r0, #2
 800669c:	07d9      	lsls	r1, r3, #31
 800669e:	d403      	bmi.n	80066a8 <__lo0bits+0x4e>
 80066a0:	085b      	lsrs	r3, r3, #1
 80066a2:	f100 0001 	add.w	r0, r0, #1
 80066a6:	d003      	beq.n	80066b0 <__lo0bits+0x56>
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	4770      	bx	lr
 80066ac:	2000      	movs	r0, #0
 80066ae:	4770      	bx	lr
 80066b0:	2020      	movs	r0, #32
 80066b2:	4770      	bx	lr

080066b4 <__i2b>:
 80066b4:	b510      	push	{r4, lr}
 80066b6:	460c      	mov	r4, r1
 80066b8:	2101      	movs	r1, #1
 80066ba:	f7ff febd 	bl	8006438 <_Balloc>
 80066be:	4602      	mov	r2, r0
 80066c0:	b928      	cbnz	r0, 80066ce <__i2b+0x1a>
 80066c2:	f240 1145 	movw	r1, #325	@ 0x145
 80066c6:	4b04      	ldr	r3, [pc, #16]	@ (80066d8 <__i2b+0x24>)
 80066c8:	4804      	ldr	r0, [pc, #16]	@ (80066dc <__i2b+0x28>)
 80066ca:	f7ff fa4d 	bl	8005b68 <__assert_func>
 80066ce:	2301      	movs	r3, #1
 80066d0:	6144      	str	r4, [r0, #20]
 80066d2:	6103      	str	r3, [r0, #16]
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	bf00      	nop
 80066d8:	08007959 	.word	0x08007959
 80066dc:	080079ca 	.word	0x080079ca

080066e0 <__multiply>:
 80066e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	4617      	mov	r7, r2
 80066e6:	690a      	ldr	r2, [r1, #16]
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	4689      	mov	r9, r1
 80066ec:	429a      	cmp	r2, r3
 80066ee:	bfa2      	ittt	ge
 80066f0:	463b      	movge	r3, r7
 80066f2:	460f      	movge	r7, r1
 80066f4:	4699      	movge	r9, r3
 80066f6:	693d      	ldr	r5, [r7, #16]
 80066f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	eb05 060a 	add.w	r6, r5, sl
 8006704:	42b3      	cmp	r3, r6
 8006706:	b085      	sub	sp, #20
 8006708:	bfb8      	it	lt
 800670a:	3101      	addlt	r1, #1
 800670c:	f7ff fe94 	bl	8006438 <_Balloc>
 8006710:	b930      	cbnz	r0, 8006720 <__multiply+0x40>
 8006712:	4602      	mov	r2, r0
 8006714:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006718:	4b40      	ldr	r3, [pc, #256]	@ (800681c <__multiply+0x13c>)
 800671a:	4841      	ldr	r0, [pc, #260]	@ (8006820 <__multiply+0x140>)
 800671c:	f7ff fa24 	bl	8005b68 <__assert_func>
 8006720:	f100 0414 	add.w	r4, r0, #20
 8006724:	4623      	mov	r3, r4
 8006726:	2200      	movs	r2, #0
 8006728:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800672c:	4573      	cmp	r3, lr
 800672e:	d320      	bcc.n	8006772 <__multiply+0x92>
 8006730:	f107 0814 	add.w	r8, r7, #20
 8006734:	f109 0114 	add.w	r1, r9, #20
 8006738:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800673c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006740:	9302      	str	r3, [sp, #8]
 8006742:	1beb      	subs	r3, r5, r7
 8006744:	3b15      	subs	r3, #21
 8006746:	f023 0303 	bic.w	r3, r3, #3
 800674a:	3304      	adds	r3, #4
 800674c:	3715      	adds	r7, #21
 800674e:	42bd      	cmp	r5, r7
 8006750:	bf38      	it	cc
 8006752:	2304      	movcc	r3, #4
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	9b02      	ldr	r3, [sp, #8]
 8006758:	9103      	str	r1, [sp, #12]
 800675a:	428b      	cmp	r3, r1
 800675c:	d80c      	bhi.n	8006778 <__multiply+0x98>
 800675e:	2e00      	cmp	r6, #0
 8006760:	dd03      	ble.n	800676a <__multiply+0x8a>
 8006762:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006766:	2b00      	cmp	r3, #0
 8006768:	d055      	beq.n	8006816 <__multiply+0x136>
 800676a:	6106      	str	r6, [r0, #16]
 800676c:	b005      	add	sp, #20
 800676e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006772:	f843 2b04 	str.w	r2, [r3], #4
 8006776:	e7d9      	b.n	800672c <__multiply+0x4c>
 8006778:	f8b1 a000 	ldrh.w	sl, [r1]
 800677c:	f1ba 0f00 	cmp.w	sl, #0
 8006780:	d01f      	beq.n	80067c2 <__multiply+0xe2>
 8006782:	46c4      	mov	ip, r8
 8006784:	46a1      	mov	r9, r4
 8006786:	2700      	movs	r7, #0
 8006788:	f85c 2b04 	ldr.w	r2, [ip], #4
 800678c:	f8d9 3000 	ldr.w	r3, [r9]
 8006790:	fa1f fb82 	uxth.w	fp, r2
 8006794:	b29b      	uxth	r3, r3
 8006796:	fb0a 330b 	mla	r3, sl, fp, r3
 800679a:	443b      	add	r3, r7
 800679c:	f8d9 7000 	ldr.w	r7, [r9]
 80067a0:	0c12      	lsrs	r2, r2, #16
 80067a2:	0c3f      	lsrs	r7, r7, #16
 80067a4:	fb0a 7202 	mla	r2, sl, r2, r7
 80067a8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067b2:	4565      	cmp	r5, ip
 80067b4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80067b8:	f849 3b04 	str.w	r3, [r9], #4
 80067bc:	d8e4      	bhi.n	8006788 <__multiply+0xa8>
 80067be:	9b01      	ldr	r3, [sp, #4]
 80067c0:	50e7      	str	r7, [r4, r3]
 80067c2:	9b03      	ldr	r3, [sp, #12]
 80067c4:	3104      	adds	r1, #4
 80067c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80067ca:	f1b9 0f00 	cmp.w	r9, #0
 80067ce:	d020      	beq.n	8006812 <__multiply+0x132>
 80067d0:	4647      	mov	r7, r8
 80067d2:	46a4      	mov	ip, r4
 80067d4:	f04f 0a00 	mov.w	sl, #0
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	f8b7 b000 	ldrh.w	fp, [r7]
 80067de:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	fb09 220b 	mla	r2, r9, fp, r2
 80067e8:	4452      	add	r2, sl
 80067ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067ee:	f84c 3b04 	str.w	r3, [ip], #4
 80067f2:	f857 3b04 	ldr.w	r3, [r7], #4
 80067f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067fa:	f8bc 3000 	ldrh.w	r3, [ip]
 80067fe:	42bd      	cmp	r5, r7
 8006800:	fb09 330a 	mla	r3, r9, sl, r3
 8006804:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006808:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800680c:	d8e5      	bhi.n	80067da <__multiply+0xfa>
 800680e:	9a01      	ldr	r2, [sp, #4]
 8006810:	50a3      	str	r3, [r4, r2]
 8006812:	3404      	adds	r4, #4
 8006814:	e79f      	b.n	8006756 <__multiply+0x76>
 8006816:	3e01      	subs	r6, #1
 8006818:	e7a1      	b.n	800675e <__multiply+0x7e>
 800681a:	bf00      	nop
 800681c:	08007959 	.word	0x08007959
 8006820:	080079ca 	.word	0x080079ca

08006824 <__pow5mult>:
 8006824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006828:	4615      	mov	r5, r2
 800682a:	f012 0203 	ands.w	r2, r2, #3
 800682e:	4607      	mov	r7, r0
 8006830:	460e      	mov	r6, r1
 8006832:	d007      	beq.n	8006844 <__pow5mult+0x20>
 8006834:	4c25      	ldr	r4, [pc, #148]	@ (80068cc <__pow5mult+0xa8>)
 8006836:	3a01      	subs	r2, #1
 8006838:	2300      	movs	r3, #0
 800683a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800683e:	f7ff fe5d 	bl	80064fc <__multadd>
 8006842:	4606      	mov	r6, r0
 8006844:	10ad      	asrs	r5, r5, #2
 8006846:	d03d      	beq.n	80068c4 <__pow5mult+0xa0>
 8006848:	69fc      	ldr	r4, [r7, #28]
 800684a:	b97c      	cbnz	r4, 800686c <__pow5mult+0x48>
 800684c:	2010      	movs	r0, #16
 800684e:	f7ff fd2b 	bl	80062a8 <malloc>
 8006852:	4602      	mov	r2, r0
 8006854:	61f8      	str	r0, [r7, #28]
 8006856:	b928      	cbnz	r0, 8006864 <__pow5mult+0x40>
 8006858:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800685c:	4b1c      	ldr	r3, [pc, #112]	@ (80068d0 <__pow5mult+0xac>)
 800685e:	481d      	ldr	r0, [pc, #116]	@ (80068d4 <__pow5mult+0xb0>)
 8006860:	f7ff f982 	bl	8005b68 <__assert_func>
 8006864:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006868:	6004      	str	r4, [r0, #0]
 800686a:	60c4      	str	r4, [r0, #12]
 800686c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006870:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006874:	b94c      	cbnz	r4, 800688a <__pow5mult+0x66>
 8006876:	f240 2171 	movw	r1, #625	@ 0x271
 800687a:	4638      	mov	r0, r7
 800687c:	f7ff ff1a 	bl	80066b4 <__i2b>
 8006880:	2300      	movs	r3, #0
 8006882:	4604      	mov	r4, r0
 8006884:	f8c8 0008 	str.w	r0, [r8, #8]
 8006888:	6003      	str	r3, [r0, #0]
 800688a:	f04f 0900 	mov.w	r9, #0
 800688e:	07eb      	lsls	r3, r5, #31
 8006890:	d50a      	bpl.n	80068a8 <__pow5mult+0x84>
 8006892:	4631      	mov	r1, r6
 8006894:	4622      	mov	r2, r4
 8006896:	4638      	mov	r0, r7
 8006898:	f7ff ff22 	bl	80066e0 <__multiply>
 800689c:	4680      	mov	r8, r0
 800689e:	4631      	mov	r1, r6
 80068a0:	4638      	mov	r0, r7
 80068a2:	f7ff fe09 	bl	80064b8 <_Bfree>
 80068a6:	4646      	mov	r6, r8
 80068a8:	106d      	asrs	r5, r5, #1
 80068aa:	d00b      	beq.n	80068c4 <__pow5mult+0xa0>
 80068ac:	6820      	ldr	r0, [r4, #0]
 80068ae:	b938      	cbnz	r0, 80068c0 <__pow5mult+0x9c>
 80068b0:	4622      	mov	r2, r4
 80068b2:	4621      	mov	r1, r4
 80068b4:	4638      	mov	r0, r7
 80068b6:	f7ff ff13 	bl	80066e0 <__multiply>
 80068ba:	6020      	str	r0, [r4, #0]
 80068bc:	f8c0 9000 	str.w	r9, [r0]
 80068c0:	4604      	mov	r4, r0
 80068c2:	e7e4      	b.n	800688e <__pow5mult+0x6a>
 80068c4:	4630      	mov	r0, r6
 80068c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ca:	bf00      	nop
 80068cc:	08007bac 	.word	0x08007bac
 80068d0:	080078a4 	.word	0x080078a4
 80068d4:	080079ca 	.word	0x080079ca

080068d8 <__lshift>:
 80068d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068dc:	460c      	mov	r4, r1
 80068de:	4607      	mov	r7, r0
 80068e0:	4691      	mov	r9, r2
 80068e2:	6923      	ldr	r3, [r4, #16]
 80068e4:	6849      	ldr	r1, [r1, #4]
 80068e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068ea:	68a3      	ldr	r3, [r4, #8]
 80068ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068f0:	f108 0601 	add.w	r6, r8, #1
 80068f4:	42b3      	cmp	r3, r6
 80068f6:	db0b      	blt.n	8006910 <__lshift+0x38>
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7ff fd9d 	bl	8006438 <_Balloc>
 80068fe:	4605      	mov	r5, r0
 8006900:	b948      	cbnz	r0, 8006916 <__lshift+0x3e>
 8006902:	4602      	mov	r2, r0
 8006904:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006908:	4b27      	ldr	r3, [pc, #156]	@ (80069a8 <__lshift+0xd0>)
 800690a:	4828      	ldr	r0, [pc, #160]	@ (80069ac <__lshift+0xd4>)
 800690c:	f7ff f92c 	bl	8005b68 <__assert_func>
 8006910:	3101      	adds	r1, #1
 8006912:	005b      	lsls	r3, r3, #1
 8006914:	e7ee      	b.n	80068f4 <__lshift+0x1c>
 8006916:	2300      	movs	r3, #0
 8006918:	f100 0114 	add.w	r1, r0, #20
 800691c:	f100 0210 	add.w	r2, r0, #16
 8006920:	4618      	mov	r0, r3
 8006922:	4553      	cmp	r3, sl
 8006924:	db33      	blt.n	800698e <__lshift+0xb6>
 8006926:	6920      	ldr	r0, [r4, #16]
 8006928:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800692c:	f104 0314 	add.w	r3, r4, #20
 8006930:	f019 091f 	ands.w	r9, r9, #31
 8006934:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006938:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800693c:	d02b      	beq.n	8006996 <__lshift+0xbe>
 800693e:	468a      	mov	sl, r1
 8006940:	2200      	movs	r2, #0
 8006942:	f1c9 0e20 	rsb	lr, r9, #32
 8006946:	6818      	ldr	r0, [r3, #0]
 8006948:	fa00 f009 	lsl.w	r0, r0, r9
 800694c:	4310      	orrs	r0, r2
 800694e:	f84a 0b04 	str.w	r0, [sl], #4
 8006952:	f853 2b04 	ldr.w	r2, [r3], #4
 8006956:	459c      	cmp	ip, r3
 8006958:	fa22 f20e 	lsr.w	r2, r2, lr
 800695c:	d8f3      	bhi.n	8006946 <__lshift+0x6e>
 800695e:	ebac 0304 	sub.w	r3, ip, r4
 8006962:	3b15      	subs	r3, #21
 8006964:	f023 0303 	bic.w	r3, r3, #3
 8006968:	3304      	adds	r3, #4
 800696a:	f104 0015 	add.w	r0, r4, #21
 800696e:	4560      	cmp	r0, ip
 8006970:	bf88      	it	hi
 8006972:	2304      	movhi	r3, #4
 8006974:	50ca      	str	r2, [r1, r3]
 8006976:	b10a      	cbz	r2, 800697c <__lshift+0xa4>
 8006978:	f108 0602 	add.w	r6, r8, #2
 800697c:	3e01      	subs	r6, #1
 800697e:	4638      	mov	r0, r7
 8006980:	4621      	mov	r1, r4
 8006982:	612e      	str	r6, [r5, #16]
 8006984:	f7ff fd98 	bl	80064b8 <_Bfree>
 8006988:	4628      	mov	r0, r5
 800698a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006992:	3301      	adds	r3, #1
 8006994:	e7c5      	b.n	8006922 <__lshift+0x4a>
 8006996:	3904      	subs	r1, #4
 8006998:	f853 2b04 	ldr.w	r2, [r3], #4
 800699c:	459c      	cmp	ip, r3
 800699e:	f841 2f04 	str.w	r2, [r1, #4]!
 80069a2:	d8f9      	bhi.n	8006998 <__lshift+0xc0>
 80069a4:	e7ea      	b.n	800697c <__lshift+0xa4>
 80069a6:	bf00      	nop
 80069a8:	08007959 	.word	0x08007959
 80069ac:	080079ca 	.word	0x080079ca

080069b0 <__mcmp>:
 80069b0:	4603      	mov	r3, r0
 80069b2:	690a      	ldr	r2, [r1, #16]
 80069b4:	6900      	ldr	r0, [r0, #16]
 80069b6:	b530      	push	{r4, r5, lr}
 80069b8:	1a80      	subs	r0, r0, r2
 80069ba:	d10e      	bne.n	80069da <__mcmp+0x2a>
 80069bc:	3314      	adds	r3, #20
 80069be:	3114      	adds	r1, #20
 80069c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80069c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069d0:	4295      	cmp	r5, r2
 80069d2:	d003      	beq.n	80069dc <__mcmp+0x2c>
 80069d4:	d205      	bcs.n	80069e2 <__mcmp+0x32>
 80069d6:	f04f 30ff 	mov.w	r0, #4294967295
 80069da:	bd30      	pop	{r4, r5, pc}
 80069dc:	42a3      	cmp	r3, r4
 80069de:	d3f3      	bcc.n	80069c8 <__mcmp+0x18>
 80069e0:	e7fb      	b.n	80069da <__mcmp+0x2a>
 80069e2:	2001      	movs	r0, #1
 80069e4:	e7f9      	b.n	80069da <__mcmp+0x2a>
	...

080069e8 <__mdiff>:
 80069e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ec:	4689      	mov	r9, r1
 80069ee:	4606      	mov	r6, r0
 80069f0:	4611      	mov	r1, r2
 80069f2:	4648      	mov	r0, r9
 80069f4:	4614      	mov	r4, r2
 80069f6:	f7ff ffdb 	bl	80069b0 <__mcmp>
 80069fa:	1e05      	subs	r5, r0, #0
 80069fc:	d112      	bne.n	8006a24 <__mdiff+0x3c>
 80069fe:	4629      	mov	r1, r5
 8006a00:	4630      	mov	r0, r6
 8006a02:	f7ff fd19 	bl	8006438 <_Balloc>
 8006a06:	4602      	mov	r2, r0
 8006a08:	b928      	cbnz	r0, 8006a16 <__mdiff+0x2e>
 8006a0a:	f240 2137 	movw	r1, #567	@ 0x237
 8006a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b08 <__mdiff+0x120>)
 8006a10:	483e      	ldr	r0, [pc, #248]	@ (8006b0c <__mdiff+0x124>)
 8006a12:	f7ff f8a9 	bl	8005b68 <__assert_func>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	b003      	add	sp, #12
 8006a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a24:	bfbc      	itt	lt
 8006a26:	464b      	movlt	r3, r9
 8006a28:	46a1      	movlt	r9, r4
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a30:	bfba      	itte	lt
 8006a32:	461c      	movlt	r4, r3
 8006a34:	2501      	movlt	r5, #1
 8006a36:	2500      	movge	r5, #0
 8006a38:	f7ff fcfe 	bl	8006438 <_Balloc>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	b918      	cbnz	r0, 8006a48 <__mdiff+0x60>
 8006a40:	f240 2145 	movw	r1, #581	@ 0x245
 8006a44:	4b30      	ldr	r3, [pc, #192]	@ (8006b08 <__mdiff+0x120>)
 8006a46:	e7e3      	b.n	8006a10 <__mdiff+0x28>
 8006a48:	f100 0b14 	add.w	fp, r0, #20
 8006a4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a50:	f109 0310 	add.w	r3, r9, #16
 8006a54:	60c5      	str	r5, [r0, #12]
 8006a56:	f04f 0c00 	mov.w	ip, #0
 8006a5a:	f109 0514 	add.w	r5, r9, #20
 8006a5e:	46d9      	mov	r9, fp
 8006a60:	6926      	ldr	r6, [r4, #16]
 8006a62:	f104 0e14 	add.w	lr, r4, #20
 8006a66:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a6a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	9b01      	ldr	r3, [sp, #4]
 8006a72:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a76:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a7a:	b281      	uxth	r1, r0
 8006a7c:	9301      	str	r3, [sp, #4]
 8006a7e:	fa1f f38a 	uxth.w	r3, sl
 8006a82:	1a5b      	subs	r3, r3, r1
 8006a84:	0c00      	lsrs	r0, r0, #16
 8006a86:	4463      	add	r3, ip
 8006a88:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a8c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a96:	4576      	cmp	r6, lr
 8006a98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a9c:	f849 3b04 	str.w	r3, [r9], #4
 8006aa0:	d8e6      	bhi.n	8006a70 <__mdiff+0x88>
 8006aa2:	1b33      	subs	r3, r6, r4
 8006aa4:	3b15      	subs	r3, #21
 8006aa6:	f023 0303 	bic.w	r3, r3, #3
 8006aaa:	3415      	adds	r4, #21
 8006aac:	3304      	adds	r3, #4
 8006aae:	42a6      	cmp	r6, r4
 8006ab0:	bf38      	it	cc
 8006ab2:	2304      	movcc	r3, #4
 8006ab4:	441d      	add	r5, r3
 8006ab6:	445b      	add	r3, fp
 8006ab8:	461e      	mov	r6, r3
 8006aba:	462c      	mov	r4, r5
 8006abc:	4544      	cmp	r4, r8
 8006abe:	d30e      	bcc.n	8006ade <__mdiff+0xf6>
 8006ac0:	f108 0103 	add.w	r1, r8, #3
 8006ac4:	1b49      	subs	r1, r1, r5
 8006ac6:	f021 0103 	bic.w	r1, r1, #3
 8006aca:	3d03      	subs	r5, #3
 8006acc:	45a8      	cmp	r8, r5
 8006ace:	bf38      	it	cc
 8006ad0:	2100      	movcc	r1, #0
 8006ad2:	440b      	add	r3, r1
 8006ad4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ad8:	b199      	cbz	r1, 8006b02 <__mdiff+0x11a>
 8006ada:	6117      	str	r7, [r2, #16]
 8006adc:	e79e      	b.n	8006a1c <__mdiff+0x34>
 8006ade:	46e6      	mov	lr, ip
 8006ae0:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ae4:	fa1f fc81 	uxth.w	ip, r1
 8006ae8:	44f4      	add	ip, lr
 8006aea:	0c08      	lsrs	r0, r1, #16
 8006aec:	4471      	add	r1, lr
 8006aee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006af2:	b289      	uxth	r1, r1
 8006af4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006af8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006afc:	f846 1b04 	str.w	r1, [r6], #4
 8006b00:	e7dc      	b.n	8006abc <__mdiff+0xd4>
 8006b02:	3f01      	subs	r7, #1
 8006b04:	e7e6      	b.n	8006ad4 <__mdiff+0xec>
 8006b06:	bf00      	nop
 8006b08:	08007959 	.word	0x08007959
 8006b0c:	080079ca 	.word	0x080079ca

08006b10 <__ulp>:
 8006b10:	4b0e      	ldr	r3, [pc, #56]	@ (8006b4c <__ulp+0x3c>)
 8006b12:	400b      	ands	r3, r1
 8006b14:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	dc08      	bgt.n	8006b2e <__ulp+0x1e>
 8006b1c:	425b      	negs	r3, r3
 8006b1e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006b22:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006b26:	da04      	bge.n	8006b32 <__ulp+0x22>
 8006b28:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006b2c:	4113      	asrs	r3, r2
 8006b2e:	2200      	movs	r2, #0
 8006b30:	e008      	b.n	8006b44 <__ulp+0x34>
 8006b32:	f1a2 0314 	sub.w	r3, r2, #20
 8006b36:	2b1e      	cmp	r3, #30
 8006b38:	bfd6      	itet	le
 8006b3a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006b3e:	2201      	movgt	r2, #1
 8006b40:	40da      	lsrle	r2, r3
 8006b42:	2300      	movs	r3, #0
 8006b44:	4619      	mov	r1, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	7ff00000 	.word	0x7ff00000

08006b50 <__b2d>:
 8006b50:	6902      	ldr	r2, [r0, #16]
 8006b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b54:	f100 0614 	add.w	r6, r0, #20
 8006b58:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006b5c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006b60:	4f1e      	ldr	r7, [pc, #120]	@ (8006bdc <__b2d+0x8c>)
 8006b62:	4620      	mov	r0, r4
 8006b64:	f7ff fd5a 	bl	800661c <__hi0bits>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f1c0 0020 	rsb	r0, r0, #32
 8006b6e:	2b0a      	cmp	r3, #10
 8006b70:	f1a2 0504 	sub.w	r5, r2, #4
 8006b74:	6008      	str	r0, [r1, #0]
 8006b76:	dc12      	bgt.n	8006b9e <__b2d+0x4e>
 8006b78:	42ae      	cmp	r6, r5
 8006b7a:	bf2c      	ite	cs
 8006b7c:	2200      	movcs	r2, #0
 8006b7e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006b82:	f1c3 0c0b 	rsb	ip, r3, #11
 8006b86:	3315      	adds	r3, #21
 8006b88:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006b8c:	fa04 f303 	lsl.w	r3, r4, r3
 8006b90:	fa22 f20c 	lsr.w	r2, r2, ip
 8006b94:	ea4e 0107 	orr.w	r1, lr, r7
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b9e:	42ae      	cmp	r6, r5
 8006ba0:	bf36      	itet	cc
 8006ba2:	f1a2 0508 	subcc.w	r5, r2, #8
 8006ba6:	2200      	movcs	r2, #0
 8006ba8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006bac:	3b0b      	subs	r3, #11
 8006bae:	d012      	beq.n	8006bd6 <__b2d+0x86>
 8006bb0:	f1c3 0720 	rsb	r7, r3, #32
 8006bb4:	fa22 f107 	lsr.w	r1, r2, r7
 8006bb8:	409c      	lsls	r4, r3
 8006bba:	430c      	orrs	r4, r1
 8006bbc:	42b5      	cmp	r5, r6
 8006bbe:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006bc2:	bf94      	ite	ls
 8006bc4:	2400      	movls	r4, #0
 8006bc6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006bca:	409a      	lsls	r2, r3
 8006bcc:	40fc      	lsrs	r4, r7
 8006bce:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006bd2:	4322      	orrs	r2, r4
 8006bd4:	e7e1      	b.n	8006b9a <__b2d+0x4a>
 8006bd6:	ea44 0107 	orr.w	r1, r4, r7
 8006bda:	e7de      	b.n	8006b9a <__b2d+0x4a>
 8006bdc:	3ff00000 	.word	0x3ff00000

08006be0 <__d2b>:
 8006be0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006be4:	2101      	movs	r1, #1
 8006be6:	4690      	mov	r8, r2
 8006be8:	4699      	mov	r9, r3
 8006bea:	9e08      	ldr	r6, [sp, #32]
 8006bec:	f7ff fc24 	bl	8006438 <_Balloc>
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	b930      	cbnz	r0, 8006c02 <__d2b+0x22>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	f240 310f 	movw	r1, #783	@ 0x30f
 8006bfa:	4b23      	ldr	r3, [pc, #140]	@ (8006c88 <__d2b+0xa8>)
 8006bfc:	4823      	ldr	r0, [pc, #140]	@ (8006c8c <__d2b+0xac>)
 8006bfe:	f7fe ffb3 	bl	8005b68 <__assert_func>
 8006c02:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c0a:	b10d      	cbz	r5, 8006c10 <__d2b+0x30>
 8006c0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c10:	9301      	str	r3, [sp, #4]
 8006c12:	f1b8 0300 	subs.w	r3, r8, #0
 8006c16:	d024      	beq.n	8006c62 <__d2b+0x82>
 8006c18:	4668      	mov	r0, sp
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	f7ff fd1d 	bl	800665a <__lo0bits>
 8006c20:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c24:	b1d8      	cbz	r0, 8006c5e <__d2b+0x7e>
 8006c26:	f1c0 0320 	rsb	r3, r0, #32
 8006c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2e:	430b      	orrs	r3, r1
 8006c30:	40c2      	lsrs	r2, r0
 8006c32:	6163      	str	r3, [r4, #20]
 8006c34:	9201      	str	r2, [sp, #4]
 8006c36:	9b01      	ldr	r3, [sp, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	bf0c      	ite	eq
 8006c3c:	2201      	moveq	r2, #1
 8006c3e:	2202      	movne	r2, #2
 8006c40:	61a3      	str	r3, [r4, #24]
 8006c42:	6122      	str	r2, [r4, #16]
 8006c44:	b1ad      	cbz	r5, 8006c72 <__d2b+0x92>
 8006c46:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006c4a:	4405      	add	r5, r0
 8006c4c:	6035      	str	r5, [r6, #0]
 8006c4e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c54:	6018      	str	r0, [r3, #0]
 8006c56:	4620      	mov	r0, r4
 8006c58:	b002      	add	sp, #8
 8006c5a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006c5e:	6161      	str	r1, [r4, #20]
 8006c60:	e7e9      	b.n	8006c36 <__d2b+0x56>
 8006c62:	a801      	add	r0, sp, #4
 8006c64:	f7ff fcf9 	bl	800665a <__lo0bits>
 8006c68:	9b01      	ldr	r3, [sp, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	6163      	str	r3, [r4, #20]
 8006c6e:	3020      	adds	r0, #32
 8006c70:	e7e7      	b.n	8006c42 <__d2b+0x62>
 8006c72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006c76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c7a:	6030      	str	r0, [r6, #0]
 8006c7c:	6918      	ldr	r0, [r3, #16]
 8006c7e:	f7ff fccd 	bl	800661c <__hi0bits>
 8006c82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c86:	e7e4      	b.n	8006c52 <__d2b+0x72>
 8006c88:	08007959 	.word	0x08007959
 8006c8c:	080079ca 	.word	0x080079ca

08006c90 <__ratio>:
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	b085      	sub	sp, #20
 8006c96:	e9cd 1000 	strd	r1, r0, [sp]
 8006c9a:	a902      	add	r1, sp, #8
 8006c9c:	f7ff ff58 	bl	8006b50 <__b2d>
 8006ca0:	468b      	mov	fp, r1
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	460f      	mov	r7, r1
 8006ca6:	9800      	ldr	r0, [sp, #0]
 8006ca8:	a903      	add	r1, sp, #12
 8006caa:	f7ff ff51 	bl	8006b50 <__b2d>
 8006cae:	460d      	mov	r5, r1
 8006cb0:	9b01      	ldr	r3, [sp, #4]
 8006cb2:	4689      	mov	r9, r1
 8006cb4:	6919      	ldr	r1, [r3, #16]
 8006cb6:	9b00      	ldr	r3, [sp, #0]
 8006cb8:	4604      	mov	r4, r0
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	1ac9      	subs	r1, r1, r3
 8006cc0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006cc4:	1a9b      	subs	r3, r3, r2
 8006cc6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	bfcd      	iteet	gt
 8006cce:	463a      	movgt	r2, r7
 8006cd0:	462a      	movle	r2, r5
 8006cd2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006cd6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006cda:	bfd8      	it	le
 8006cdc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006ce0:	464b      	mov	r3, r9
 8006ce2:	4622      	mov	r2, r4
 8006ce4:	4659      	mov	r1, fp
 8006ce6:	f7f9 fd2b 	bl	8000740 <__aeabi_ddiv>
 8006cea:	b005      	add	sp, #20
 8006cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006cf0 <__copybits>:
 8006cf0:	3901      	subs	r1, #1
 8006cf2:	b570      	push	{r4, r5, r6, lr}
 8006cf4:	1149      	asrs	r1, r1, #5
 8006cf6:	6914      	ldr	r4, [r2, #16]
 8006cf8:	3101      	adds	r1, #1
 8006cfa:	f102 0314 	add.w	r3, r2, #20
 8006cfe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006d02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d06:	1f05      	subs	r5, r0, #4
 8006d08:	42a3      	cmp	r3, r4
 8006d0a:	d30c      	bcc.n	8006d26 <__copybits+0x36>
 8006d0c:	1aa3      	subs	r3, r4, r2
 8006d0e:	3b11      	subs	r3, #17
 8006d10:	f023 0303 	bic.w	r3, r3, #3
 8006d14:	3211      	adds	r2, #17
 8006d16:	42a2      	cmp	r2, r4
 8006d18:	bf88      	it	hi
 8006d1a:	2300      	movhi	r3, #0
 8006d1c:	4418      	add	r0, r3
 8006d1e:	2300      	movs	r3, #0
 8006d20:	4288      	cmp	r0, r1
 8006d22:	d305      	bcc.n	8006d30 <__copybits+0x40>
 8006d24:	bd70      	pop	{r4, r5, r6, pc}
 8006d26:	f853 6b04 	ldr.w	r6, [r3], #4
 8006d2a:	f845 6f04 	str.w	r6, [r5, #4]!
 8006d2e:	e7eb      	b.n	8006d08 <__copybits+0x18>
 8006d30:	f840 3b04 	str.w	r3, [r0], #4
 8006d34:	e7f4      	b.n	8006d20 <__copybits+0x30>

08006d36 <__any_on>:
 8006d36:	f100 0214 	add.w	r2, r0, #20
 8006d3a:	6900      	ldr	r0, [r0, #16]
 8006d3c:	114b      	asrs	r3, r1, #5
 8006d3e:	4298      	cmp	r0, r3
 8006d40:	b510      	push	{r4, lr}
 8006d42:	db11      	blt.n	8006d68 <__any_on+0x32>
 8006d44:	dd0a      	ble.n	8006d5c <__any_on+0x26>
 8006d46:	f011 011f 	ands.w	r1, r1, #31
 8006d4a:	d007      	beq.n	8006d5c <__any_on+0x26>
 8006d4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006d50:	fa24 f001 	lsr.w	r0, r4, r1
 8006d54:	fa00 f101 	lsl.w	r1, r0, r1
 8006d58:	428c      	cmp	r4, r1
 8006d5a:	d10b      	bne.n	8006d74 <__any_on+0x3e>
 8006d5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d803      	bhi.n	8006d6c <__any_on+0x36>
 8006d64:	2000      	movs	r0, #0
 8006d66:	bd10      	pop	{r4, pc}
 8006d68:	4603      	mov	r3, r0
 8006d6a:	e7f7      	b.n	8006d5c <__any_on+0x26>
 8006d6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d70:	2900      	cmp	r1, #0
 8006d72:	d0f5      	beq.n	8006d60 <__any_on+0x2a>
 8006d74:	2001      	movs	r0, #1
 8006d76:	e7f6      	b.n	8006d66 <__any_on+0x30>

08006d78 <__ascii_wctomb>:
 8006d78:	4603      	mov	r3, r0
 8006d7a:	4608      	mov	r0, r1
 8006d7c:	b141      	cbz	r1, 8006d90 <__ascii_wctomb+0x18>
 8006d7e:	2aff      	cmp	r2, #255	@ 0xff
 8006d80:	d904      	bls.n	8006d8c <__ascii_wctomb+0x14>
 8006d82:	228a      	movs	r2, #138	@ 0x8a
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	4770      	bx	lr
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	700a      	strb	r2, [r1, #0]
 8006d90:	4770      	bx	lr
	...

08006d94 <__sflush_r>:
 8006d94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9a:	0716      	lsls	r6, r2, #28
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	460c      	mov	r4, r1
 8006da0:	d454      	bmi.n	8006e4c <__sflush_r+0xb8>
 8006da2:	684b      	ldr	r3, [r1, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	dc02      	bgt.n	8006dae <__sflush_r+0x1a>
 8006da8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	dd48      	ble.n	8006e40 <__sflush_r+0xac>
 8006dae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006db0:	2e00      	cmp	r6, #0
 8006db2:	d045      	beq.n	8006e40 <__sflush_r+0xac>
 8006db4:	2300      	movs	r3, #0
 8006db6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006dba:	682f      	ldr	r7, [r5, #0]
 8006dbc:	6a21      	ldr	r1, [r4, #32]
 8006dbe:	602b      	str	r3, [r5, #0]
 8006dc0:	d030      	beq.n	8006e24 <__sflush_r+0x90>
 8006dc2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	0759      	lsls	r1, r3, #29
 8006dc8:	d505      	bpl.n	8006dd6 <__sflush_r+0x42>
 8006dca:	6863      	ldr	r3, [r4, #4]
 8006dcc:	1ad2      	subs	r2, r2, r3
 8006dce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006dd0:	b10b      	cbz	r3, 8006dd6 <__sflush_r+0x42>
 8006dd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006dd4:	1ad2      	subs	r2, r2, r3
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	4628      	mov	r0, r5
 8006dda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ddc:	6a21      	ldr	r1, [r4, #32]
 8006dde:	47b0      	blx	r6
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	89a3      	ldrh	r3, [r4, #12]
 8006de4:	d106      	bne.n	8006df4 <__sflush_r+0x60>
 8006de6:	6829      	ldr	r1, [r5, #0]
 8006de8:	291d      	cmp	r1, #29
 8006dea:	d82b      	bhi.n	8006e44 <__sflush_r+0xb0>
 8006dec:	4a28      	ldr	r2, [pc, #160]	@ (8006e90 <__sflush_r+0xfc>)
 8006dee:	40ca      	lsrs	r2, r1
 8006df0:	07d6      	lsls	r6, r2, #31
 8006df2:	d527      	bpl.n	8006e44 <__sflush_r+0xb0>
 8006df4:	2200      	movs	r2, #0
 8006df6:	6062      	str	r2, [r4, #4]
 8006df8:	6922      	ldr	r2, [r4, #16]
 8006dfa:	04d9      	lsls	r1, r3, #19
 8006dfc:	6022      	str	r2, [r4, #0]
 8006dfe:	d504      	bpl.n	8006e0a <__sflush_r+0x76>
 8006e00:	1c42      	adds	r2, r0, #1
 8006e02:	d101      	bne.n	8006e08 <__sflush_r+0x74>
 8006e04:	682b      	ldr	r3, [r5, #0]
 8006e06:	b903      	cbnz	r3, 8006e0a <__sflush_r+0x76>
 8006e08:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e0c:	602f      	str	r7, [r5, #0]
 8006e0e:	b1b9      	cbz	r1, 8006e40 <__sflush_r+0xac>
 8006e10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e14:	4299      	cmp	r1, r3
 8006e16:	d002      	beq.n	8006e1e <__sflush_r+0x8a>
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f7fe fec3 	bl	8005ba4 <_free_r>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e22:	e00d      	b.n	8006e40 <__sflush_r+0xac>
 8006e24:	2301      	movs	r3, #1
 8006e26:	4628      	mov	r0, r5
 8006e28:	47b0      	blx	r6
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	1c50      	adds	r0, r2, #1
 8006e2e:	d1c9      	bne.n	8006dc4 <__sflush_r+0x30>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0c6      	beq.n	8006dc4 <__sflush_r+0x30>
 8006e36:	2b1d      	cmp	r3, #29
 8006e38:	d001      	beq.n	8006e3e <__sflush_r+0xaa>
 8006e3a:	2b16      	cmp	r3, #22
 8006e3c:	d11d      	bne.n	8006e7a <__sflush_r+0xe6>
 8006e3e:	602f      	str	r7, [r5, #0]
 8006e40:	2000      	movs	r0, #0
 8006e42:	e021      	b.n	8006e88 <__sflush_r+0xf4>
 8006e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e48:	b21b      	sxth	r3, r3
 8006e4a:	e01a      	b.n	8006e82 <__sflush_r+0xee>
 8006e4c:	690f      	ldr	r7, [r1, #16]
 8006e4e:	2f00      	cmp	r7, #0
 8006e50:	d0f6      	beq.n	8006e40 <__sflush_r+0xac>
 8006e52:	0793      	lsls	r3, r2, #30
 8006e54:	bf18      	it	ne
 8006e56:	2300      	movne	r3, #0
 8006e58:	680e      	ldr	r6, [r1, #0]
 8006e5a:	bf08      	it	eq
 8006e5c:	694b      	ldreq	r3, [r1, #20]
 8006e5e:	1bf6      	subs	r6, r6, r7
 8006e60:	600f      	str	r7, [r1, #0]
 8006e62:	608b      	str	r3, [r1, #8]
 8006e64:	2e00      	cmp	r6, #0
 8006e66:	ddeb      	ble.n	8006e40 <__sflush_r+0xac>
 8006e68:	4633      	mov	r3, r6
 8006e6a:	463a      	mov	r2, r7
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	6a21      	ldr	r1, [r4, #32]
 8006e70:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006e74:	47e0      	blx	ip
 8006e76:	2800      	cmp	r0, #0
 8006e78:	dc07      	bgt.n	8006e8a <__sflush_r+0xf6>
 8006e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e82:	f04f 30ff 	mov.w	r0, #4294967295
 8006e86:	81a3      	strh	r3, [r4, #12]
 8006e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e8a:	4407      	add	r7, r0
 8006e8c:	1a36      	subs	r6, r6, r0
 8006e8e:	e7e9      	b.n	8006e64 <__sflush_r+0xd0>
 8006e90:	20400001 	.word	0x20400001

08006e94 <_fflush_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	690b      	ldr	r3, [r1, #16]
 8006e98:	4605      	mov	r5, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	b913      	cbnz	r3, 8006ea4 <_fflush_r+0x10>
 8006e9e:	2500      	movs	r5, #0
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
 8006ea4:	b118      	cbz	r0, 8006eae <_fflush_r+0x1a>
 8006ea6:	6a03      	ldr	r3, [r0, #32]
 8006ea8:	b90b      	cbnz	r3, 8006eae <_fflush_r+0x1a>
 8006eaa:	f7fe fce1 	bl	8005870 <__sinit>
 8006eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0f3      	beq.n	8006e9e <_fflush_r+0xa>
 8006eb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006eb8:	07d0      	lsls	r0, r2, #31
 8006eba:	d404      	bmi.n	8006ec6 <_fflush_r+0x32>
 8006ebc:	0599      	lsls	r1, r3, #22
 8006ebe:	d402      	bmi.n	8006ec6 <_fflush_r+0x32>
 8006ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ec2:	f7fe fe36 	bl	8005b32 <__retarget_lock_acquire_recursive>
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	4621      	mov	r1, r4
 8006eca:	f7ff ff63 	bl	8006d94 <__sflush_r>
 8006ece:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	07da      	lsls	r2, r3, #31
 8006ed4:	d4e4      	bmi.n	8006ea0 <_fflush_r+0xc>
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	059b      	lsls	r3, r3, #22
 8006eda:	d4e1      	bmi.n	8006ea0 <_fflush_r+0xc>
 8006edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ede:	f7fe fe29 	bl	8005b34 <__retarget_lock_release_recursive>
 8006ee2:	e7dd      	b.n	8006ea0 <_fflush_r+0xc>

08006ee4 <fiprintf>:
 8006ee4:	b40e      	push	{r1, r2, r3}
 8006ee6:	b503      	push	{r0, r1, lr}
 8006ee8:	4601      	mov	r1, r0
 8006eea:	ab03      	add	r3, sp, #12
 8006eec:	4805      	ldr	r0, [pc, #20]	@ (8006f04 <fiprintf+0x20>)
 8006eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef2:	6800      	ldr	r0, [r0, #0]
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	f000 f859 	bl	8006fac <_vfiprintf_r>
 8006efa:	b002      	add	sp, #8
 8006efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f00:	b003      	add	sp, #12
 8006f02:	4770      	bx	lr
 8006f04:	20000194 	.word	0x20000194

08006f08 <_sbrk_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	4d05      	ldr	r5, [pc, #20]	@ (8006f24 <_sbrk_r+0x1c>)
 8006f0e:	4604      	mov	r4, r0
 8006f10:	4608      	mov	r0, r1
 8006f12:	602b      	str	r3, [r5, #0]
 8006f14:	f7fa ffec 	bl	8001ef0 <_sbrk>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_sbrk_r+0x1a>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_sbrk_r+0x1a>
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	2000046c 	.word	0x2000046c

08006f28 <abort>:
 8006f28:	2006      	movs	r0, #6
 8006f2a:	b508      	push	{r3, lr}
 8006f2c:	f000 fba2 	bl	8007674 <raise>
 8006f30:	2001      	movs	r0, #1
 8006f32:	f7fa ff68 	bl	8001e06 <_exit>

08006f36 <_calloc_r>:
 8006f36:	b570      	push	{r4, r5, r6, lr}
 8006f38:	fba1 5402 	umull	r5, r4, r1, r2
 8006f3c:	b934      	cbnz	r4, 8006f4c <_calloc_r+0x16>
 8006f3e:	4629      	mov	r1, r5
 8006f40:	f7ff f9dc 	bl	80062fc <_malloc_r>
 8006f44:	4606      	mov	r6, r0
 8006f46:	b928      	cbnz	r0, 8006f54 <_calloc_r+0x1e>
 8006f48:	4630      	mov	r0, r6
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	220c      	movs	r2, #12
 8006f4e:	2600      	movs	r6, #0
 8006f50:	6002      	str	r2, [r0, #0]
 8006f52:	e7f9      	b.n	8006f48 <_calloc_r+0x12>
 8006f54:	462a      	mov	r2, r5
 8006f56:	4621      	mov	r1, r4
 8006f58:	f7fe fd03 	bl	8005962 <memset>
 8006f5c:	e7f4      	b.n	8006f48 <_calloc_r+0x12>

08006f5e <__sfputc_r>:
 8006f5e:	6893      	ldr	r3, [r2, #8]
 8006f60:	b410      	push	{r4}
 8006f62:	3b01      	subs	r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	6093      	str	r3, [r2, #8]
 8006f68:	da07      	bge.n	8006f7a <__sfputc_r+0x1c>
 8006f6a:	6994      	ldr	r4, [r2, #24]
 8006f6c:	42a3      	cmp	r3, r4
 8006f6e:	db01      	blt.n	8006f74 <__sfputc_r+0x16>
 8006f70:	290a      	cmp	r1, #10
 8006f72:	d102      	bne.n	8006f7a <__sfputc_r+0x1c>
 8006f74:	bc10      	pop	{r4}
 8006f76:	f000 bac1 	b.w	80074fc <__swbuf_r>
 8006f7a:	6813      	ldr	r3, [r2, #0]
 8006f7c:	1c58      	adds	r0, r3, #1
 8006f7e:	6010      	str	r0, [r2, #0]
 8006f80:	7019      	strb	r1, [r3, #0]
 8006f82:	4608      	mov	r0, r1
 8006f84:	bc10      	pop	{r4}
 8006f86:	4770      	bx	lr

08006f88 <__sfputs_r>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460f      	mov	r7, r1
 8006f8e:	4614      	mov	r4, r2
 8006f90:	18d5      	adds	r5, r2, r3
 8006f92:	42ac      	cmp	r4, r5
 8006f94:	d101      	bne.n	8006f9a <__sfputs_r+0x12>
 8006f96:	2000      	movs	r0, #0
 8006f98:	e007      	b.n	8006faa <__sfputs_r+0x22>
 8006f9a:	463a      	mov	r2, r7
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa2:	f7ff ffdc 	bl	8006f5e <__sfputc_r>
 8006fa6:	1c43      	adds	r3, r0, #1
 8006fa8:	d1f3      	bne.n	8006f92 <__sfputs_r+0xa>
 8006faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006fac <_vfiprintf_r>:
 8006fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb0:	460d      	mov	r5, r1
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	4698      	mov	r8, r3
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	b09d      	sub	sp, #116	@ 0x74
 8006fba:	b118      	cbz	r0, 8006fc4 <_vfiprintf_r+0x18>
 8006fbc:	6a03      	ldr	r3, [r0, #32]
 8006fbe:	b90b      	cbnz	r3, 8006fc4 <_vfiprintf_r+0x18>
 8006fc0:	f7fe fc56 	bl	8005870 <__sinit>
 8006fc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fc6:	07d9      	lsls	r1, r3, #31
 8006fc8:	d405      	bmi.n	8006fd6 <_vfiprintf_r+0x2a>
 8006fca:	89ab      	ldrh	r3, [r5, #12]
 8006fcc:	059a      	lsls	r2, r3, #22
 8006fce:	d402      	bmi.n	8006fd6 <_vfiprintf_r+0x2a>
 8006fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fd2:	f7fe fdae 	bl	8005b32 <__retarget_lock_acquire_recursive>
 8006fd6:	89ab      	ldrh	r3, [r5, #12]
 8006fd8:	071b      	lsls	r3, r3, #28
 8006fda:	d501      	bpl.n	8006fe0 <_vfiprintf_r+0x34>
 8006fdc:	692b      	ldr	r3, [r5, #16]
 8006fde:	b99b      	cbnz	r3, 8007008 <_vfiprintf_r+0x5c>
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f000 fac8 	bl	8007578 <__swsetup_r>
 8006fe8:	b170      	cbz	r0, 8007008 <_vfiprintf_r+0x5c>
 8006fea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fec:	07dc      	lsls	r4, r3, #31
 8006fee:	d504      	bpl.n	8006ffa <_vfiprintf_r+0x4e>
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	b01d      	add	sp, #116	@ 0x74
 8006ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffa:	89ab      	ldrh	r3, [r5, #12]
 8006ffc:	0598      	lsls	r0, r3, #22
 8006ffe:	d4f7      	bmi.n	8006ff0 <_vfiprintf_r+0x44>
 8007000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007002:	f7fe fd97 	bl	8005b34 <__retarget_lock_release_recursive>
 8007006:	e7f3      	b.n	8006ff0 <_vfiprintf_r+0x44>
 8007008:	2300      	movs	r3, #0
 800700a:	9309      	str	r3, [sp, #36]	@ 0x24
 800700c:	2320      	movs	r3, #32
 800700e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007012:	2330      	movs	r3, #48	@ 0x30
 8007014:	f04f 0901 	mov.w	r9, #1
 8007018:	f8cd 800c 	str.w	r8, [sp, #12]
 800701c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80071c8 <_vfiprintf_r+0x21c>
 8007020:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007024:	4623      	mov	r3, r4
 8007026:	469a      	mov	sl, r3
 8007028:	f813 2b01 	ldrb.w	r2, [r3], #1
 800702c:	b10a      	cbz	r2, 8007032 <_vfiprintf_r+0x86>
 800702e:	2a25      	cmp	r2, #37	@ 0x25
 8007030:	d1f9      	bne.n	8007026 <_vfiprintf_r+0x7a>
 8007032:	ebba 0b04 	subs.w	fp, sl, r4
 8007036:	d00b      	beq.n	8007050 <_vfiprintf_r+0xa4>
 8007038:	465b      	mov	r3, fp
 800703a:	4622      	mov	r2, r4
 800703c:	4629      	mov	r1, r5
 800703e:	4630      	mov	r0, r6
 8007040:	f7ff ffa2 	bl	8006f88 <__sfputs_r>
 8007044:	3001      	adds	r0, #1
 8007046:	f000 80a7 	beq.w	8007198 <_vfiprintf_r+0x1ec>
 800704a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800704c:	445a      	add	r2, fp
 800704e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007050:	f89a 3000 	ldrb.w	r3, [sl]
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 809f 	beq.w	8007198 <_vfiprintf_r+0x1ec>
 800705a:	2300      	movs	r3, #0
 800705c:	f04f 32ff 	mov.w	r2, #4294967295
 8007060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007064:	f10a 0a01 	add.w	sl, sl, #1
 8007068:	9304      	str	r3, [sp, #16]
 800706a:	9307      	str	r3, [sp, #28]
 800706c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007070:	931a      	str	r3, [sp, #104]	@ 0x68
 8007072:	4654      	mov	r4, sl
 8007074:	2205      	movs	r2, #5
 8007076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800707a:	4853      	ldr	r0, [pc, #332]	@ (80071c8 <_vfiprintf_r+0x21c>)
 800707c:	f000 fb16 	bl	80076ac <memchr>
 8007080:	9a04      	ldr	r2, [sp, #16]
 8007082:	b9d8      	cbnz	r0, 80070bc <_vfiprintf_r+0x110>
 8007084:	06d1      	lsls	r1, r2, #27
 8007086:	bf44      	itt	mi
 8007088:	2320      	movmi	r3, #32
 800708a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800708e:	0713      	lsls	r3, r2, #28
 8007090:	bf44      	itt	mi
 8007092:	232b      	movmi	r3, #43	@ 0x2b
 8007094:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007098:	f89a 3000 	ldrb.w	r3, [sl]
 800709c:	2b2a      	cmp	r3, #42	@ 0x2a
 800709e:	d015      	beq.n	80070cc <_vfiprintf_r+0x120>
 80070a0:	4654      	mov	r4, sl
 80070a2:	2000      	movs	r0, #0
 80070a4:	f04f 0c0a 	mov.w	ip, #10
 80070a8:	9a07      	ldr	r2, [sp, #28]
 80070aa:	4621      	mov	r1, r4
 80070ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070b0:	3b30      	subs	r3, #48	@ 0x30
 80070b2:	2b09      	cmp	r3, #9
 80070b4:	d94b      	bls.n	800714e <_vfiprintf_r+0x1a2>
 80070b6:	b1b0      	cbz	r0, 80070e6 <_vfiprintf_r+0x13a>
 80070b8:	9207      	str	r2, [sp, #28]
 80070ba:	e014      	b.n	80070e6 <_vfiprintf_r+0x13a>
 80070bc:	eba0 0308 	sub.w	r3, r0, r8
 80070c0:	fa09 f303 	lsl.w	r3, r9, r3
 80070c4:	4313      	orrs	r3, r2
 80070c6:	46a2      	mov	sl, r4
 80070c8:	9304      	str	r3, [sp, #16]
 80070ca:	e7d2      	b.n	8007072 <_vfiprintf_r+0xc6>
 80070cc:	9b03      	ldr	r3, [sp, #12]
 80070ce:	1d19      	adds	r1, r3, #4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	9103      	str	r1, [sp, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	bfbb      	ittet	lt
 80070d8:	425b      	neglt	r3, r3
 80070da:	f042 0202 	orrlt.w	r2, r2, #2
 80070de:	9307      	strge	r3, [sp, #28]
 80070e0:	9307      	strlt	r3, [sp, #28]
 80070e2:	bfb8      	it	lt
 80070e4:	9204      	strlt	r2, [sp, #16]
 80070e6:	7823      	ldrb	r3, [r4, #0]
 80070e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80070ea:	d10a      	bne.n	8007102 <_vfiprintf_r+0x156>
 80070ec:	7863      	ldrb	r3, [r4, #1]
 80070ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80070f0:	d132      	bne.n	8007158 <_vfiprintf_r+0x1ac>
 80070f2:	9b03      	ldr	r3, [sp, #12]
 80070f4:	3402      	adds	r4, #2
 80070f6:	1d1a      	adds	r2, r3, #4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	9203      	str	r2, [sp, #12]
 80070fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007100:	9305      	str	r3, [sp, #20]
 8007102:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80071cc <_vfiprintf_r+0x220>
 8007106:	2203      	movs	r2, #3
 8007108:	4650      	mov	r0, sl
 800710a:	7821      	ldrb	r1, [r4, #0]
 800710c:	f000 face 	bl	80076ac <memchr>
 8007110:	b138      	cbz	r0, 8007122 <_vfiprintf_r+0x176>
 8007112:	2240      	movs	r2, #64	@ 0x40
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	eba0 000a 	sub.w	r0, r0, sl
 800711a:	4082      	lsls	r2, r0
 800711c:	4313      	orrs	r3, r2
 800711e:	3401      	adds	r4, #1
 8007120:	9304      	str	r3, [sp, #16]
 8007122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007126:	2206      	movs	r2, #6
 8007128:	4829      	ldr	r0, [pc, #164]	@ (80071d0 <_vfiprintf_r+0x224>)
 800712a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800712e:	f000 fabd 	bl	80076ac <memchr>
 8007132:	2800      	cmp	r0, #0
 8007134:	d03f      	beq.n	80071b6 <_vfiprintf_r+0x20a>
 8007136:	4b27      	ldr	r3, [pc, #156]	@ (80071d4 <_vfiprintf_r+0x228>)
 8007138:	bb1b      	cbnz	r3, 8007182 <_vfiprintf_r+0x1d6>
 800713a:	9b03      	ldr	r3, [sp, #12]
 800713c:	3307      	adds	r3, #7
 800713e:	f023 0307 	bic.w	r3, r3, #7
 8007142:	3308      	adds	r3, #8
 8007144:	9303      	str	r3, [sp, #12]
 8007146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007148:	443b      	add	r3, r7
 800714a:	9309      	str	r3, [sp, #36]	@ 0x24
 800714c:	e76a      	b.n	8007024 <_vfiprintf_r+0x78>
 800714e:	460c      	mov	r4, r1
 8007150:	2001      	movs	r0, #1
 8007152:	fb0c 3202 	mla	r2, ip, r2, r3
 8007156:	e7a8      	b.n	80070aa <_vfiprintf_r+0xfe>
 8007158:	2300      	movs	r3, #0
 800715a:	f04f 0c0a 	mov.w	ip, #10
 800715e:	4619      	mov	r1, r3
 8007160:	3401      	adds	r4, #1
 8007162:	9305      	str	r3, [sp, #20]
 8007164:	4620      	mov	r0, r4
 8007166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800716a:	3a30      	subs	r2, #48	@ 0x30
 800716c:	2a09      	cmp	r2, #9
 800716e:	d903      	bls.n	8007178 <_vfiprintf_r+0x1cc>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0c6      	beq.n	8007102 <_vfiprintf_r+0x156>
 8007174:	9105      	str	r1, [sp, #20]
 8007176:	e7c4      	b.n	8007102 <_vfiprintf_r+0x156>
 8007178:	4604      	mov	r4, r0
 800717a:	2301      	movs	r3, #1
 800717c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007180:	e7f0      	b.n	8007164 <_vfiprintf_r+0x1b8>
 8007182:	ab03      	add	r3, sp, #12
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	462a      	mov	r2, r5
 8007188:	4630      	mov	r0, r6
 800718a:	4b13      	ldr	r3, [pc, #76]	@ (80071d8 <_vfiprintf_r+0x22c>)
 800718c:	a904      	add	r1, sp, #16
 800718e:	f3af 8000 	nop.w
 8007192:	4607      	mov	r7, r0
 8007194:	1c78      	adds	r0, r7, #1
 8007196:	d1d6      	bne.n	8007146 <_vfiprintf_r+0x19a>
 8007198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800719a:	07d9      	lsls	r1, r3, #31
 800719c:	d405      	bmi.n	80071aa <_vfiprintf_r+0x1fe>
 800719e:	89ab      	ldrh	r3, [r5, #12]
 80071a0:	059a      	lsls	r2, r3, #22
 80071a2:	d402      	bmi.n	80071aa <_vfiprintf_r+0x1fe>
 80071a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071a6:	f7fe fcc5 	bl	8005b34 <__retarget_lock_release_recursive>
 80071aa:	89ab      	ldrh	r3, [r5, #12]
 80071ac:	065b      	lsls	r3, r3, #25
 80071ae:	f53f af1f 	bmi.w	8006ff0 <_vfiprintf_r+0x44>
 80071b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071b4:	e71e      	b.n	8006ff4 <_vfiprintf_r+0x48>
 80071b6:	ab03      	add	r3, sp, #12
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	462a      	mov	r2, r5
 80071bc:	4630      	mov	r0, r6
 80071be:	4b06      	ldr	r3, [pc, #24]	@ (80071d8 <_vfiprintf_r+0x22c>)
 80071c0:	a904      	add	r1, sp, #16
 80071c2:	f000 f87d 	bl	80072c0 <_printf_i>
 80071c6:	e7e4      	b.n	8007192 <_vfiprintf_r+0x1e6>
 80071c8:	08007a23 	.word	0x08007a23
 80071cc:	08007a29 	.word	0x08007a29
 80071d0:	08007a2d 	.word	0x08007a2d
 80071d4:	00000000 	.word	0x00000000
 80071d8:	08006f89 	.word	0x08006f89

080071dc <_printf_common>:
 80071dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e0:	4616      	mov	r6, r2
 80071e2:	4698      	mov	r8, r3
 80071e4:	688a      	ldr	r2, [r1, #8]
 80071e6:	690b      	ldr	r3, [r1, #16]
 80071e8:	4607      	mov	r7, r0
 80071ea:	4293      	cmp	r3, r2
 80071ec:	bfb8      	it	lt
 80071ee:	4613      	movlt	r3, r2
 80071f0:	6033      	str	r3, [r6, #0]
 80071f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071f6:	460c      	mov	r4, r1
 80071f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071fc:	b10a      	cbz	r2, 8007202 <_printf_common+0x26>
 80071fe:	3301      	adds	r3, #1
 8007200:	6033      	str	r3, [r6, #0]
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	0699      	lsls	r1, r3, #26
 8007206:	bf42      	ittt	mi
 8007208:	6833      	ldrmi	r3, [r6, #0]
 800720a:	3302      	addmi	r3, #2
 800720c:	6033      	strmi	r3, [r6, #0]
 800720e:	6825      	ldr	r5, [r4, #0]
 8007210:	f015 0506 	ands.w	r5, r5, #6
 8007214:	d106      	bne.n	8007224 <_printf_common+0x48>
 8007216:	f104 0a19 	add.w	sl, r4, #25
 800721a:	68e3      	ldr	r3, [r4, #12]
 800721c:	6832      	ldr	r2, [r6, #0]
 800721e:	1a9b      	subs	r3, r3, r2
 8007220:	42ab      	cmp	r3, r5
 8007222:	dc2b      	bgt.n	800727c <_printf_common+0xa0>
 8007224:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007228:	6822      	ldr	r2, [r4, #0]
 800722a:	3b00      	subs	r3, #0
 800722c:	bf18      	it	ne
 800722e:	2301      	movne	r3, #1
 8007230:	0692      	lsls	r2, r2, #26
 8007232:	d430      	bmi.n	8007296 <_printf_common+0xba>
 8007234:	4641      	mov	r1, r8
 8007236:	4638      	mov	r0, r7
 8007238:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800723c:	47c8      	blx	r9
 800723e:	3001      	adds	r0, #1
 8007240:	d023      	beq.n	800728a <_printf_common+0xae>
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	6922      	ldr	r2, [r4, #16]
 8007246:	f003 0306 	and.w	r3, r3, #6
 800724a:	2b04      	cmp	r3, #4
 800724c:	bf14      	ite	ne
 800724e:	2500      	movne	r5, #0
 8007250:	6833      	ldreq	r3, [r6, #0]
 8007252:	f04f 0600 	mov.w	r6, #0
 8007256:	bf08      	it	eq
 8007258:	68e5      	ldreq	r5, [r4, #12]
 800725a:	f104 041a 	add.w	r4, r4, #26
 800725e:	bf08      	it	eq
 8007260:	1aed      	subeq	r5, r5, r3
 8007262:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007266:	bf08      	it	eq
 8007268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800726c:	4293      	cmp	r3, r2
 800726e:	bfc4      	itt	gt
 8007270:	1a9b      	subgt	r3, r3, r2
 8007272:	18ed      	addgt	r5, r5, r3
 8007274:	42b5      	cmp	r5, r6
 8007276:	d11a      	bne.n	80072ae <_printf_common+0xd2>
 8007278:	2000      	movs	r0, #0
 800727a:	e008      	b.n	800728e <_printf_common+0xb2>
 800727c:	2301      	movs	r3, #1
 800727e:	4652      	mov	r2, sl
 8007280:	4641      	mov	r1, r8
 8007282:	4638      	mov	r0, r7
 8007284:	47c8      	blx	r9
 8007286:	3001      	adds	r0, #1
 8007288:	d103      	bne.n	8007292 <_printf_common+0xb6>
 800728a:	f04f 30ff 	mov.w	r0, #4294967295
 800728e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007292:	3501      	adds	r5, #1
 8007294:	e7c1      	b.n	800721a <_printf_common+0x3e>
 8007296:	2030      	movs	r0, #48	@ 0x30
 8007298:	18e1      	adds	r1, r4, r3
 800729a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072a4:	4422      	add	r2, r4
 80072a6:	3302      	adds	r3, #2
 80072a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072ac:	e7c2      	b.n	8007234 <_printf_common+0x58>
 80072ae:	2301      	movs	r3, #1
 80072b0:	4622      	mov	r2, r4
 80072b2:	4641      	mov	r1, r8
 80072b4:	4638      	mov	r0, r7
 80072b6:	47c8      	blx	r9
 80072b8:	3001      	adds	r0, #1
 80072ba:	d0e6      	beq.n	800728a <_printf_common+0xae>
 80072bc:	3601      	adds	r6, #1
 80072be:	e7d9      	b.n	8007274 <_printf_common+0x98>

080072c0 <_printf_i>:
 80072c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072c4:	7e0f      	ldrb	r7, [r1, #24]
 80072c6:	4691      	mov	r9, r2
 80072c8:	2f78      	cmp	r7, #120	@ 0x78
 80072ca:	4680      	mov	r8, r0
 80072cc:	460c      	mov	r4, r1
 80072ce:	469a      	mov	sl, r3
 80072d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072d6:	d807      	bhi.n	80072e8 <_printf_i+0x28>
 80072d8:	2f62      	cmp	r7, #98	@ 0x62
 80072da:	d80a      	bhi.n	80072f2 <_printf_i+0x32>
 80072dc:	2f00      	cmp	r7, #0
 80072de:	f000 80d1 	beq.w	8007484 <_printf_i+0x1c4>
 80072e2:	2f58      	cmp	r7, #88	@ 0x58
 80072e4:	f000 80b8 	beq.w	8007458 <_printf_i+0x198>
 80072e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072f0:	e03a      	b.n	8007368 <_printf_i+0xa8>
 80072f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072f6:	2b15      	cmp	r3, #21
 80072f8:	d8f6      	bhi.n	80072e8 <_printf_i+0x28>
 80072fa:	a101      	add	r1, pc, #4	@ (adr r1, 8007300 <_printf_i+0x40>)
 80072fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007300:	08007359 	.word	0x08007359
 8007304:	0800736d 	.word	0x0800736d
 8007308:	080072e9 	.word	0x080072e9
 800730c:	080072e9 	.word	0x080072e9
 8007310:	080072e9 	.word	0x080072e9
 8007314:	080072e9 	.word	0x080072e9
 8007318:	0800736d 	.word	0x0800736d
 800731c:	080072e9 	.word	0x080072e9
 8007320:	080072e9 	.word	0x080072e9
 8007324:	080072e9 	.word	0x080072e9
 8007328:	080072e9 	.word	0x080072e9
 800732c:	0800746b 	.word	0x0800746b
 8007330:	08007397 	.word	0x08007397
 8007334:	08007425 	.word	0x08007425
 8007338:	080072e9 	.word	0x080072e9
 800733c:	080072e9 	.word	0x080072e9
 8007340:	0800748d 	.word	0x0800748d
 8007344:	080072e9 	.word	0x080072e9
 8007348:	08007397 	.word	0x08007397
 800734c:	080072e9 	.word	0x080072e9
 8007350:	080072e9 	.word	0x080072e9
 8007354:	0800742d 	.word	0x0800742d
 8007358:	6833      	ldr	r3, [r6, #0]
 800735a:	1d1a      	adds	r2, r3, #4
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6032      	str	r2, [r6, #0]
 8007360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007364:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007368:	2301      	movs	r3, #1
 800736a:	e09c      	b.n	80074a6 <_printf_i+0x1e6>
 800736c:	6833      	ldr	r3, [r6, #0]
 800736e:	6820      	ldr	r0, [r4, #0]
 8007370:	1d19      	adds	r1, r3, #4
 8007372:	6031      	str	r1, [r6, #0]
 8007374:	0606      	lsls	r6, r0, #24
 8007376:	d501      	bpl.n	800737c <_printf_i+0xbc>
 8007378:	681d      	ldr	r5, [r3, #0]
 800737a:	e003      	b.n	8007384 <_printf_i+0xc4>
 800737c:	0645      	lsls	r5, r0, #25
 800737e:	d5fb      	bpl.n	8007378 <_printf_i+0xb8>
 8007380:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007384:	2d00      	cmp	r5, #0
 8007386:	da03      	bge.n	8007390 <_printf_i+0xd0>
 8007388:	232d      	movs	r3, #45	@ 0x2d
 800738a:	426d      	negs	r5, r5
 800738c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007390:	230a      	movs	r3, #10
 8007392:	4858      	ldr	r0, [pc, #352]	@ (80074f4 <_printf_i+0x234>)
 8007394:	e011      	b.n	80073ba <_printf_i+0xfa>
 8007396:	6821      	ldr	r1, [r4, #0]
 8007398:	6833      	ldr	r3, [r6, #0]
 800739a:	0608      	lsls	r0, r1, #24
 800739c:	f853 5b04 	ldr.w	r5, [r3], #4
 80073a0:	d402      	bmi.n	80073a8 <_printf_i+0xe8>
 80073a2:	0649      	lsls	r1, r1, #25
 80073a4:	bf48      	it	mi
 80073a6:	b2ad      	uxthmi	r5, r5
 80073a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80073aa:	6033      	str	r3, [r6, #0]
 80073ac:	bf14      	ite	ne
 80073ae:	230a      	movne	r3, #10
 80073b0:	2308      	moveq	r3, #8
 80073b2:	4850      	ldr	r0, [pc, #320]	@ (80074f4 <_printf_i+0x234>)
 80073b4:	2100      	movs	r1, #0
 80073b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073ba:	6866      	ldr	r6, [r4, #4]
 80073bc:	2e00      	cmp	r6, #0
 80073be:	60a6      	str	r6, [r4, #8]
 80073c0:	db05      	blt.n	80073ce <_printf_i+0x10e>
 80073c2:	6821      	ldr	r1, [r4, #0]
 80073c4:	432e      	orrs	r6, r5
 80073c6:	f021 0104 	bic.w	r1, r1, #4
 80073ca:	6021      	str	r1, [r4, #0]
 80073cc:	d04b      	beq.n	8007466 <_printf_i+0x1a6>
 80073ce:	4616      	mov	r6, r2
 80073d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80073d4:	fb03 5711 	mls	r7, r3, r1, r5
 80073d8:	5dc7      	ldrb	r7, [r0, r7]
 80073da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073de:	462f      	mov	r7, r5
 80073e0:	42bb      	cmp	r3, r7
 80073e2:	460d      	mov	r5, r1
 80073e4:	d9f4      	bls.n	80073d0 <_printf_i+0x110>
 80073e6:	2b08      	cmp	r3, #8
 80073e8:	d10b      	bne.n	8007402 <_printf_i+0x142>
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	07df      	lsls	r7, r3, #31
 80073ee:	d508      	bpl.n	8007402 <_printf_i+0x142>
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	6861      	ldr	r1, [r4, #4]
 80073f4:	4299      	cmp	r1, r3
 80073f6:	bfde      	ittt	le
 80073f8:	2330      	movle	r3, #48	@ 0x30
 80073fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007402:	1b92      	subs	r2, r2, r6
 8007404:	6122      	str	r2, [r4, #16]
 8007406:	464b      	mov	r3, r9
 8007408:	4621      	mov	r1, r4
 800740a:	4640      	mov	r0, r8
 800740c:	f8cd a000 	str.w	sl, [sp]
 8007410:	aa03      	add	r2, sp, #12
 8007412:	f7ff fee3 	bl	80071dc <_printf_common>
 8007416:	3001      	adds	r0, #1
 8007418:	d14a      	bne.n	80074b0 <_printf_i+0x1f0>
 800741a:	f04f 30ff 	mov.w	r0, #4294967295
 800741e:	b004      	add	sp, #16
 8007420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	f043 0320 	orr.w	r3, r3, #32
 800742a:	6023      	str	r3, [r4, #0]
 800742c:	2778      	movs	r7, #120	@ 0x78
 800742e:	4832      	ldr	r0, [pc, #200]	@ (80074f8 <_printf_i+0x238>)
 8007430:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	6831      	ldr	r1, [r6, #0]
 8007438:	061f      	lsls	r7, r3, #24
 800743a:	f851 5b04 	ldr.w	r5, [r1], #4
 800743e:	d402      	bmi.n	8007446 <_printf_i+0x186>
 8007440:	065f      	lsls	r7, r3, #25
 8007442:	bf48      	it	mi
 8007444:	b2ad      	uxthmi	r5, r5
 8007446:	6031      	str	r1, [r6, #0]
 8007448:	07d9      	lsls	r1, r3, #31
 800744a:	bf44      	itt	mi
 800744c:	f043 0320 	orrmi.w	r3, r3, #32
 8007450:	6023      	strmi	r3, [r4, #0]
 8007452:	b11d      	cbz	r5, 800745c <_printf_i+0x19c>
 8007454:	2310      	movs	r3, #16
 8007456:	e7ad      	b.n	80073b4 <_printf_i+0xf4>
 8007458:	4826      	ldr	r0, [pc, #152]	@ (80074f4 <_printf_i+0x234>)
 800745a:	e7e9      	b.n	8007430 <_printf_i+0x170>
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	f023 0320 	bic.w	r3, r3, #32
 8007462:	6023      	str	r3, [r4, #0]
 8007464:	e7f6      	b.n	8007454 <_printf_i+0x194>
 8007466:	4616      	mov	r6, r2
 8007468:	e7bd      	b.n	80073e6 <_printf_i+0x126>
 800746a:	6833      	ldr	r3, [r6, #0]
 800746c:	6825      	ldr	r5, [r4, #0]
 800746e:	1d18      	adds	r0, r3, #4
 8007470:	6961      	ldr	r1, [r4, #20]
 8007472:	6030      	str	r0, [r6, #0]
 8007474:	062e      	lsls	r6, r5, #24
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	d501      	bpl.n	800747e <_printf_i+0x1be>
 800747a:	6019      	str	r1, [r3, #0]
 800747c:	e002      	b.n	8007484 <_printf_i+0x1c4>
 800747e:	0668      	lsls	r0, r5, #25
 8007480:	d5fb      	bpl.n	800747a <_printf_i+0x1ba>
 8007482:	8019      	strh	r1, [r3, #0]
 8007484:	2300      	movs	r3, #0
 8007486:	4616      	mov	r6, r2
 8007488:	6123      	str	r3, [r4, #16]
 800748a:	e7bc      	b.n	8007406 <_printf_i+0x146>
 800748c:	6833      	ldr	r3, [r6, #0]
 800748e:	2100      	movs	r1, #0
 8007490:	1d1a      	adds	r2, r3, #4
 8007492:	6032      	str	r2, [r6, #0]
 8007494:	681e      	ldr	r6, [r3, #0]
 8007496:	6862      	ldr	r2, [r4, #4]
 8007498:	4630      	mov	r0, r6
 800749a:	f000 f907 	bl	80076ac <memchr>
 800749e:	b108      	cbz	r0, 80074a4 <_printf_i+0x1e4>
 80074a0:	1b80      	subs	r0, r0, r6
 80074a2:	6060      	str	r0, [r4, #4]
 80074a4:	6863      	ldr	r3, [r4, #4]
 80074a6:	6123      	str	r3, [r4, #16]
 80074a8:	2300      	movs	r3, #0
 80074aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074ae:	e7aa      	b.n	8007406 <_printf_i+0x146>
 80074b0:	4632      	mov	r2, r6
 80074b2:	4649      	mov	r1, r9
 80074b4:	4640      	mov	r0, r8
 80074b6:	6923      	ldr	r3, [r4, #16]
 80074b8:	47d0      	blx	sl
 80074ba:	3001      	adds	r0, #1
 80074bc:	d0ad      	beq.n	800741a <_printf_i+0x15a>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	079b      	lsls	r3, r3, #30
 80074c2:	d413      	bmi.n	80074ec <_printf_i+0x22c>
 80074c4:	68e0      	ldr	r0, [r4, #12]
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	4298      	cmp	r0, r3
 80074ca:	bfb8      	it	lt
 80074cc:	4618      	movlt	r0, r3
 80074ce:	e7a6      	b.n	800741e <_printf_i+0x15e>
 80074d0:	2301      	movs	r3, #1
 80074d2:	4632      	mov	r2, r6
 80074d4:	4649      	mov	r1, r9
 80074d6:	4640      	mov	r0, r8
 80074d8:	47d0      	blx	sl
 80074da:	3001      	adds	r0, #1
 80074dc:	d09d      	beq.n	800741a <_printf_i+0x15a>
 80074de:	3501      	adds	r5, #1
 80074e0:	68e3      	ldr	r3, [r4, #12]
 80074e2:	9903      	ldr	r1, [sp, #12]
 80074e4:	1a5b      	subs	r3, r3, r1
 80074e6:	42ab      	cmp	r3, r5
 80074e8:	dcf2      	bgt.n	80074d0 <_printf_i+0x210>
 80074ea:	e7eb      	b.n	80074c4 <_printf_i+0x204>
 80074ec:	2500      	movs	r5, #0
 80074ee:	f104 0619 	add.w	r6, r4, #25
 80074f2:	e7f5      	b.n	80074e0 <_printf_i+0x220>
 80074f4:	08007a34 	.word	0x08007a34
 80074f8:	08007a45 	.word	0x08007a45

080074fc <__swbuf_r>:
 80074fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fe:	460e      	mov	r6, r1
 8007500:	4614      	mov	r4, r2
 8007502:	4605      	mov	r5, r0
 8007504:	b118      	cbz	r0, 800750e <__swbuf_r+0x12>
 8007506:	6a03      	ldr	r3, [r0, #32]
 8007508:	b90b      	cbnz	r3, 800750e <__swbuf_r+0x12>
 800750a:	f7fe f9b1 	bl	8005870 <__sinit>
 800750e:	69a3      	ldr	r3, [r4, #24]
 8007510:	60a3      	str	r3, [r4, #8]
 8007512:	89a3      	ldrh	r3, [r4, #12]
 8007514:	071a      	lsls	r2, r3, #28
 8007516:	d501      	bpl.n	800751c <__swbuf_r+0x20>
 8007518:	6923      	ldr	r3, [r4, #16]
 800751a:	b943      	cbnz	r3, 800752e <__swbuf_r+0x32>
 800751c:	4621      	mov	r1, r4
 800751e:	4628      	mov	r0, r5
 8007520:	f000 f82a 	bl	8007578 <__swsetup_r>
 8007524:	b118      	cbz	r0, 800752e <__swbuf_r+0x32>
 8007526:	f04f 37ff 	mov.w	r7, #4294967295
 800752a:	4638      	mov	r0, r7
 800752c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	6922      	ldr	r2, [r4, #16]
 8007532:	b2f6      	uxtb	r6, r6
 8007534:	1a98      	subs	r0, r3, r2
 8007536:	6963      	ldr	r3, [r4, #20]
 8007538:	4637      	mov	r7, r6
 800753a:	4283      	cmp	r3, r0
 800753c:	dc05      	bgt.n	800754a <__swbuf_r+0x4e>
 800753e:	4621      	mov	r1, r4
 8007540:	4628      	mov	r0, r5
 8007542:	f7ff fca7 	bl	8006e94 <_fflush_r>
 8007546:	2800      	cmp	r0, #0
 8007548:	d1ed      	bne.n	8007526 <__swbuf_r+0x2a>
 800754a:	68a3      	ldr	r3, [r4, #8]
 800754c:	3b01      	subs	r3, #1
 800754e:	60a3      	str	r3, [r4, #8]
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	6022      	str	r2, [r4, #0]
 8007556:	701e      	strb	r6, [r3, #0]
 8007558:	6962      	ldr	r2, [r4, #20]
 800755a:	1c43      	adds	r3, r0, #1
 800755c:	429a      	cmp	r2, r3
 800755e:	d004      	beq.n	800756a <__swbuf_r+0x6e>
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	07db      	lsls	r3, r3, #31
 8007564:	d5e1      	bpl.n	800752a <__swbuf_r+0x2e>
 8007566:	2e0a      	cmp	r6, #10
 8007568:	d1df      	bne.n	800752a <__swbuf_r+0x2e>
 800756a:	4621      	mov	r1, r4
 800756c:	4628      	mov	r0, r5
 800756e:	f7ff fc91 	bl	8006e94 <_fflush_r>
 8007572:	2800      	cmp	r0, #0
 8007574:	d0d9      	beq.n	800752a <__swbuf_r+0x2e>
 8007576:	e7d6      	b.n	8007526 <__swbuf_r+0x2a>

08007578 <__swsetup_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4b29      	ldr	r3, [pc, #164]	@ (8007620 <__swsetup_r+0xa8>)
 800757c:	4605      	mov	r5, r0
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	460c      	mov	r4, r1
 8007582:	b118      	cbz	r0, 800758c <__swsetup_r+0x14>
 8007584:	6a03      	ldr	r3, [r0, #32]
 8007586:	b90b      	cbnz	r3, 800758c <__swsetup_r+0x14>
 8007588:	f7fe f972 	bl	8005870 <__sinit>
 800758c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007590:	0719      	lsls	r1, r3, #28
 8007592:	d422      	bmi.n	80075da <__swsetup_r+0x62>
 8007594:	06da      	lsls	r2, r3, #27
 8007596:	d407      	bmi.n	80075a8 <__swsetup_r+0x30>
 8007598:	2209      	movs	r2, #9
 800759a:	602a      	str	r2, [r5, #0]
 800759c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	81a3      	strh	r3, [r4, #12]
 80075a6:	e033      	b.n	8007610 <__swsetup_r+0x98>
 80075a8:	0758      	lsls	r0, r3, #29
 80075aa:	d512      	bpl.n	80075d2 <__swsetup_r+0x5a>
 80075ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075ae:	b141      	cbz	r1, 80075c2 <__swsetup_r+0x4a>
 80075b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075b4:	4299      	cmp	r1, r3
 80075b6:	d002      	beq.n	80075be <__swsetup_r+0x46>
 80075b8:	4628      	mov	r0, r5
 80075ba:	f7fe faf3 	bl	8005ba4 <_free_r>
 80075be:	2300      	movs	r3, #0
 80075c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075c8:	81a3      	strh	r3, [r4, #12]
 80075ca:	2300      	movs	r3, #0
 80075cc:	6063      	str	r3, [r4, #4]
 80075ce:	6923      	ldr	r3, [r4, #16]
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	89a3      	ldrh	r3, [r4, #12]
 80075d4:	f043 0308 	orr.w	r3, r3, #8
 80075d8:	81a3      	strh	r3, [r4, #12]
 80075da:	6923      	ldr	r3, [r4, #16]
 80075dc:	b94b      	cbnz	r3, 80075f2 <__swsetup_r+0x7a>
 80075de:	89a3      	ldrh	r3, [r4, #12]
 80075e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80075e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075e8:	d003      	beq.n	80075f2 <__swsetup_r+0x7a>
 80075ea:	4621      	mov	r1, r4
 80075ec:	4628      	mov	r0, r5
 80075ee:	f000 f890 	bl	8007712 <__smakebuf_r>
 80075f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075f6:	f013 0201 	ands.w	r2, r3, #1
 80075fa:	d00a      	beq.n	8007612 <__swsetup_r+0x9a>
 80075fc:	2200      	movs	r2, #0
 80075fe:	60a2      	str	r2, [r4, #8]
 8007600:	6962      	ldr	r2, [r4, #20]
 8007602:	4252      	negs	r2, r2
 8007604:	61a2      	str	r2, [r4, #24]
 8007606:	6922      	ldr	r2, [r4, #16]
 8007608:	b942      	cbnz	r2, 800761c <__swsetup_r+0xa4>
 800760a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800760e:	d1c5      	bne.n	800759c <__swsetup_r+0x24>
 8007610:	bd38      	pop	{r3, r4, r5, pc}
 8007612:	0799      	lsls	r1, r3, #30
 8007614:	bf58      	it	pl
 8007616:	6962      	ldrpl	r2, [r4, #20]
 8007618:	60a2      	str	r2, [r4, #8]
 800761a:	e7f4      	b.n	8007606 <__swsetup_r+0x8e>
 800761c:	2000      	movs	r0, #0
 800761e:	e7f7      	b.n	8007610 <__swsetup_r+0x98>
 8007620:	20000194 	.word	0x20000194

08007624 <_raise_r>:
 8007624:	291f      	cmp	r1, #31
 8007626:	b538      	push	{r3, r4, r5, lr}
 8007628:	4605      	mov	r5, r0
 800762a:	460c      	mov	r4, r1
 800762c:	d904      	bls.n	8007638 <_raise_r+0x14>
 800762e:	2316      	movs	r3, #22
 8007630:	6003      	str	r3, [r0, #0]
 8007632:	f04f 30ff 	mov.w	r0, #4294967295
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800763a:	b112      	cbz	r2, 8007642 <_raise_r+0x1e>
 800763c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007640:	b94b      	cbnz	r3, 8007656 <_raise_r+0x32>
 8007642:	4628      	mov	r0, r5
 8007644:	f000 f830 	bl	80076a8 <_getpid_r>
 8007648:	4622      	mov	r2, r4
 800764a:	4601      	mov	r1, r0
 800764c:	4628      	mov	r0, r5
 800764e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007652:	f000 b817 	b.w	8007684 <_kill_r>
 8007656:	2b01      	cmp	r3, #1
 8007658:	d00a      	beq.n	8007670 <_raise_r+0x4c>
 800765a:	1c59      	adds	r1, r3, #1
 800765c:	d103      	bne.n	8007666 <_raise_r+0x42>
 800765e:	2316      	movs	r3, #22
 8007660:	6003      	str	r3, [r0, #0]
 8007662:	2001      	movs	r0, #1
 8007664:	e7e7      	b.n	8007636 <_raise_r+0x12>
 8007666:	2100      	movs	r1, #0
 8007668:	4620      	mov	r0, r4
 800766a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800766e:	4798      	blx	r3
 8007670:	2000      	movs	r0, #0
 8007672:	e7e0      	b.n	8007636 <_raise_r+0x12>

08007674 <raise>:
 8007674:	4b02      	ldr	r3, [pc, #8]	@ (8007680 <raise+0xc>)
 8007676:	4601      	mov	r1, r0
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	f7ff bfd3 	b.w	8007624 <_raise_r>
 800767e:	bf00      	nop
 8007680:	20000194 	.word	0x20000194

08007684 <_kill_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	2300      	movs	r3, #0
 8007688:	4d06      	ldr	r5, [pc, #24]	@ (80076a4 <_kill_r+0x20>)
 800768a:	4604      	mov	r4, r0
 800768c:	4608      	mov	r0, r1
 800768e:	4611      	mov	r1, r2
 8007690:	602b      	str	r3, [r5, #0]
 8007692:	f7fa fba8 	bl	8001de6 <_kill>
 8007696:	1c43      	adds	r3, r0, #1
 8007698:	d102      	bne.n	80076a0 <_kill_r+0x1c>
 800769a:	682b      	ldr	r3, [r5, #0]
 800769c:	b103      	cbz	r3, 80076a0 <_kill_r+0x1c>
 800769e:	6023      	str	r3, [r4, #0]
 80076a0:	bd38      	pop	{r3, r4, r5, pc}
 80076a2:	bf00      	nop
 80076a4:	2000046c 	.word	0x2000046c

080076a8 <_getpid_r>:
 80076a8:	f7fa bb96 	b.w	8001dd8 <_getpid>

080076ac <memchr>:
 80076ac:	4603      	mov	r3, r0
 80076ae:	b510      	push	{r4, lr}
 80076b0:	b2c9      	uxtb	r1, r1
 80076b2:	4402      	add	r2, r0
 80076b4:	4293      	cmp	r3, r2
 80076b6:	4618      	mov	r0, r3
 80076b8:	d101      	bne.n	80076be <memchr+0x12>
 80076ba:	2000      	movs	r0, #0
 80076bc:	e003      	b.n	80076c6 <memchr+0x1a>
 80076be:	7804      	ldrb	r4, [r0, #0]
 80076c0:	3301      	adds	r3, #1
 80076c2:	428c      	cmp	r4, r1
 80076c4:	d1f6      	bne.n	80076b4 <memchr+0x8>
 80076c6:	bd10      	pop	{r4, pc}

080076c8 <__swhatbuf_r>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	460c      	mov	r4, r1
 80076cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d0:	4615      	mov	r5, r2
 80076d2:	2900      	cmp	r1, #0
 80076d4:	461e      	mov	r6, r3
 80076d6:	b096      	sub	sp, #88	@ 0x58
 80076d8:	da0c      	bge.n	80076f4 <__swhatbuf_r+0x2c>
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	2100      	movs	r1, #0
 80076de:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80076e2:	bf14      	ite	ne
 80076e4:	2340      	movne	r3, #64	@ 0x40
 80076e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80076ea:	2000      	movs	r0, #0
 80076ec:	6031      	str	r1, [r6, #0]
 80076ee:	602b      	str	r3, [r5, #0]
 80076f0:	b016      	add	sp, #88	@ 0x58
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	466a      	mov	r2, sp
 80076f6:	f000 f849 	bl	800778c <_fstat_r>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	dbed      	blt.n	80076da <__swhatbuf_r+0x12>
 80076fe:	9901      	ldr	r1, [sp, #4]
 8007700:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007704:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007708:	4259      	negs	r1, r3
 800770a:	4159      	adcs	r1, r3
 800770c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007710:	e7eb      	b.n	80076ea <__swhatbuf_r+0x22>

08007712 <__smakebuf_r>:
 8007712:	898b      	ldrh	r3, [r1, #12]
 8007714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007716:	079d      	lsls	r5, r3, #30
 8007718:	4606      	mov	r6, r0
 800771a:	460c      	mov	r4, r1
 800771c:	d507      	bpl.n	800772e <__smakebuf_r+0x1c>
 800771e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007722:	6023      	str	r3, [r4, #0]
 8007724:	6123      	str	r3, [r4, #16]
 8007726:	2301      	movs	r3, #1
 8007728:	6163      	str	r3, [r4, #20]
 800772a:	b003      	add	sp, #12
 800772c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800772e:	466a      	mov	r2, sp
 8007730:	ab01      	add	r3, sp, #4
 8007732:	f7ff ffc9 	bl	80076c8 <__swhatbuf_r>
 8007736:	9f00      	ldr	r7, [sp, #0]
 8007738:	4605      	mov	r5, r0
 800773a:	4639      	mov	r1, r7
 800773c:	4630      	mov	r0, r6
 800773e:	f7fe fddd 	bl	80062fc <_malloc_r>
 8007742:	b948      	cbnz	r0, 8007758 <__smakebuf_r+0x46>
 8007744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007748:	059a      	lsls	r2, r3, #22
 800774a:	d4ee      	bmi.n	800772a <__smakebuf_r+0x18>
 800774c:	f023 0303 	bic.w	r3, r3, #3
 8007750:	f043 0302 	orr.w	r3, r3, #2
 8007754:	81a3      	strh	r3, [r4, #12]
 8007756:	e7e2      	b.n	800771e <__smakebuf_r+0xc>
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800775e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007762:	81a3      	strh	r3, [r4, #12]
 8007764:	9b01      	ldr	r3, [sp, #4]
 8007766:	6020      	str	r0, [r4, #0]
 8007768:	b15b      	cbz	r3, 8007782 <__smakebuf_r+0x70>
 800776a:	4630      	mov	r0, r6
 800776c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007770:	f000 f81e 	bl	80077b0 <_isatty_r>
 8007774:	b128      	cbz	r0, 8007782 <__smakebuf_r+0x70>
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	f023 0303 	bic.w	r3, r3, #3
 800777c:	f043 0301 	orr.w	r3, r3, #1
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	431d      	orrs	r5, r3
 8007786:	81a5      	strh	r5, [r4, #12]
 8007788:	e7cf      	b.n	800772a <__smakebuf_r+0x18>
	...

0800778c <_fstat_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	2300      	movs	r3, #0
 8007790:	4d06      	ldr	r5, [pc, #24]	@ (80077ac <_fstat_r+0x20>)
 8007792:	4604      	mov	r4, r0
 8007794:	4608      	mov	r0, r1
 8007796:	4611      	mov	r1, r2
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	f7fa fb83 	bl	8001ea4 <_fstat>
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	d102      	bne.n	80077a8 <_fstat_r+0x1c>
 80077a2:	682b      	ldr	r3, [r5, #0]
 80077a4:	b103      	cbz	r3, 80077a8 <_fstat_r+0x1c>
 80077a6:	6023      	str	r3, [r4, #0]
 80077a8:	bd38      	pop	{r3, r4, r5, pc}
 80077aa:	bf00      	nop
 80077ac:	2000046c 	.word	0x2000046c

080077b0 <_isatty_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	2300      	movs	r3, #0
 80077b4:	4d05      	ldr	r5, [pc, #20]	@ (80077cc <_isatty_r+0x1c>)
 80077b6:	4604      	mov	r4, r0
 80077b8:	4608      	mov	r0, r1
 80077ba:	602b      	str	r3, [r5, #0]
 80077bc:	f7fa fb81 	bl	8001ec2 <_isatty>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d102      	bne.n	80077ca <_isatty_r+0x1a>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	b103      	cbz	r3, 80077ca <_isatty_r+0x1a>
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
 80077cc:	2000046c 	.word	0x2000046c

080077d0 <lroundf>:
 80077d0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80077d4:	2800      	cmp	r0, #0
 80077d6:	b510      	push	{r4, lr}
 80077d8:	f1a3 047f 	sub.w	r4, r3, #127	@ 0x7f
 80077dc:	bfac      	ite	ge
 80077de:	2101      	movge	r1, #1
 80077e0:	f04f 31ff 	movlt.w	r1, #4294967295
 80077e4:	2c1e      	cmp	r4, #30
 80077e6:	dc1b      	bgt.n	8007820 <lroundf+0x50>
 80077e8:	2c00      	cmp	r4, #0
 80077ea:	da04      	bge.n	80077f6 <lroundf+0x26>
 80077ec:	3401      	adds	r4, #1
 80077ee:	bf18      	it	ne
 80077f0:	2100      	movne	r1, #0
 80077f2:	4608      	mov	r0, r1
 80077f4:	bd10      	pop	{r4, pc}
 80077f6:	2c16      	cmp	r4, #22
 80077f8:	bfd8      	it	le
 80077fa:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 80077fe:	f3c0 0216 	ubfx	r2, r0, #0, #23
 8007802:	bfd8      	it	le
 8007804:	4123      	asrle	r3, r4
 8007806:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800780a:	bfcd      	iteet	gt
 800780c:	3b96      	subgt	r3, #150	@ 0x96
 800780e:	189b      	addle	r3, r3, r2
 8007810:	f1c4 0417 	rsble	r4, r4, #23
 8007814:	fa02 f303 	lslgt.w	r3, r2, r3
 8007818:	bfd8      	it	le
 800781a:	40e3      	lsrle	r3, r4
 800781c:	4359      	muls	r1, r3
 800781e:	e7e8      	b.n	80077f2 <lroundf+0x22>
 8007820:	f7f9 fc6e 	bl	8001100 <__aeabi_f2iz>
 8007824:	4601      	mov	r1, r0
 8007826:	e7e4      	b.n	80077f2 <lroundf+0x22>

08007828 <_init>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	bf00      	nop
 800782c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782e:	bc08      	pop	{r3}
 8007830:	469e      	mov	lr, r3
 8007832:	4770      	bx	lr

08007834 <_fini>:
 8007834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007836:	bf00      	nop
 8007838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783a:	bc08      	pop	{r3}
 800783c:	469e      	mov	lr, r3
 800783e:	4770      	bx	lr
